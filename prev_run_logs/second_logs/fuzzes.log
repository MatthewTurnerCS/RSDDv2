the generated formulas used by the solvers



-- iteration 1 --
(declare-fun f0 (Float64 Float16 Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001010010011001 #b0011101001010101010100111011101001001111010001010001111111001000000001110111001000111011111111100000011001000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float2 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float5 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ((_ to_fp 15 113) RNE ?float8) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 ?bool13))
(check-sat)


-- iteration 2 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01111010 #b01010101000111111000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and (and (and ?bool11))))
(check-sat)


-- iteration 3 --
(declare-fun f0 (Float16 Float16 Float16) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float6 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTZ ?float4) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 5 11) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool15 ?bool12) (or ?bool14 (or (and ?bool15 ?bool11 ?bool11) (or ?bool13 ?bool15)) (or (and ?bool14 ?bool14 ?bool11) (or ?bool13) ?bool11))))
(check-sat)


-- iteration 4 --
(declare-fun f0 (Float64 Float64 Float16) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 5 11) RTZ ?float6) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float2) ?float8 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (or (or (and (or ?bool13 ?bool14))) (or ?bool12 (and (or ?bool11 ?bool12 ?bool12)) ?bool12) ?bool11))
(check-sat)


-- iteration 5 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float6 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 11 53) RTZ ?float5) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTN ?float7) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (and (or ?bool12) ?bool14))
(check-sat)


-- iteration 6 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00010001 #b10111001101111010010100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RTP ?float6) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTN ?float4) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float3 ((_ to_fp 15 113) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float2) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float5)))
; FINAL ASSERT
(assert (and (or (and (or ?bool14 ?bool13) (and ?bool15 ?bool15 ?bool13) (or ?bool11 ?bool15)) (or ?bool11) ?bool11) ?bool11))
(check-sat)


-- iteration 7 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10100100 #b10001011100001001001001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float2 ((_ to_fp 11 53) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ((_ to_fp 15 113) RTP ?float6))))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 8 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RNE ?float4) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float4 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ((_ to_fp 15 113) RTP ?float6) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTZ ?float8) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float6) ?float7 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RNE ?float2) ?float6)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool12 ?bool11)))
(check-sat)


-- iteration 9 --
(declare-fun f0 (Float128 Float32 Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float6 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float6 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or ?bool11 ?bool15 ?bool14))
(check-sat)


-- iteration 10 --
(declare-fun f0 (Float16 Float32 Float128) Float128)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float2 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float2 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 8 24) RTZ ?float7) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (or (or ?bool14) (or ?bool15) ?bool15) (and (and (and ?bool11 ?bool12) ?bool12 (and ?bool14 ?bool12)))))
(check-sat)


-- iteration 11 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10011 #b1001111001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float4 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 8 24) RTP ?float3))))
; FINAL ASSERT
(assert (or (and (or ?bool11 (or ?bool13 ?bool12 ?bool11)) ?bool14) (and ?bool14 (or (and ?bool11 ?bool11) ?bool15 ?bool13) (or (or ?bool14 ?bool11 ?bool15))) (and ?bool15)))
(check-sat)


-- iteration 12 --
(declare-fun f0 (Float32 Float64 Float16) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RTN ?float3) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float3 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (and (or ?bool12) (or (and ?bool12 ?bool14)) ?bool14))
(check-sat)


-- iteration 13 --
(declare-fun f0 (Float128 Float16 Float128) Float16)
(declare-fun p0 (Float64 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RTP ?float6) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool11 ?bool15) ?bool13))
(check-sat)


-- iteration 14 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or (and (and ?bool14 ?bool13 (or ?bool14 ?bool12)) (and (or ?bool11))) ?bool15))
(check-sat)


-- iteration 15 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float7 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float3 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RNE ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (and (and ?bool15)))
(check-sat)


-- iteration 16 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110111100110100 #b1100100111110010101001111001000010001110100011110010100110101010110111011110101101101101000100110001111101001001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float5 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RNE ?float8) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ((_ to_fp 8 24) RNE ?float5))))
; FINAL ASSERT
(assert (or ?bool15 ?bool13 ?bool12))
(check-sat)


-- iteration 17 --
(declare-fun f0 (Float64 Float64 Float16) Float32)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00011010001 #b1110010001011010101000010100001010000110110011000011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 8 24) RNE ?float3) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float2 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTN ?float9) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RNE ?float6) ?float10)))
; FINAL ASSERT
(assert (and ?bool11 (or (or ?bool13)) (or ?bool13 (and (and ?bool11 ?bool12 ?bool15)))))
(check-sat)


-- iteration 18 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 15 113) RTZ ?float7) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and (or ?bool11 (or ?bool15 ?bool15 (and ?bool13 ?bool14 ?bool14))) (or (or ?bool12 ?bool14) ?bool14)))
(check-sat)


-- iteration 19 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float6 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float7 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float2 ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool12 (and (or ?bool14 ?bool13) (and ?bool11) ?bool15) ?bool13)))
(check-sat)


-- iteration 20 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float2 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float8 ((_ to_fp 8 24) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float2 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12)))
(check-sat)


-- iteration 21 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101000110110011 #b0010100100001010010101001010101100001011111011100000100101000001100001110010110011111010101010111110110100111111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float2 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float5 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float4 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ((_ to_fp 8 24) RNE ?float7))))
; FINAL ASSERT
(assert (or (or ?bool14) ?bool13))
(check-sat)


-- iteration 22 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTZ ?float6) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float4 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RTZ ?float4) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTN ?float6) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 23 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 8 24) RTP ?float8) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTZ ?float9) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTN ?float4) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RTZ ?float2) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float2)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 24 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000100101 #b0110101111110010010000010101110110111101111110000010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float3) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float3) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTP ?float3) ?float4)))
; FINAL ASSERT
(assert (and (and (or ?bool13 ?bool12) ?bool13 ?bool11) (or (and (or ?bool11 ?bool13) (and ?bool13 ?bool14 ?bool13)) (or (or ?bool13) (or ?bool14 ?bool12)))))
(check-sat)


-- iteration 25 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float2 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float3 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 11 53) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool14) (or (and (or ?bool11 ?bool12) (and ?bool11 ?bool12 ?bool14)) (and (and ?bool13) (and ?bool14)))))
(check-sat)


-- iteration 26 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ((_ to_fp 5 11) RTZ ?float4) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float7 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float7 ?float8)))
; FINAL ASSERT
(assert (and (and (and ?bool14) (and ?bool12 (and ?bool11 ?bool14)) (and (and ?bool14 ?bool13 ?bool11) (or ?bool12 ?bool14 ?bool15))) (or (and (or ?bool13) (and ?bool12) (and ?bool11 ?bool15 ?bool13)) ?bool13) (and (and (and ?bool14 ?bool11) (and ?bool13 ?bool15 ?bool14)))))
(check-sat)


-- iteration 27 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTP ?float3) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float3 ((_ to_fp 11 53) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ?float2)))
; FINAL ASSERT
(assert (or ?bool12 ?bool15 (and ?bool13 (and ?bool15))))
(check-sat)


-- iteration 28 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTZ ?float2) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RNE ?float3) ?float10)))
; FINAL ASSERT
(assert (or (or ?bool15) (and ?bool15 ?bool12 ?bool15) ?bool15))
(check-sat)


-- iteration 29 --
(declare-fun f0 (Float64 Float64 Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 11 53) RNE ?float2) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 8 24) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float5))))
; FINAL ASSERT
(assert (and ?bool12 ?bool15))
(check-sat)


-- iteration 30 --
(declare-fun f0 (Float128 Float16 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ((_ to_fp 5 11) RTZ ?float2) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float8 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ?float4 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float6)))
; FINAL ASSERT
(assert (or ?bool15 ?bool14))
(check-sat)


-- iteration 31 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00101 #b0100110001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11011110 #b10001111100000001010010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float6 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float9))))
; FINAL ASSERT
(assert (or ?bool11 ?bool14 (or (and (or ?bool14 ?bool11 ?bool11)))))
(check-sat)


-- iteration 32 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float6 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RNE ?float9) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float6)))
; FINAL ASSERT
(assert (or (and (and (and ?bool11) (and ?bool12 ?bool13 ?bool15)))))
(check-sat)


-- iteration 33 --
(declare-fun f0 (Float16 Float128 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10100111000 #b0101111011111001010001011101101101111010001010011000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float3) ?float3 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float7 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and (and ?bool11 (and (or ?bool12 ?bool11 ?bool14)) (and ?bool11 (or ?bool11 ?bool15) (and ?bool15))) ?bool12))
(check-sat)


-- iteration 34 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float7 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float4 ?float4)))
; FINAL ASSERT
(assert (or ?bool11 ?bool14))
(check-sat)


-- iteration 35 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float3 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 11 53) RNE ?float7) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool15 ?bool12) ?bool12))
(check-sat)


-- iteration 36 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float3 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTP ?float2) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float6) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RNE ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or ?bool12 ?bool12 (or ?bool12 ?bool15)))
(check-sat)


-- iteration 37 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01001 #b1100111101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RNE ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float6)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 38 --
(declare-fun f0 (Float128 Float16 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001101001011101 #b0010110101101100111010010110111111101010101100001011110010100010001110110000010110100110110011111110000011101000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ((_ to_fp 15 113) RTZ ?float3) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float3 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 5 11) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RTZ ?float8) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (or ?bool13 (and (or (and ?bool13 ?bool11 ?bool14) (or ?bool14) (or ?bool13 ?bool14 ?bool11)) (and (or ?bool13 ?bool15) (and ?bool13 ?bool13 ?bool11)))))
(check-sat)


-- iteration 39 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000001110110010 #b1011010110010010011010111011000011101101110001101010011001011111111010011100100000001111001111000011100010111111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float6 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 5 11) RNE ?float6) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTP ?float6) ?float9)))
; FINAL ASSERT
(assert (and ?bool14 ?bool15 (or (or ?bool15 ?bool13) ?bool12)))
(check-sat)


-- iteration 40 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00010 #b1011111100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float6 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTZ ?float7) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTP ?float10) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and (or ?bool11 (and (or ?bool13 ?bool11 ?bool12) (and ?bool15) (or ?bool12)) (and ?bool14 ?bool13 ?bool15))))
(check-sat)


-- iteration 41 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 15 113) RTP ?float4) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float3) ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float7 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ?float8)))
; FINAL ASSERT
(assert (and (or ?bool13) ?bool15))
(check-sat)


-- iteration 42 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01001 #b0010110000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float7 ((_ to_fp 8 24) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RTP ?float9) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RNE ?float7) ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12 (and (and ?bool15 ?bool14) ?bool13 (or ?bool14 ?bool11 ?bool11)))))
(check-sat)


-- iteration 43 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ((_ to_fp 11 53) RNE ?float7) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float3 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 15 113) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float5 ((_ to_fp 11 53) RTN ?float10))))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool13 ?bool13) (and (and ?bool15 ?bool13 ?bool14))))
(check-sat)


-- iteration 44 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 11 53) RTP ?float5) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8 ((_ to_fp 8 24) RTN ?float2))))
; FINAL ASSERT
(assert (or ?bool11 (and (or ?bool13 ?bool13 ?bool12) ?bool15 ?bool12)))
(check-sat)


-- iteration 45 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ?float5)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool12 ?bool15)))
(check-sat)


-- iteration 46 --
(declare-fun f0 (Float128 Float64 Float32) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float6 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float2) ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or ?bool13 ?bool14 (and ?bool14)))
(check-sat)


-- iteration 47 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float4 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTN ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ?float9)))
; FINAL ASSERT
(assert (or (and (and (and ?bool15 ?bool14))) (or (or ?bool11 (or ?bool15 ?bool11)) ?bool12) (and ?bool13 ?bool15 (or (and ?bool15 ?bool14 ?bool14) ?bool13 ?bool13))))
(check-sat)


-- iteration 48 --
(declare-fun f0 (Float32 Float128 Float128) Float16)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 15 113) RTZ ?float3) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4 ((_ to_fp 8 24) RTZ ?float6) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ((_ to_fp 5 11) RTZ ?float6))))
; FINAL ASSERT
(assert (or ?bool15 ?bool15 ?bool11))
(check-sat)


-- iteration 49 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float4 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float4) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13 ?bool11))
(check-sat)


-- iteration 50 --
(declare-fun f0 (Float128 Float16 Float32) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 5 11) RTN ?float7) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTP ?float9) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 51 --
(declare-fun f0 (Float64 Float128 Float64) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00100110 #b00100010100110010001000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10100100 #b00101111011101110000101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float6 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float6 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool12 ?bool12))
(check-sat)


-- iteration 52 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float7 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float3 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RTP ?float4) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float9) ?float6)))
; FINAL ASSERT
(assert (and (or (or (or ?bool14 ?bool12) ?bool14))))
(check-sat)


-- iteration 53 --
(declare-fun f0 (Float16 Float32 Float32) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01110001 #b10111100111111101111001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 8 24) RTN ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float6) ?float4 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float4 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool14 ?bool13) ?bool12))
(check-sat)


-- iteration 54 --
(declare-fun f0 (Float128 Float64 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float5 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float8)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 55 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float2 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTP ?float2) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and ?bool11 ?bool14 (and ?bool13 (or (and ?bool11 ?bool11 ?bool14) ?bool11) (and ?bool12))))
(check-sat)


-- iteration 56 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTZ ?float4 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ?float6 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RNE ?float5) ?float7)))
; FINAL ASSERT
(assert (or (and (or ?bool15) (and ?bool13))))
(check-sat)


-- iteration 57 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01001111110 #b0111001010001010111111101001001110000100001010111100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float10) ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTN ?float2) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8) ?float3 ((_ to_fp 8 24) RNE ?float3))))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool14 (and (and ?bool15))) (and ?bool12 ?bool11) ?bool11))
(check-sat)


-- iteration 58 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10011 #b1100011010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float3 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float5 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float6 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 15 113) RTP ?float4) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 8 24) RTP ?float4))))
; FINAL ASSERT
(assert (or ?bool12 (and ?bool12 ?bool14) (and (and (or ?bool11 ?bool15 ?bool12) ?bool11 ?bool12) (and (or ?bool13 ?bool12)))))
(check-sat)


-- iteration 59 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11011011101 #b1100011001010011010010010111111010100101101100101111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float7 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and ?bool12 ?bool11 (and (or ?bool11 (or ?bool13 ?bool13 ?bool12) ?bool12))))
(check-sat)


-- iteration 60 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float7 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float3 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTN ?float6) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool12 ?bool12 (or ?bool11 (and ?bool13)))))
(check-sat)


-- iteration 61 --
(declare-fun f0 (Float32 Float64 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float3 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float7) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and (or (and (or ?bool14)) (and ?bool15)) ?bool15 (or ?bool15 ?bool14)))
(check-sat)


-- iteration 62 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ((_ to_fp 15 113) RNE ?float4) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ((_ to_fp 15 113) RNE ?float5) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float9 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 8 24) RTZ ?float4))))
; FINAL ASSERT
(assert (or (and ?bool15) ?bool15 ?bool12))
(check-sat)


-- iteration 63 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float4 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float8)))
; FINAL ASSERT
(assert (or (or ?bool14 (and (or ?bool14 ?bool12) (or ?bool11 ?bool13 ?bool14)) ?bool12)))
(check-sat)


-- iteration 64 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10010000001 #b1100000000000010111110011000111111101101001101111110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RTZ ?float4) ?float6)))
; FINAL ASSERT
(assert (or ?bool14 (or (or (and ?bool11 ?bool12) ?bool12 (and ?bool11 ?bool11)) ?bool13) ?bool12))
(check-sat)


-- iteration 65 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ((_ to_fp 15 113) RTZ ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float2 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTN ?float5) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 11 53) RTP ?float2) ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (and (and ?bool13 ?bool15 ?bool15) ?bool12)))
(check-sat)


-- iteration 66 --
(declare-fun f0 (Float32 Float64 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float6 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ?float10)))
; FINAL ASSERT
(assert (and ?bool13 ?bool12))
(check-sat)


-- iteration 67 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6 ((_ to_fp 15 113) RTN ?float7))))
; FINAL ASSERT
(assert (or (or (and ?bool11 (and ?bool11) (or ?bool15 ?bool12 ?bool14))) (or (and ?bool15) ?bool12 (and ?bool12 (and ?bool12 ?bool13) ?bool11))))
(check-sat)


-- iteration 68 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01111110000 #b1000111100111000111011101111100100101111010000011000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTZ ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float10) ?float4 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 15 113) RTZ ?float4))))
; FINAL ASSERT
(assert (or ?bool13 ?bool13))
(check-sat)


-- iteration 69 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10110 #b0111100000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool15 (or (and ?bool14))))
(check-sat)


-- iteration 70 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ((_ to_fp 8 24) RTP ?float5) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 8 24) RTP ?float5) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float5 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 15 113) RTN ?float5))))
; FINAL ASSERT
(assert (or (or (and (and ?bool13 ?bool11 ?bool15) (and ?bool11 ?bool14 ?bool11))) ?bool11))
(check-sat)


-- iteration 71 --
(declare-fun f0 (Float32 Float32 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTP ?float5 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float6 ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool13 (and (and ?bool11) ?bool12)))
(check-sat)


-- iteration 72 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11001011100 #b1101001111110110100011100111000100101110001010100101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11001000110 #b0010000100011100111110111111011000111110001110010000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float5 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float2 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ((_ to_fp 5 11) RTN ?float4) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ((_ to_fp 5 11) RTP ?float8) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTN ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool11 ?bool12) ?bool12))
(check-sat)


-- iteration 73 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ((_ to_fp 5 11) RTN ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (and (and (or (and ?bool14 ?bool12) ?bool14))))
(check-sat)


-- iteration 74 --
(declare-fun f0 (Float64 Float64 Float128) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 5 11) RTN ?float3) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float2 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RTZ ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float8)))
; FINAL ASSERT
(assert (and ?bool11 (or (and (or ?bool15) ?bool13 ?bool13)) (or ?bool14 (and (and ?bool15 ?bool15 ?bool11) ?bool14 (and ?bool13 ?bool13)) (or (and ?bool11)))))
(check-sat)


-- iteration 75 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float2 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ((_ to_fp 15 113) RTN ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float2) ?float8 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5 ?float7 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ?float8)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 76 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float6 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool11 ?bool14 ?bool12))
(check-sat)


-- iteration 77 --
(declare-fun f0 (Float16 Float128 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000001101100011 #b0011000011110101111111010001000110101100011101011111011011010011111101010100000000001101100101000010110010101011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float7 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float4) ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 78 --
(declare-fun f0 (Float64 Float16 Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float6 ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float7 ((_ to_fp 11 53) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTP ?float2) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or (and ?bool14) (or (and (and ?bool14) (and ?bool11)) (or ?bool11) ?bool12)))
(check-sat)


-- iteration 79 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ((_ to_fp 5 11) RTN ?float6) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14))
(check-sat)


-- iteration 80 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float5 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTP ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float2 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 8 24) RTP ?float5))))
; FINAL ASSERT
(assert (or (or (and ?bool13) (and ?bool14 (and ?bool15 ?bool12 ?bool14) ?bool12) ?bool14) (or ?bool13 (or (or ?bool13 ?bool13 ?bool15))) (and (or ?bool15 (or ?bool11 ?bool13 ?bool15)))))
(check-sat)


-- iteration 81 --
(declare-fun f0 (Float64 Float16 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTN ?float7) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float8 ((_ to_fp 5 11) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float3))))
; FINAL ASSERT
(assert (and (or ?bool12) (or (or (or ?bool11) ?bool13) ?bool11)))
(check-sat)


-- iteration 82 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float4 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 8 24) RTN ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float2 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ((_ to_fp 5 11) RNE ?float9))))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool12) (and (or (and ?bool13) (or ?bool11 ?bool11 ?bool14) ?bool14)) ?bool15))
(check-sat)


-- iteration 83 --
(declare-fun f0 (Float32 Float128 Float128) Float64)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10001001110 #b0010110100000111010010000111111101111000111011101111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ?float3 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float3 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RTN ?float9) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 11 53) RNE ?float8) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 15 113) RTN ?float8) ?float2)))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool11 ?bool14)))
(check-sat)


-- iteration 84 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float4 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 5 11) RTN ?float8) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and (or (and ?bool15 ?bool15 ?bool12) ?bool11) (and (or ?bool11 ?bool15)) (or (and ?bool15 ?bool13 (and ?bool12 ?bool12)) ?bool12 (and (and ?bool11 ?bool14)))))
(check-sat)


-- iteration 85 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ?float2 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTZ ?float6) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ?float5 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RNE ?float10) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12)))
(check-sat)


-- iteration 86 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01100 #b0010111000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float8 ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float6))))
; FINAL ASSERT
(assert (or (or ?bool15)))
(check-sat)


-- iteration 87 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float2 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 15 113) RNE ?float3) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RTP ?float9) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and ?bool11 ?bool15))
(check-sat)


-- iteration 88 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ?float2 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float6 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float2 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool12 ?bool15) ?bool15 ?bool12))
(check-sat)


-- iteration 89 --
(declare-fun f0 (Float16 Float16 Float64) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11010001101 #b1000110011111011101001000010011100001000011001011101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (and (or (or ?bool13 ?bool14 ?bool15) (or ?bool14 ?bool15 ?bool15)) ?bool11) (or (and (and ?bool11 ?bool14 ?bool15) (and ?bool15 ?bool13)) ?bool13 (and ?bool13 (and ?bool14))) (or (and ?bool12 (and ?bool15 ?bool13 ?bool14) ?bool14))))
(check-sat)


-- iteration 90 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 5 11) RNE ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float2 ((_ to_fp 15 113) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ?float2)))
; FINAL ASSERT
(assert (and ?bool14 ?bool15))
(check-sat)


-- iteration 91 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float64 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 8 24) RTN ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ?float10 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float6) ?float9 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or (and (or (and ?bool12 ?bool15) (and ?bool11 ?bool11 ?bool11)))))
(check-sat)


-- iteration 92 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01111111111 #b0111111011111111010010001001001101000010011100011111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ((_ to_fp 15 113) RTP ?float7) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float2 ((_ to_fp 5 11) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float3) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool15) (or ?bool11)))
(check-sat)


-- iteration 93 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01110 #b1101110010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01000 #b1010101100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float8) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RTN ?float6) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (or ?bool11 ?bool14))
(check-sat)


-- iteration 94 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float6 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RTZ ?float9) ?float4)))
; FINAL ASSERT
(assert (or (or (or (and ?bool12)) ?bool15 ?bool15) (and ?bool14 ?bool11) ?bool14))
(check-sat)


-- iteration 95 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011000111111011 #b1011001000101001010011110000001000100100011111001111001101110110111010111000101101011110101110111000001100010100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 15 113) RTN ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float3 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 15 113) RTN ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or ?bool14 (or (or (or ?bool12 ?bool11 ?bool15) ?bool13) ?bool12)))
(check-sat)


-- iteration 96 --
(declare-fun f0 (Float32 Float64 Float128) Float64)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float3 ((_ to_fp 5 11) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RNE ?float3) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ((_ to_fp 5 11) RTN ?float8) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 11 53) RNE ?float6))))
; FINAL ASSERT
(assert (and (or (and ?bool13 (or ?bool15 ?bool12)) (and (and ?bool14 ?bool13) (and ?bool14 ?bool15 ?bool15) ?bool14) (and (and ?bool13 ?bool13) (and ?bool15 ?bool14))) ?bool14))
(check-sat)


-- iteration 97 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float2 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ((_ to_fp 5 11) RTZ ?float6))))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 98 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float5 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 99 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01011011100 #b1101011101010001001011110110101101111110010110000011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float2 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ?float9)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 100 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b001000111110100 #b0011000100010111101010101110110100100110101101011010101001000110111111011111011001100101111010010010101001001000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float2 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RNE ?float3) ?float9)))
; FINAL ASSERT
(assert (or ?bool14 (and ?bool15 ?bool11 (and ?bool11 ?bool11 ?bool12)) (or (or (and ?bool13 ?bool15 ?bool13)) ?bool11)))
(check-sat)


-- iteration 101 --
(declare-fun f0 (Float32 Float128 Float16) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float8) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool11 (or ?bool12 (and ?bool12) ?bool12)) ?bool14))
(check-sat)


-- iteration 102 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b001011010100101 #b0110001101101101011011111101000101000110011000001011110001110101100010100111110111011101110011111100100011111000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 11 53) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float5)))
; FINAL ASSERT
(assert (or (or (and (or ?bool13 ?bool11 ?bool15)) (or (or ?bool14 ?bool12)) ?bool13)))
(check-sat)


-- iteration 103 --
(declare-fun f0 (Float16 Float32 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 11 53) RNE ?float3) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RTZ ?float4) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float3))))
; FINAL ASSERT
(assert (and (or ?bool13 (or (or ?bool15 ?bool12 ?bool11) ?bool12 (or ?bool11)) (and (or ?bool12 ?bool11 ?bool12) ?bool11 ?bool15))))
(check-sat)


-- iteration 104 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ?float3 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float2 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTN ?float9) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (and (and (or ?bool12) ?bool14 ?bool15))))
(check-sat)


-- iteration 105 --
(declare-fun f0 (Float16 Float128 Float64) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float9) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ((_ to_fp 15 113) RTP ?float2))))
; FINAL ASSERT
(assert (or ?bool14 (or (or (and ?bool12 ?bool11 ?bool13) (and ?bool14 ?bool13) (or ?bool14)) (or ?bool11 ?bool11 (or ?bool14)) ?bool13)))
(check-sat)


-- iteration 106 --
(declare-fun f0 (Float64 Float16 Float128) Float32)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10111000110 #b0110111111110000101000100101100000011011011010111111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float6 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTN ?float7) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ?float4 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 15 113) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float4) ?float4 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool11 (or (and ?bool15 ?bool12 ?bool13) ?bool14 (and ?bool13)))))
(check-sat)


-- iteration 107 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 11 53) RTZ ?float6) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTZ ?float6) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 15 113) RNE ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTP ?float2) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float7))))
; FINAL ASSERT
(assert (or ?bool13 (and (and (and ?bool12 ?bool14 ?bool11) ?bool14)) ?bool15))
(check-sat)


-- iteration 108 --
(declare-fun f0 (Float32 Float16 Float128) Float32)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01100 #b1101101010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 15 113) RTZ ?float2) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float4 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 11 53) RNE ?float3) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float5) ?float4 ((_ to_fp 15 113) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 8 24) RTP ?float7) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float2)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool13 (or ?bool11 (and ?bool12 ?bool13) ?bool11))))
(check-sat)


-- iteration 109 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 5 11) RTP ?float2) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RNE ?float4) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or ?bool15 ?bool13 ?bool14))
(check-sat)


-- iteration 110 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 15 113) RTN ?float8) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ?float4 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RNE ?float9))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 111 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10001 #b0110010001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float5 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ?float6 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ?float3 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float3)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 112 --
(declare-fun f0 (Float32 Float16 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTP ((_ to_fp 8 24) RTZ ?float3) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ((_ to_fp 5 11) RNE ?float7) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or ?bool11 ?bool15 ?bool14))
(check-sat)


-- iteration 113 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01100110110 #b0000100111101110001101110101001001101101110110110001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float3 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float6 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 8 24) RNE ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14))
(check-sat)


-- iteration 114 --
(declare-fun f0 (Float16 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01000 #b0101000011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float6 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ?float3 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float9)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 115 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01100 #b0011110010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 15 113) RTZ ?float5) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float5) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RNE ?float5) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RNE ?float3) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or (and ?bool13 (and (or ?bool13) (or ?bool13 ?bool14)) (and ?bool15)) (or ?bool14 ?bool14 ?bool13)))
(check-sat)


-- iteration 116 --
(declare-fun f0 (Float64 Float32 Float32) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10011001100 #b1111111100000001111101110000010101100001101001111101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ?float2 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ((_ to_fp 8 24) RTN ?float3) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ((_ to_fp 8 24) RTN ?float4) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float7) ?float2 ((_ to_fp 8 24) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (or (or ?bool13) (and (or ?bool14 ?bool12)))))
(check-sat)


-- iteration 117 --
(declare-fun f0 (Float32 Float16 Float32) Float64)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ?float2 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float4 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ?float8 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ?float7)))
; FINAL ASSERT
(assert (and (and (or (and ?bool12 ?bool14) (or ?bool15 ?bool14 ?bool14)) ?bool12 ?bool11) (or ?bool11 ?bool15) (and ?bool13 (and (or ?bool12 ?bool13 ?bool13)) ?bool14)))
(check-sat)


-- iteration 118 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101111111000000 #b1111000110111001010011000011011100101000010110111001011010110110000110110111010101001000110100010111000101101010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTZ ?float4) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ((_ to_fp 5 11) RTP ?float2) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float4))))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool11 ?bool11 ?bool13)))
(check-sat)


-- iteration 119 --
(declare-fun f0 (Float32 Float64 Float128) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00110100 #b01010110110101011101100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 11 53) RTZ ?float2) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 11 53) RTZ ?float5) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float3) ?float3 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 8 24) RTZ ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RTP ?float3) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTP ?float6) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool14)))
(check-sat)


-- iteration 120 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10010 #b1111001000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float6 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float4) ?float10)))
; FINAL ASSERT
(assert (and ?bool11 (or (and (and ?bool15) (and ?bool15 ?bool14 ?bool15)) (and ?bool14 (and ?bool13 ?bool11)) ?bool15)))
(check-sat)


-- iteration 121 --
(declare-fun f0 (Float128 Float64 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01001 #b0010011000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float5 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float3 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 15 113) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ?float2)))
; FINAL ASSERT
(assert (and (or ?bool12 (and ?bool11 ?bool15 (and ?bool13 ?bool12)) (or (and ?bool11) ?bool13)) (and (and ?bool13 (and ?bool14 ?bool11 ?bool14)) ?bool12)))
(check-sat)


-- iteration 122 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10101111110 #b0000111100000010010011011101010001100011110100101001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 11 53) RTP ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float4 ((_ to_fp 11 53) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTZ ?float10) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and (or (or ?bool14)) (or (or ?bool13) (and ?bool13 (or ?bool14 ?bool14)) (or (and ?bool12))) (or (or (and ?bool15)) ?bool14 (and (or ?bool13 ?bool15 ?bool11) ?bool13 (and ?bool11)))))
(check-sat)


-- iteration 123 --
(declare-fun f0 (Float16 Float16 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00001111 #b01000100000001000010110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float4 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float4 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (and ?bool12 ?bool14 (and ?bool13 ?bool15)))
(check-sat)


-- iteration 124 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01111000 #b11000101100100011000110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 5 11) RTP ?float2) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTP ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ((_ to_fp 8 24) RTN ?float8))))
; FINAL ASSERT
(assert (or ?bool14 (and (or (or ?bool12 ?bool15 ?bool15) ?bool11 (or ?bool14 ?bool13)) ?bool15 ?bool15)))
(check-sat)


-- iteration 125 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00110110 #b01100010000101101110100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 15 113) RTP ?float4) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RTP ?float5) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ((_ to_fp 11 53) RTP ?float10))))
; FINAL ASSERT
(assert (or (or (and (and ?bool15 ?bool11) (and ?bool13 ?bool13) ?bool11) ?bool12) ?bool12))
(check-sat)


-- iteration 126 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10111010101 #b0101011011111010011111001110110010101001010001110011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float5) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RNE ?float10) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTZ ?float2) ?float3)))
; FINAL ASSERT
(assert (and (and ?bool14) (and ?bool13) ?bool15))
(check-sat)


-- iteration 127 --
(declare-fun f0 (Float32 Float128 Float32) Float64)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTZ ?float6) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 11 53) RTZ ?float10) ?float10)))
; FINAL ASSERT
(assert (and (and (and ?bool15)) (or ?bool15)))
(check-sat)


-- iteration 128 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01100 #b0001001111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float2 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 5 11) RNE ?float4) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 5 11) RTN ?float9) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 5 11) RNE ?float4) ?float8)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 129 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float5 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float4 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float6 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float8) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RNE ?float7))))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool12) (and ?bool13 ?bool11) ?bool11))
(check-sat)


-- iteration 130 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float5) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ((_ to_fp 8 24) RTZ ?float6) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 11 53) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and (or (and (or ?bool15 ?bool15)) ?bool11 ?bool15) ?bool14))
(check-sat)


-- iteration 131 --
(declare-fun f0 (Float32 Float32 Float64) Float32)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float3) ?float2 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ?float8 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTZ ?float10) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or (or ?bool13) ?bool15 ?bool14))
(check-sat)


-- iteration 132 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float2 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTN ?float2 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTN ?float4) ?float5)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool13 ?bool13) ?bool15))
(check-sat)


-- iteration 133 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01000 #b0101111110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11101110100 #b1101010101011001011101001010111000110010101110000011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or (and ?bool14)))
(check-sat)


-- iteration 134 --
(declare-fun f0 (Float32 Float16 Float16) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float3) ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float7 ((_ to_fp 11 53) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float9) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or (or (or (or ?bool15)) (or ?bool11 (or ?bool14) ?bool11))))
(check-sat)


-- iteration 135 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTP ?float5) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ((_ to_fp 5 11) RTN ?float10))))
; FINAL ASSERT
(assert (and (or ?bool15) (and (and (or ?bool11 ?bool12) ?bool15 ?bool14)) (and ?bool12 (or ?bool12 ?bool14 ?bool14) ?bool14)))
(check-sat)


-- iteration 136 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTZ ?float5) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14 ?bool11))
(check-sat)


-- iteration 137 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000011010 #b0011001001110111100010010110111101010101110010001111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float6 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTZ ?float9) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 11 53) RTN ?float8) ?float8)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool12 (or (or ?bool12)))))
(check-sat)


-- iteration 138 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTN ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float3)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13))
(check-sat)


-- iteration 139 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110000101010111 #b1111101001011000000110010011001110011100001111010110000010000001101110000011100100000110100011011011101110101101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110101011000000 #b1011101000100101001110111010011100010110011101010111001100010110010110001011001001010011110001111110011001110100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float5 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RNE ?float10) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float7))))
; FINAL ASSERT
(assert (and (or (and (or ?bool14 ?bool13 ?bool12) ?bool11 (or ?bool15 ?bool11 ?bool13)) (and ?bool12)) (or ?bool11) ?bool15))
(check-sat)


-- iteration 140 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float8 ((_ to_fp 8 24) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or ?bool11 (or (and ?bool11) ?bool12) ?bool12))
(check-sat)


-- iteration 141 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float3 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ((_ to_fp 5 11) RTP ?float10))))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 142 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float7) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or ?bool14 (and ?bool11 (and (or ?bool14 ?bool11 ?bool11)) (and ?bool15)) ?bool11))
(check-sat)


-- iteration 143 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ?float2 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or (and ?bool12) ?bool15 (and (or (and ?bool13)) ?bool14)))
(check-sat)


-- iteration 144 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b010000011100011 #b1101001010101010101001101000011001000110010101111000101001010101000000011110011010100010000011001110100111011110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float3 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float4 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (or (or ?bool15)))
(check-sat)


-- iteration 145 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ?float6 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 11 53) RTP ?float3) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTN ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float9) ((_ to_fp 15 113) RTN ?float10) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTN ?float10) ?float7)))
; FINAL ASSERT
(assert (or (and ?bool14) (and ?bool11 (and ?bool14 ?bool15)) (or ?bool11 ?bool13 ?bool13)))
(check-sat)


-- iteration 146 --
(declare-fun f0 (Float16 Float16 Float64) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (and ?bool12 (and (and ?bool14 ?bool11) (or ?bool11) ?bool11) ?bool12) (or ?bool11 (and (and ?bool13) (or ?bool15 ?bool12)) ?bool13)))
(check-sat)


-- iteration 147 --
(declare-fun f0 (Float128 Float16 Float128) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float3) ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float3 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ((_ to_fp 5 11) RNE ?float6) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ?float5 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (and (and (and (and ?bool15 ?bool15) ?bool12 ?bool15) (or (and ?bool12 ?bool15) (or ?bool14 ?bool15 ?bool11) ?bool11) (or ?bool15 (and ?bool13) (or ?bool11 ?bool15))) (or ?bool13)))
(check-sat)


-- iteration 148 --
(declare-fun f0 (Float64 Float64 Float32) Float32)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTP ?float3) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RNE ?float8) ?float7)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool15) (or ?bool12)))
(check-sat)


-- iteration 149 --
(declare-fun f0 (Float32 Float32 Float32) Float32)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b111000001110011 #b0111100001111010010111111100111011010011011110110001011001111101110011111100010010111101001010100111111101110100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float4 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float3 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float8 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RNE ?float9))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 150 --
(declare-fun f0 (Float64 Float32 Float16) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RNE ?float7) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (and (or ?bool14)))
(check-sat)


-- iteration 151 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float3 ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool11) (and ?bool14 (or (or ?bool11 ?bool15) (and ?bool15) (or ?bool14)) (or (and ?bool11 ?bool15) ?bool11 ?bool11)) (and ?bool13 (and (and ?bool14) (and ?bool12) (and ?bool12)))))
(check-sat)


-- iteration 152 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float5))))
; FINAL ASSERT
(assert (or (and (and ?bool14 ?bool15 ?bool15) (or ?bool12) ?bool15) ?bool11 (or ?bool12 ?bool13)))
(check-sat)


-- iteration 153 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11101 #b0010111110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float4 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float3 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ?float7 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float9 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 154 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00011100 #b01101000001100010000110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ((_ to_fp 8 24) RTN ?float7) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or (or ?bool13) (or (and ?bool15 (and ?bool15 ?bool13)) ?bool12 (or (or ?bool15 ?bool11) (or ?bool14 ?bool14)))))
(check-sat)


-- iteration 155 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RNE ?float5 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ((_ to_fp 11 53) RNE ?float5) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ((_ to_fp 11 53) RTN ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (and (and (and ?bool15 ?bool15) ?bool15 ?bool13) (or ?bool13)) ?bool14))
(check-sat)


-- iteration 156 --
(declare-fun f0 (Float128 Float16 Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10101010 #b00000111111111111001000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RNE ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float4 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float3 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float7) ?float6 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (and (and (or ?bool13 ?bool14)) (or (and ?bool13) ?bool13 (and ?bool14 ?bool11 ?bool14)) (and ?bool15)) (or ?bool11) ?bool13))
(check-sat)


-- iteration 157 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float8) ?float3)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool11) (or (or (or ?bool12 ?bool11 ?bool13) ?bool15 ?bool11) (and ?bool13) ?bool13)))
(check-sat)


-- iteration 158 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 5 11) RTP ?float3) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (and (or (or ?bool14 (and ?bool13 ?bool11 ?bool12) (or ?bool12 ?bool15 ?bool12)) (or (or ?bool12 ?bool12 ?bool13) (or ?bool13 ?bool14)) (and ?bool14 ?bool11)) (or (and (and ?bool13 ?bool12)) ?bool11 (and ?bool12 (or ?bool13))) ?bool12))
(check-sat)


-- iteration 159 --
(declare-fun f0 (Float128 Float64 Float32) Float16)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110010010011011 #b1010110110111101101100100111000011000100000010111001000001100010101001000011110000110010100101111101110010110101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00011101010 #b0110011010101100111110010101100110001010100100000010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ((_ to_fp 11 53) RTP ?float4) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 11 53) RTP ?float4) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RNE ?float4) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float4) ?float10 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (or (or (or ?bool11 ?bool11 ?bool13)) ?bool11)))
(check-sat)


-- iteration 160 --
(declare-fun f0 (Float32 Float16 Float32) Float32)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ((_ to_fp 8 24) RTP ?float5) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTZ ?float10) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float9)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 ?bool13))
(check-sat)


-- iteration 161 --
(declare-fun f0 (Float64 Float128 Float16) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float4 ((_ to_fp 8 24) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool14 ?bool13)))
(check-sat)


-- iteration 162 --
(declare-fun f0 (Float128 Float32 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTZ ?float3) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and (or (or ?bool12 ?bool14) (or (and ?bool12 ?bool12))) (and ?bool15 (or ?bool12 (or ?bool13 ?bool14 ?bool11)) (and (or ?bool11 ?bool13) (or ?bool11) (or ?bool13 ?bool11 ?bool12)))))
(check-sat)


-- iteration 163 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00110110 #b11111001100110100101111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ?float2 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float4 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ?float3)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool13) (and ?bool11 ?bool15)))
(check-sat)


-- iteration 164 --
(declare-fun f0 (Float32 Float128 Float16) Float32)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00101000010 #b0111111110101001010111100111110000101100010011000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ((_ to_fp 15 113) RTN ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float2) ?float4 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 165 --
(declare-fun f0 (Float16 Float32 Float32) Float128)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTN ?float4) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RTP ?float7) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool11 (and ?bool11 ?bool11 ?bool14)))
(check-sat)


-- iteration 166 --
(declare-fun f0 (Float64 Float64 Float16) Float128)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01100010001 #b0010011110000000110011000101100101010010001100001000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float2 ?float4 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float7 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 15 113) RTN ?float6) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8 ?float8 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool11 (or ?bool14))))
(check-sat)


-- iteration 167 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ?float2 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 5 11) RTP ?float7) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8)))
; FINAL ASSERT
(assert (or (or ?bool13) ?bool14 (and ?bool11)))
(check-sat)


-- iteration 168 --
(declare-fun f0 (Float64 Float16 Float32) Float16)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000011010111011 #b0100000001110100011111001011010110011111100100001100110000001111111111110010000011011101111011110000011110101001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float5 ?float6 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTZ ?float8) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTZ ?float10) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and ?bool13 (or (or (and ?bool15))) ?bool11))
(check-sat)


-- iteration 169 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float6) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float8 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ((_ to_fp 11 53) RTN ?float9) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ?float5)))
; FINAL ASSERT
(assert (or (and (and ?bool13 ?bool15))))
(check-sat)


-- iteration 170 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b111010001100101 #b1011000000110000011011100011001101000010110010110000110101101010000110010000110000100010100100010110110010111000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 8 24) RTN ?float4) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float6 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float5) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or ?bool11 ?bool12))
(check-sat)


-- iteration 171 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ?float6 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ((_ to_fp 5 11) RTN ?float4) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTP ((_ to_fp 8 24) RTN ?float2) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float6 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RTP ?float10) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float10)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 ?bool12))
(check-sat)


-- iteration 172 --
(declare-fun f0 (Float64 Float32 Float32) Float32)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001001010000010 #b0001011010100011101011100000101111101000001001111000001011100111110001011101011001110110100010110000101110000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 8 24) RNE ?float5) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 8 24) RTZ ?float4) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15 ?bool15))
(check-sat)


-- iteration 173 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10110 #b0110111111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01110100010 #b0101011001001001110011000101011110101100101101000110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 5 11) RNE ?float5) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float7 ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ((_ to_fp 11 53) RTN ?float4))))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 174 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float2 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTZ ?float3) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool12) (and ?bool13 ?bool11)))
(check-sat)


-- iteration 175 --
(declare-fun f0 (Float16 Float32 Float32) Float16)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10001011 #b11000100110111011011100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float3 ?float2 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RNE ?float5) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float7 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RNE ?float5) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 176 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float3 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ?float3 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTN ?float4) ?float8)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 (or ?bool12 ?bool14 ?bool11)))
(check-sat)


-- iteration 177 --
(declare-fun f0 (Float16 Float16 Float64) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RNE ?float3) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float8 ((_ to_fp 8 24) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 178 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01111010111 #b0101111110001101101100111001101010000110010010011000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00010010 #b00101001010011010101011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float3 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float9 ((_ to_fp 5 11) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RNE ?float7) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and (or (or ?bool13) (or ?bool14 (or ?bool14 ?bool14) ?bool11) ?bool11) ?bool11 (and ?bool11 ?bool12)))
(check-sat)


-- iteration 179 --
(declare-fun f0 (Float32 Float128 Float64) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ((_ to_fp 15 113) RTN ?float4) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float3 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 5 11) RTZ ?float3) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12 (or (and ?bool15)))))
(check-sat)


-- iteration 180 --
(declare-fun f0 (Float128 Float128 Float64) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float5) ?float3 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float3 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float4 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 181 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTZ ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RNE ?float2) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float3))))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 182 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11111100 #b00101100101101110010010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ?float6 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float10) ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTZ ?float9) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and ?bool15 (and (and (or ?bool11 ?bool14) (or ?bool15)) ?bool13) (or (and (and ?bool15 ?bool12 ?bool11) (or ?bool11 ?bool12) ?bool13) (and (and ?bool13 ?bool15)) ?bool13)))
(check-sat)


-- iteration 183 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 8 24) RTN ?float7) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 11 53) RTP ?float10) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 11 53) RTN ?float5) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float9)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15))
(check-sat)


-- iteration 184 --
(declare-fun f0 (Float128 Float128 Float32) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00100 #b1011110100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ((_ to_fp 8 24) RTZ ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RTN ?float9) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ((_ to_fp 8 24) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool14 (and ?bool13) ?bool11))
(check-sat)


-- iteration 185 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01100010011 #b0000100111111110111110110111110011100010101101010000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 5 11) RTP ?float9) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool11 ?bool15) (or (and (or ?bool15 ?bool13 ?bool13) ?bool14 (or ?bool14 ?bool14 ?bool12)) ?bool15 ?bool14) ?bool13))
(check-sat)


-- iteration 186 --
(declare-fun f0 (Float32 Float16 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float2 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float2 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (or ?bool11 (and (and (and ?bool11 ?bool13 ?bool12) ?bool11) (and ?bool15 ?bool14 ?bool11) (or ?bool11)) (or (and (and ?bool11) ?bool13 (or ?bool11 ?bool11 ?bool14)) (and (and ?bool14 ?bool12) ?bool15 ?bool13) ?bool12)))
(check-sat)


-- iteration 187 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10101001011 #b0010000111111000101101111111001100110111100001011110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101000110001111 #b0110111101101011101111111000011100110001110011010011001110001010010000110001110100001110101011010101000100100010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float9 ((_ to_fp 5 11) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float9)))
; FINAL ASSERT
(assert (and (and ?bool12) (and (and ?bool11)) ?bool15))
(check-sat)


-- iteration 188 --
(declare-fun f0 (Float128 Float64 Float64) Float32)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ?float6 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RNE ?float7) ?float9)))
; FINAL ASSERT
(assert (or (and (or (and ?bool14) (or ?bool13))) ?bool13 (or (and (or ?bool11) ?bool13) ?bool14 ?bool14)))
(check-sat)


-- iteration 189 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ?float5 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float6 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float8 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 190 --
(declare-fun f0 (Float16 Float16 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11101000010 #b0111100110000110010111000100001100010010010100011101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float2 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 5 11) RTP ?float3) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTP ?float8) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and ?bool13 ?bool13))
(check-sat)


-- iteration 191 --
(declare-fun f0 (Float64 Float16 Float128) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float4) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool14 (and (and ?bool11 ?bool12 ?bool15))) ?bool15))
(check-sat)


-- iteration 192 --
(declare-fun f0 (Float32 Float64 Float32) Float16)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float7) ?float10 ((_ to_fp 15 113) RTP ?float8))))
; FINAL ASSERT
(assert (and (or ?bool12)))
(check-sat)


-- iteration 193 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10100110 #b10010110101101001110110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or ?bool15 ?bool11 ?bool12))
(check-sat)


-- iteration 194 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or ?bool15 ?bool12 (and ?bool15)))
(check-sat)


-- iteration 195 --
(declare-fun f0 (Float16 Float32 Float128) Float128)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ?float2 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ?float5 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTZ ?float9) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTZ ?float9) ?float3)))
; FINAL ASSERT
(assert (and (and ?bool13) (and (or ?bool11))))
(check-sat)


-- iteration 196 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 5 11) RTP ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 5 11) RTN ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTN ?float7) ?float2)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool15) ?bool13))
(check-sat)


-- iteration 197 --
(declare-fun f0 (Float32 Float128 Float32) Float128)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTZ ?float7) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float7 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float8) ?float8 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTP ?float8) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTN ?float5) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 11 53) RTZ ?float3))))
; FINAL ASSERT
(assert (or (or ?bool11 (and ?bool15)) (and (and ?bool11) (and ?bool14))))
(check-sat)


-- iteration 198 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float2 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ?float6)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 (or ?bool13)))
(check-sat)


-- iteration 199 --
(declare-fun f0 (Float128 Float32 Float32) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00011100010 #b0010101010110010011111000110110001011001011010000101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00111 #b1011111011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTN ?float3) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool13 (or (and ?bool15 ?bool15 ?bool15)))))
(check-sat)


-- iteration 200 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float6 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTN ?float3) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTP ?float4) ?float2)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 201 --
(declare-fun f0 (Float16 Float32 Float32) Float16)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RTZ ?float2) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float4 ((_ to_fp 5 11) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 15 113) RTP ?float6) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float4)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 202 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01000001 #b11011101111010100000011)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ?float3 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ?float4 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTP ?float5) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RTZ ?float4))))
; FINAL ASSERT
(assert (or ?bool11 ?bool14 (or (or ?bool11 (or ?bool15) (or ?bool12)) (and (or ?bool14) (or ?bool11 ?bool11 ?bool12) ?bool13) (or ?bool15 ?bool13 ?bool14))))
(check-sat)


-- iteration 203 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10011100 #b01100101011101010110110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RNE ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 11 53) RTN ?float6) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float6 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ?float5 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (and (and ?bool11 (or (or ?bool13 ?bool12)))))
(check-sat)


-- iteration 204 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00111101 #b00110010110101101000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float6 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RTN ?float4) ?float6)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11 ?bool11))
(check-sat)


-- iteration 205 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float7 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float5 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ?float6 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and ?bool11 (or (and ?bool13 ?bool15) (and ?bool12 (or ?bool13 ?bool15 ?bool12)) ?bool13)))
(check-sat)


-- iteration 206 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RNE ?float9) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float2) ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and (or (or ?bool15 (or ?bool12 ?bool13))) ?bool11 (or ?bool13 ?bool15 (and (or ?bool12) ?bool11 (and ?bool15 ?bool14 ?bool15)))))
(check-sat)


-- iteration 207 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11010 #b1101101111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float2 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ?float2 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ?float3 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and (or (or ?bool14 ?bool13 ?bool13) ?bool14 ?bool14)))
(check-sat)


-- iteration 208 --
(declare-fun f0 (Float64 Float64 Float16) Float32)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011111000110101 #b1001001110010001110100000010000010110001110001001011010110001000101000100110110000100011001110010101111111101111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110111111001110 #b1100010101011110010101011000011010110111001000001000001011000101100010010011011101101001100000110100101110111101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 5 11) RTN ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RNE ?float3) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 209 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float5 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float6 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTP ?float6) ?float2)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13 ?bool11))
(check-sat)


-- iteration 210 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float3 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float5 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or ?bool15 (and (or ?bool14 ?bool14 (or ?bool11 ?bool12 ?bool14)) (or (and ?bool15))) (and ?bool14 (or (and ?bool11 ?bool14) (or ?bool15 ?bool13)) ?bool11)))
(check-sat)


-- iteration 211 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 11 53) RTP ?float5) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RNE ?float7) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or (and ?bool11) (or (or ?bool12) ?bool13 ?bool13) ?bool13))
(check-sat)


-- iteration 212 --
(declare-fun f0 (Float128 Float64 Float128) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000101010100101 #b0111100101101110001010011000100010100000110101000011111001000100000100110011001001001101001110011110100010110110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b111100100100110 #b0000010011000100000101001100010111110001000000110100010000011000010011001110000101010011101101111110010011110110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RTZ ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float4 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool11)))
(check-sat)


-- iteration 213 --
(declare-fun f0 (Float64 Float128 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00111 #b0100010100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float3 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float2 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ((_ to_fp 11 53) RNE ?float3))))
; FINAL ASSERT
(assert (or (or ?bool15) (or ?bool13 ?bool15 ?bool15)))
(check-sat)


-- iteration 214 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 11 53) RNE ?float5) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTP ?float4) ?float10)))
; FINAL ASSERT
(assert (or ?bool11 (and (or ?bool12))))
(check-sat)


-- iteration 215 --
(declare-fun f0 (Float32 Float128 Float32) Float32)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float2 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ?float5 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 216 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00010000 #b10110100000011000010101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ?float6 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10)))
; FINAL ASSERT
(assert (and (or (or ?bool13 ?bool13))))
(check-sat)


-- iteration 217 --
(declare-fun f0 (Float128 Float128 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float4 ((_ to_fp 11 53) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool15 (and ?bool15))))
(check-sat)


-- iteration 218 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10000 #b0010010111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 11 53) RNE ?float4) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float3 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 5 11) RNE ?float2) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float4)))
; FINAL ASSERT
(assert (or (and ?bool12 (or ?bool14))))
(check-sat)


-- iteration 219 --
(declare-fun f0 (Float128 Float32 Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ((_ to_fp 11 53) RTP ?float7) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ?float9)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 220 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float2 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ((_ to_fp 5 11) RTP ?float2))))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool15) (or ?bool11 (or ?bool11 (or ?bool14 ?bool11 ?bool11)) ?bool12) (and ?bool15 (and ?bool12 (and ?bool11 ?bool13 ?bool15) (or ?bool12 ?bool12)) ?bool13)))
(check-sat)


-- iteration 221 --
(declare-fun f0 (Float32 Float64 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ?float4 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ((_ to_fp 15 113) RTZ ?float7) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ?float4 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RNE ?float7) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15 (and ?bool12 ?bool13)))
(check-sat)


-- iteration 222 --
(declare-fun f0 (Float128 Float128 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float2 ?float2 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7 ?float2 ((_ to_fp 11 53) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 11 53) RTP ?float8) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float6))))
; FINAL ASSERT
(assert (and (and (and ?bool15 (and ?bool11 ?bool15)) ?bool12) (or (or ?bool11)) (or (or (and ?bool15) (or ?bool11 ?bool12 ?bool14) (or ?bool15 ?bool11 ?bool11)) (or (and ?bool11 ?bool14 ?bool11) ?bool11) ?bool11)))
(check-sat)


-- iteration 223 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000101100111 #b1110110010001011000001000000010011101000010111011010000010011011011110100000000110110001101000010001110100100010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTZ ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ((_ to_fp 8 24) RTN ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float7 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 15 113) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RTZ ?float9) ?float6)))
; FINAL ASSERT
(assert (or (and ?bool15) (and (and (or ?bool11 ?bool13 ?bool13) ?bool13) (and (and ?bool11) (and ?bool11)))))
(check-sat)


-- iteration 224 --
(declare-fun f0 (Float64 Float16 Float16) Float64)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTN ?float7) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTN ?float9) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float6) ?float4 ?float4)))
; FINAL ASSERT
(assert (and (and ?bool13)))
(check-sat)


-- iteration 225 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float6 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RTZ ?float7) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or ?bool15 (and ?bool12 ?bool15) (or (or (or ?bool12 ?bool14) (or ?bool11) ?bool15) (or (and ?bool14 ?bool12 ?bool13)))))
(check-sat)


-- iteration 226 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTZ ?float8) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool11 (or (and (or ?bool14 ?bool11 ?bool11)) ?bool11 (or ?bool13 ?bool15))))
(check-sat)


-- iteration 227 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01111110110 #b1111110000100000101010101010100010000100101001001000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ((_ to_fp 11 53) RTZ ?float7) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool14 ?bool15))
(check-sat)


-- iteration 228 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RTN ?float5) ?float10)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 (and (and (or ?bool12 ?bool14) (and ?bool15 ?bool15 ?bool14) ?bool14))))
(check-sat)


-- iteration 229 --
(declare-fun f0 (Float128 Float16 Float32) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11111101011 #b0101011011011101100001101011111001000110001000110101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b111111111111010 #b1101111101111010100101011110001111011100011110010000101111100111110010001100101110110000111110001110000110101101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float7 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 5 11) RTN ?float5) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 230 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ?float4 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (or ?bool14 (and (and (and ?bool13 ?bool11 ?bool15) (or ?bool15)) ?bool13)))
(check-sat)


-- iteration 231 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00001100010 #b1111111011111101100011110011111100001110011000100010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float5 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (and (and ?bool12 (and (and ?bool15))) ?bool11 (and (or ?bool12) ?bool12)))
(check-sat)


-- iteration 232 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTZ ?float8) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 8 24) RTZ ?float10) ?float7)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 233 --
(declare-fun f0 (Float128 Float128 Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00011011011 #b1001001010100100011110101111100111101010111100100101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 11 53) RTN ?float2) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTZ ?float7 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4)))
; FINAL ASSERT
(assert (and (or (or ?bool12 ?bool12)) ?bool15 (or (and (and ?bool14)) (or (and ?bool14 ?bool15 ?bool15)) ?bool12)))
(check-sat)


-- iteration 234 --
(declare-fun f0 (Float128 Float64 Float64) Float16)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTN ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool11)))
(check-sat)


-- iteration 235 --
(declare-fun f0 (Float128 Float128 Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float3 ?float2 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float8) ?float2 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or ?bool11 ?bool11))
(check-sat)


-- iteration 236 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01110110011 #b0111100000110110111000110010010100011000101111100011)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ?float3 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 237 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100111110100111 #b1111010000011000011101000000000101011100101101011010000000000000110001011100011000010100100010101110011101010110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or (or (or (and ?bool12 ?bool12) (or ?bool15 ?bool15)) (or ?bool15 (and ?bool11 ?bool12) (and ?bool15 ?bool11)))))
(check-sat)


-- iteration 238 --
(declare-fun f0 (Float128 Float32 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 8 24) RTN ?float3) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float3 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 239 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float2 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 11 53) RTP ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ((_ to_fp 15 113) RTZ ?float7) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTP ?float8) ?float3)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 240 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ?float4 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float6 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTP ?float10) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10)))
; FINAL ASSERT
(assert (and (or (and (and ?bool11) ?bool14 ?bool15))))
(check-sat)


-- iteration 241 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float7 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RNE ?float8) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float3))))
; FINAL ASSERT
(assert (and (and (and (or ?bool15) (or ?bool14 ?bool12 ?bool14)) (and ?bool15 ?bool13))))
(check-sat)


-- iteration 242 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00111 #b0001111001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float6 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and (and ?bool14 (and ?bool14)) ?bool12 (and (or (or ?bool13 ?bool12 ?bool12) ?bool13 (and ?bool11)) ?bool14 (or ?bool13 (and ?bool13 ?bool11) ?bool15))))
(check-sat)


-- iteration 243 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 11 53) RTN ?float3) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float5 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and (or (or (and ?bool14 ?bool15))) (and ?bool13 ?bool15) (or ?bool13 (or ?bool11) (and (or ?bool13 ?bool15)))))
(check-sat)


-- iteration 244 --
(declare-fun f0 (Float64 Float64 Float32) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11110101 #b11100001111010111110001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float2 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float7 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15))
(check-sat)


-- iteration 245 --
(declare-fun f0 (Float32 Float128 Float32) Float32)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01011 #b1011111010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float6 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 5 11) RTN ?float6) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float7 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 8 24) RTZ ?float2))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 246 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01110111 #b00100010110000100000010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float7 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float10)))
; FINAL ASSERT
(assert (or (and (and ?bool11)) (and ?bool12) (and ?bool11 (and ?bool15 ?bool15 (and ?bool14 ?bool12)) ?bool14)))
(check-sat)


-- iteration 247 --
(declare-fun f0 (Float64 Float128 Float128) Float128)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float5 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 8 24) RTP ?float5) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float9) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float9) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (or (and (or ?bool13) ?bool12) (or (and ?bool14 ?bool12 ?bool12))) (and (and (or ?bool11 ?bool15 ?bool15) (and ?bool14)) ?bool11 ?bool14)))
(check-sat)


-- iteration 248 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000100100010101 #b1111001011101110001011010000100011010010101000111101110110010001010010110110100111000110111010011000100100000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTP ?float10) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float4)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 249 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float6 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 15 113) RNE ?float4) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ?float2 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RNE ?float5) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool11) ?bool15))
(check-sat)


-- iteration 250 --
(declare-fun f0 (Float128 Float16 Float64) Float32)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float5) ?float3 ((_ to_fp 11 53) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RNE ?float6) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and ?bool11 (or ?bool14)))
(check-sat)


-- iteration 251 --
(declare-fun f0 (Float16 Float16 Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or (or (or ?bool14 (and ?bool14))) ?bool14 ?bool11))
(check-sat)


-- iteration 252 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11011 #b0001000010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100011110111111 #b1000110011011110110000111101100001100001000000101000100010011111101110101110110111001011010001001101111101011010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RTN ?float10) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 5 11) RTN ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and (and ?bool15 ?bool12 (or (and ?bool13 ?bool12))) (and (or ?bool12 ?bool12) ?bool12)))
(check-sat)


-- iteration 253 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01101111010 #b1010111101010010000110011010000100111111011011101110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float8 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 8 24) RTP ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 15 113) RNE ?float9) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool13 (and ?bool11 (and ?bool14 ?bool11) (and ?bool12 ?bool11)))))
(check-sat)


-- iteration 254 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 5 11) RTP ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTZ ?float4) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 5 11) RTP ?float7) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RTN ?float5) ?float4)))
; FINAL ASSERT
(assert (or ?bool11 (and (or (or ?bool15) ?bool13) (and (and ?bool15 ?bool14) ?bool15))))
(check-sat)


-- iteration 255 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ?float7 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float2 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float2 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool13) (and (or (or ?bool13 ?bool14 ?bool12)) ?bool13 ?bool14)))
(check-sat)


-- iteration 256 --
(declare-fun f0 (Float32 Float32 Float32) Float128)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10000 #b1010101000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float3 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool14) (and ?bool11)))
(check-sat)


-- iteration 257 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00111 #b0011101110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTP ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 15 113) RNE ?float2) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or (and ?bool13) (or ?bool14 (and (and ?bool15 ?bool14 ?bool15) (and ?bool14 ?bool14 ?bool14) (and ?bool12 ?bool15 ?bool14)) ?bool14) ?bool11))
(check-sat)


-- iteration 258 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01010 #b0100100011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float4 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTP ?float3) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RNE ?float5) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float5)))
; FINAL ASSERT
(assert (and (or (and ?bool15 (or ?bool13)) ?bool15 ?bool15) ?bool12 ?bool15))
(check-sat)


-- iteration 259 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float5) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float2 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ((_ to_fp 11 53) RTN ?float9))))
; FINAL ASSERT
(assert (and ?bool15 ?bool15 (and (and (or ?bool12 ?bool14 ?bool14) ?bool11 ?bool12) ?bool12)))
(check-sat)


-- iteration 260 --
(declare-fun f0 (Float64 Float128 Float64) Float64)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RNE ?float6) ?float3)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool12 ?bool12) ?bool11))
(check-sat)


-- iteration 261 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 15 113) RTP ?float5) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float5))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 262 --
(declare-fun f0 (Float32 Float32 Float16) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 15 113) RTN ?float5) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 5 11) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 8 24) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 263 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float4 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and ?bool14 (and ?bool15)))
(check-sat)


-- iteration 264 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float2 ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTN ?float6) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float2 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float2) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float5 ?float10)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 265 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float6 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool14) ?bool11 ?bool12))
(check-sat)


-- iteration 266 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float4 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ?float4 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float2) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (and (and (and (or ?bool11 ?bool14 ?bool12) (or ?bool13 ?bool13 ?bool12)) ?bool13 (and (or ?bool12)))))
(check-sat)


-- iteration 267 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and (and (or ?bool15 (or ?bool12 ?bool14 ?bool15) (and ?bool15))) ?bool14))
(check-sat)


-- iteration 268 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float5 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTP ?float4) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float5 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (and ?bool14 (or ?bool12 ?bool15) (or (and ?bool12 ?bool14) (or ?bool11 ?bool15) ?bool15))))
(check-sat)


-- iteration 269 --
(declare-fun f0 (Float32 Float16 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110111110101010 #b1010011010110110010000110000001101110110000011101000000111111001110101001100110001010100010011101000110111100000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float4) ?float2 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float2 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12 ?bool15))
(check-sat)


-- iteration 270 --
(declare-fun f0 (Float32 Float32 Float16) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01000111 #b01111011001000111101011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 5 11) RTP ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float5 ?float4 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float3) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and (or (or ?bool12) (and (and ?bool11)) (or (and ?bool11 ?bool13) ?bool12 ?bool11))))
(check-sat)


-- iteration 271 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00010 #b0110100010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ((_ to_fp 11 53) RTZ ?float3) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool13 ?bool12) ?bool12))
(check-sat)


-- iteration 272 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 273 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ((_ to_fp 5 11) RTP ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float6 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float5) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float3) ?float8 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and ?bool11 ?bool15 ?bool14))
(check-sat)


-- iteration 274 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11000001110 #b0100011011011011100011000000111000000100101100010111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11111101 #b01001000000001100000111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 8 24) RTP ?float4) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float7 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RTP ?float2) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTP ?float10) ?float4)))
; FINAL ASSERT
(assert (or ?bool13 ?bool12))
(check-sat)


-- iteration 275 --
(declare-fun f0 (Float64 Float128 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ((_ to_fp 5 11) RNE ?float7) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float6 ((_ to_fp 15 113) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float4))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 276 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float3) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (and (and (or ?bool12 (or ?bool14 ?bool14 ?bool12)) ?bool11 (or ?bool14)) (or (or ?bool12 ?bool12 (or ?bool11 ?bool15)) ?bool11)))
(check-sat)


-- iteration 277 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10010 #b0101000010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ?float5 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ((_ to_fp 5 11) RNE ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float8)))
; FINAL ASSERT
(assert (and ?bool11 ?bool15 ?bool12))
(check-sat)


-- iteration 278 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float7 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float5) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float4) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (or (or ?bool11 (or ?bool14 ?bool13) ?bool11) ?bool12))
(check-sat)


-- iteration 279 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011110000101110 #b0110010000001101100110101000010111110011100100100110100101110110011111100010000010100110101111111010111010001111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float5 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ((_ to_fp 5 11) RNE ?float3) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float5 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 5 11) RTZ ?float4) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 280 --
(declare-fun f0 (Float32 Float16 Float32) Float64)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float6 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15 ?bool11))
(check-sat)


-- iteration 281 --
(declare-fun f0 (Float128 Float128 Float128) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4) ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RNE ?float2) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float10) ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (and (and (or ?bool14) ?bool13 ?bool14) ?bool12)))
(check-sat)


-- iteration 282 --
(declare-fun f0 (Float16 Float128 Float16) Float32)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTN ?float2) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTZ ?float2) ?float6)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 283 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10010010 #b01011101011110001010000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float5 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ?float4 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float5)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool11 (and ?bool13 (and ?bool14 ?bool13 ?bool13) ?bool15)) ?bool14 ?bool15))
(check-sat)


-- iteration 284 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float3 ((_ to_fp 11 53) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTN ?float6) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool12 ?bool12 (or (and (or ?bool13) (or ?bool12 ?bool14) (and ?bool15)) (or ?bool14) (and ?bool11 (and ?bool14 ?bool15)))))
(check-sat)


-- iteration 285 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ?float2 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 5 11) RNE ?float6) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTZ ?float3) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and (and ?bool15 ?bool11) (and (and ?bool13 ?bool12) (and (or ?bool11 ?bool12 ?bool14) ?bool15 ?bool13) (and (or ?bool11) ?bool13 ?bool12)) ?bool13))
(check-sat)


-- iteration 286 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 5 11) RTP ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RTZ ?float6))))
; FINAL ASSERT
(assert (and (or ?bool14 (and (and ?bool13 ?bool14) (or ?bool14 ?bool14) (or ?bool14 ?bool15)) ?bool15) (and ?bool15 ?bool12 (and ?bool14))))
(check-sat)


-- iteration 287 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ((_ to_fp 8 24) RTP ?float10))))
; FINAL ASSERT
(assert (or (or (and (or ?bool14) ?bool15 (and ?bool15)) (and (and ?bool11) ?bool14))))
(check-sat)


-- iteration 288 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTN ?float3) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and (and ?bool15 ?bool11) ?bool15))
(check-sat)


-- iteration 289 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float3 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ?float5 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float7 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ?float3)))
; FINAL ASSERT
(assert (and (and (or ?bool12) (or (and ?bool11 ?bool13) (and ?bool13) ?bool11))))
(check-sat)


-- iteration 290 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ?float7 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (or (or ?bool13 (or ?bool14 ?bool15 ?bool11) ?bool13) ?bool13 (or ?bool11)))
(check-sat)


-- iteration 291 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float3)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool15 (and (or ?bool15 ?bool15)) (and (or ?bool13))) ?bool14))
(check-sat)


-- iteration 292 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float2 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float8) ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RNE ?float5) ?float10)))
; FINAL ASSERT
(assert (and (and ?bool14) (and (and ?bool11 ?bool14 ?bool14))))
(check-sat)


-- iteration 293 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10100101010 #b1001010010111000101010001111101001111111101110001000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTP ((_ to_fp 15 113) RTN ?float6) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float4 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTZ ?float7) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ((_ to_fp 11 53) RTP ?float2))))
; FINAL ASSERT
(assert (or (or ?bool14 (or ?bool15) ?bool14) (and ?bool11 ?bool13 (and (and ?bool13 ?bool15) (and ?bool13 ?bool12) (and ?bool11 ?bool13 ?bool11))) (and ?bool14)))
(check-sat)


-- iteration 294 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b1011000011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool12)))
(check-sat)


-- iteration 295 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010110001111100 #b0011000100011001001111011111110011100000011001110101010011111101001000101111011111101101101010000011011000011000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float7) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RNE ?float10) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float3)))
; FINAL ASSERT
(assert (or ?bool12 ?bool15 ?bool14))
(check-sat)


-- iteration 296 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ((_ to_fp 11 53) RNE ?float5) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool15 ?bool12 (and (or ?bool11 (and ?bool14)) ?bool13 (or (or ?bool14 ?bool14 ?bool12) ?bool15 (and ?bool11 ?bool12)))))
(check-sat)


-- iteration 297 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float3 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float4 ((_ to_fp 15 113) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or (and ?bool14) ?bool15 (or ?bool11 ?bool13 (and ?bool15 ?bool14 (and ?bool14 ?bool13 ?bool15)))))
(check-sat)


-- iteration 298 --
(declare-fun f0 (Float128 Float16 Float32) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ((_ to_fp 8 24) RTZ ?float5) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float4 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float4) ?float6 ((_ to_fp 8 24) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 15 113) RNE ?float6))))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool11 ?bool13) (or ?bool13 ?bool14) (and ?bool12)))
(check-sat)


-- iteration 299 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float8 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float7) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RTN ?float2) ?float9)))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool15)))
(check-sat)


-- iteration 300 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000101111101111 #b0101100000100000111101100010010011001001110100001001011100100010011011111101110110001001011010000001110100100011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ?float2 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ((_ to_fp 5 11) RNE ?float2) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 15 113) RTN ?float6))))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool11 ?bool13)))
(check-sat)


-- iteration 301 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float6 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7)))
; FINAL ASSERT
(assert (or ?bool11 (or (or (or ?bool13 ?bool12)) (and (or ?bool14 ?bool14 ?bool13) ?bool14 ?bool15))))
(check-sat)


-- iteration 302 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00111 #b0011100110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float6 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float6 ((_ to_fp 8 24) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTZ ?float8) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float4)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 303 --
(declare-fun f0 (Float64 Float128 Float16) Float32)
(declare-fun p0 (Float64 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00111 #b1000011110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ((_ to_fp 5 11) RTZ ?float3) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float6 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 11 53) RTN ?float6) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RTN ?float2) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 8 24) RTP ?float4) ?float10)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 304 --
(declare-fun f0 (Float32 Float32 Float16) Float32)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01011001 #b11100000010110100010111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float2 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float7 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool15 (and ?bool12))))
(check-sat)


-- iteration 305 --
(declare-fun f0 (Float64 Float32 Float32) Float64)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10110100000 #b1011000110101010010011000001111001001100011110101110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float4 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float6 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 ?bool13))
(check-sat)


-- iteration 306 --
(declare-fun f0 (Float32 Float64 Float16) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float7 ((_ to_fp 11 53) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or (and ?bool13 (and ?bool14 ?bool13) ?bool11) ?bool11))
(check-sat)


-- iteration 307 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 15 113) RTP ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float4)))
; FINAL ASSERT
(assert (and (and (or ?bool13 (and ?bool12 ?bool14)))))
(check-sat)


-- iteration 308 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTN ?float3) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTP ?float4) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (or (or ?bool11 (or (or ?bool15 ?bool13)) (and ?bool14)) (and ?bool11 ?bool11)))
(check-sat)


-- iteration 309 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float5 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RNE ?float10) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ?float10)))
; FINAL ASSERT
(assert (or (or ?bool11 (or ?bool13 (and ?bool15)) (or ?bool13 ?bool11)) (and (or (and ?bool15) (or ?bool14)) ?bool13 (or (or ?bool15 ?bool12) (or ?bool12)))))
(check-sat)


-- iteration 310 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float7 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 15 113) RNE ?float2) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 11 53) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ((_ to_fp 15 113) RNE ?float4))))
; FINAL ASSERT
(assert (and (or ?bool12) (and (or (or ?bool12 ?bool11) ?bool15) (and ?bool12 ?bool11 ?bool13) ?bool14) ?bool14))
(check-sat)


-- iteration 311 --
(declare-fun f0 (Float32 Float128 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01001 #b1110010010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float5 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float5 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ?float5)))
; FINAL ASSERT
(assert (or (and ?bool13 (or (and ?bool11) (and ?bool14 ?bool15 ?bool15) (and ?bool11 ?bool14)) ?bool13) ?bool14 (or ?bool14 (or (or ?bool13 ?bool15 ?bool13) ?bool12))))
(check-sat)


-- iteration 312 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11000 #b1110011101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 5 11) RTN ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float6 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RNE ?float6) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 5 11) RTN ?float3))))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool13) (or ?bool12 ?bool13)))
(check-sat)


-- iteration 313 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ?float6 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float4 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4 ((_ to_fp 11 53) RNE ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ((_ to_fp 5 11) RNE ?float6))))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool12 ?bool13)))
(check-sat)


-- iteration 314 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float128 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float2 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float7 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float5) ?float2 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float5) ?float8 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or (or (and ?bool13 ?bool12))))
(check-sat)


-- iteration 315 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 5 11) RTZ ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float5 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float9 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float2))))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool15 (and (and ?bool14 ?bool12) (and ?bool14)) (and (or ?bool12) (and ?bool13) (or ?bool14 ?bool15 ?bool14))) ?bool12))
(check-sat)


-- iteration 316 --
(declare-fun f0 (Float128 Float64 Float64) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00010 #b1010101110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ?float7 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 11 53) RTN ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool15 (or (or ?bool15) (or ?bool15 ?bool15))) ?bool13))
(check-sat)


-- iteration 317 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float3 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float4 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 8 24) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTP ?float7) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float10) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float7) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or ?bool15 ?bool13))
(check-sat)


-- iteration 318 --
(declare-fun f0 (Float32 Float128 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 8 24) RTP ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or (or (or (and ?bool12 ?bool14 ?bool14) ?bool13 ?bool11)) (and (and (or ?bool11)) ?bool15 ?bool15) ?bool14))
(check-sat)


-- iteration 319 --
(declare-fun f0 (Float16 Float128 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float2 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTZ ?float6) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float6))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 320 --
(declare-fun f0 (Float16 Float16 Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float5 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RNE ?float3) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float4 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14 ?bool11))
(check-sat)


-- iteration 321 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b101010101011111 #b0100011000010001011110011011110101001100000011000101000100100011001101001111000010011100001000000101001100011010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10011011 #b01000001110100011100111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ?float8 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTN ?float3) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float8)))
; FINAL ASSERT
(assert (or (and (and ?bool15 (and ?bool13 ?bool11) ?bool15) (or (and ?bool12 ?bool14 ?bool15) (or ?bool14 ?bool14) ?bool11) ?bool14) ?bool13 (or (or ?bool12) (and (and ?bool11 ?bool15)) (or (or ?bool12 ?bool14 ?bool15)))))
(check-sat)


-- iteration 322 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float5 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 323 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11010101001 #b1100110001101110110110000101110101101010001011001111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float5 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float2 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float4 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 15 113) RTN ?float3))))
; FINAL ASSERT
(assert (or (and ?bool13)))
(check-sat)


-- iteration 324 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11011110100 #b0010000111111110111000001111001101110101101101010110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ((_ to_fp 5 11) RTZ ?float6) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float7) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6 ((_ to_fp 5 11) RNE ?float4))))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool13)))
(check-sat)


-- iteration 325 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RNE ?float4) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float6 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 8 24) RNE ?float6) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 8 24) RTZ ?float7) ?float6)))
; FINAL ASSERT
(assert (or (or ?bool12) ?bool12 ?bool12))
(check-sat)


-- iteration 326 --
(declare-fun f0 (Float64 Float128 Float64) Float16)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RTN ?float2) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float2)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 327 --
(declare-fun f0 (Float16 Float16 Float16) Float64)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10000001 #b11110110100001111000011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RTN ?float6) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RTZ ?float10) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float7 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RTP ?float9) ?float6)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 328 --
(declare-fun f0 (Float128 Float128 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 329 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 11 53) RTZ ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTN ?float6) ?float8)))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool12 ?bool15 ?bool11)))
(check-sat)


-- iteration 330 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11100 #b0001111100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11111110 #b11110110011101111110111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float6 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ?float3 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float9)))
; FINAL ASSERT
(assert (and (and (or (and ?bool12 ?bool14 ?bool15)) (or (and ?bool15) (or ?bool12 ?bool12 ?bool14) ?bool14) (or (and ?bool11 ?bool14 ?bool14)))))
(check-sat)


-- iteration 331 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ((_ to_fp 8 24) RNE ?float7))))
; FINAL ASSERT
(assert (or (or (and ?bool11 (or ?bool14) (or ?bool15)) (and ?bool15 ?bool12 (or ?bool13 ?bool14)))))
(check-sat)


-- iteration 332 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11111 #b0000100010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float7 ((_ to_fp 15 113) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTN ?float5) ?float4)))
; FINAL ASSERT
(assert (or (and (or ?bool13) (or ?bool15) (or ?bool15))))
(check-sat)


-- iteration 333 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ?float3 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ((_ to_fp 5 11) RTZ ?float4) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ((_ to_fp 8 24) RTP ?float7) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTZ ?float8) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float6)))
; FINAL ASSERT
(assert (or (and (or ?bool13 ?bool14 (or ?bool13))) ?bool12 (or ?bool11 ?bool12 (and ?bool15 (and ?bool14)))))
(check-sat)


-- iteration 334 --
(declare-fun f0 (Float128 Float64 Float128) Float32)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11001 #b1100101111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10011 #b0000101000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float6 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float3) ?float8 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool12 ?bool11) (or ?bool12 (and ?bool15) ?bool12) (or (and ?bool14))))
(check-sat)


-- iteration 335 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ((_ to_fp 8 24) RTN ?float2) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ((_ to_fp 8 24) RTP ?float3) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTZ ?float5) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float8)))
; FINAL ASSERT
(assert (and (or ?bool15) ?bool12 (or ?bool15 (and ?bool14 (and ?bool14 ?bool12 ?bool14) ?bool12) ?bool12)))
(check-sat)


-- iteration 336 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00110001 #b10011010001110111001000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float4 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 337 --
(declare-fun f0 (Float128 Float16 Float64) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00010000000 #b0101000100111011110101101100100100011111011100100010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01110000 #b11001101000011100000100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTP ?float7) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float2 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15 (or (or ?bool15) (and (or ?bool11)))))
(check-sat)


-- iteration 338 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ?float4 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 15 113) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTZ ?float4) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ((_ to_fp 11 53) RTP ?float9))))
; FINAL ASSERT
(assert (or (and (and ?bool13) (or (or ?bool13 ?bool13) ?bool15 (and ?bool15 ?bool13)) ?bool15) ?bool14 (and ?bool11 (or (and ?bool11 ?bool14) ?bool13))))
(check-sat)


-- iteration 339 --
(declare-fun f0 (Float128 Float64 Float128) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2) ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RNE ?float8) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float3 ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float3) ?float9 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float2) ?float5 ((_ to_fp 11 53) RTZ ?float4))))
; FINAL ASSERT
(assert (or (and (and ?bool14)) ?bool11 (or ?bool13)))
(check-sat)


-- iteration 340 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ?float3 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RNE ?float5) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float6)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool11 (and (and ?bool13 ?bool13 ?bool14) (and ?bool12 ?bool11))) (or ?bool14 ?bool15)))
(check-sat)


-- iteration 341 --
(declare-fun f0 (Float128 Float64 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01111 #b1011111110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float7 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTN ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTN ?float6) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTP ?float3) ?float2)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 342 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00101011001 #b1101000011000001100100001100000001101011001010010010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ((_ to_fp 5 11) RNE ?float4) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float7) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float6 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTZ ?float5) ?float8)))
; FINAL ASSERT
(assert (and (or (and ?bool14) ?bool13 (or (or ?bool14))) ?bool15))
(check-sat)


-- iteration 343 --
(declare-fun f0 (Float16 Float128 Float64) Float32)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float6 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 11 53) RTN ?float9))))
; FINAL ASSERT
(assert (or (or (or (or ?bool12) (or ?bool11 ?bool11 ?bool14) ?bool12) ?bool14 ?bool14)))
(check-sat)


-- iteration 344 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ?float4 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTN ?float8) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 345 --
(declare-fun f0 (Float64 Float128 Float128) Float16)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ((_ to_fp 15 113) RTZ ?float4) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float10)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool13 (or ?bool13 (and ?bool15 ?bool12 ?bool15))) (or ?bool15 (or ?bool15))))
(check-sat)


-- iteration 346 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00010100 #b11001010101101011100010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ((_ to_fp 5 11) RNE ?float7) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float6 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float6 ((_ to_fp 8 24) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 11 53) RTZ ?float2) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 5 11) RNE ?float5) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (or (or (and (or ?bool13 ?bool11) (and ?bool14 ?bool12 ?bool14) ?bool13) (or ?bool12 (or ?bool13))) ?bool13))
(check-sat)


-- iteration 347 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11000 #b1011000110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float3 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 8 24) RTN ?float6) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float2 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float10)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 348 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTN ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float3 ((_ to_fp 11 53) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTN ?float2) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float4 ((_ to_fp 15 113) RTP ?float8))))
; FINAL ASSERT
(assert (or (and ?bool13 (or ?bool11) (and (or ?bool12 ?bool11) (or ?bool11)))))
(check-sat)


-- iteration 349 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10010010 #b11110111011000001000100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RNE ?float4) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 5 11) RTZ ?float6))))
; FINAL ASSERT
(assert (and (or (or (or ?bool13 ?bool13))) (and ?bool13)))
(check-sat)


-- iteration 350 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float6 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTP ?float7) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 5 11) RTN ?float2) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTN ?float5) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11))
(check-sat)


-- iteration 351 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01011 #b1000001000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float3 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ((_ to_fp 5 11) RTZ ?float2) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or ?bool15 (or (and (and ?bool15)))))
(check-sat)


-- iteration 352 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b001011101110010 #b0110011001111011011110100000001000110101110110111101000000001111001011110001100100110010000111100101100101000110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10010001110 #b0100010110001001011010001110101111110111100111110110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float6 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RNE ?float2) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ((_ to_fp 5 11) RTP ?float5))))
; FINAL ASSERT
(assert (or (and (and (and ?bool15 ?bool11) ?bool15)) ?bool15 (or (and ?bool14 (and ?bool15 ?bool12 ?bool12) (or ?bool15)) ?bool14 (and (or ?bool12)))))
(check-sat)


-- iteration 353 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11111 #b0101100010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float8) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float9 ((_ to_fp 15 113) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RTN ?float9) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float3)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 (or (and (or ?bool12) ?bool15) ?bool15 ?bool15)))
(check-sat)


-- iteration 354 --
(declare-fun f0 (Float128 Float64 Float64) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float7 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ?float8 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTP ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float3) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float5) ?float6)))
; FINAL ASSERT
(assert (or (or ?bool14) (and ?bool11 (and ?bool11))))
(check-sat)


-- iteration 355 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RNE ?float2) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTP ?float5) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (or (and (or ?bool14 ?bool11 (or ?bool11 ?bool12 ?bool12)) (and ?bool13 (and ?bool13 ?bool11))) ?bool11 (and (or (or ?bool13) (and ?bool14 ?bool13) ?bool15) (or ?bool14 (and ?bool13 ?bool14)))))
(check-sat)


-- iteration 356 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTZ ?float3) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (and (or (and ?bool12 (or ?bool13 ?bool14)) (or (and ?bool11 ?bool14) (and ?bool11 ?bool15 ?bool12)))))
(check-sat)


-- iteration 357 --
(declare-fun f0 (Float128 Float64 Float64) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float2 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTN ?float2 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 11 53) RTN ?float5) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float8) ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RTZ ?float8) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float7)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 358 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float5 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float2 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 8 24) RTN ?float6) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and ?bool12 (or (and (or ?bool13 ?bool11) ?bool15) ?bool11)))
(check-sat)


-- iteration 359 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11110100 #b00100100110110110110011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float9) ?float7 ((_ to_fp 11 53) RTN ?float5))))
; FINAL ASSERT
(assert (or (or (or (and ?bool15 ?bool11)) (and ?bool11) ?bool15) (or ?bool14)))
(check-sat)


-- iteration 360 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float5 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float4 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and (or (or (or ?bool14 ?bool12 ?bool15)) (and ?bool13 (and ?bool12 ?bool11) (and ?bool13 ?bool14 ?bool12)))))
(check-sat)


-- iteration 361 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float5 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 15 113) RTZ ?float6) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float6 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float4)))
; FINAL ASSERT
(assert (and (or (and ?bool12 ?bool15) (and (or ?bool13) ?bool15) ?bool12)))
(check-sat)


-- iteration 362 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float2 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ?float3 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float8) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ((_ to_fp 11 53) RTZ ?float6))))
; FINAL ASSERT
(assert (and (or ?bool15 (and ?bool14) (or (or ?bool14 ?bool14))) (and ?bool14) ?bool12))
(check-sat)


-- iteration 363 --
(declare-fun f0 (Float32 Float32 Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and (and ?bool12) (or ?bool12 ?bool14)))
(check-sat)


-- iteration 364 --
(declare-fun f0 (Float16 Float32 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float6 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ((_ to_fp 5 11) RTP ?float2) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 8 24) RTP ?float3) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and (or (or (and ?bool15 ?bool13) ?bool13))))
(check-sat)


-- iteration 365 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float7 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float7) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and (or (and ?bool14) (and ?bool12) ?bool11)))
(check-sat)


-- iteration 366 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b111101110111000 #b1000111111000000101100100000010011100011111111110100110111100010000000111000101000010101100111110000101100010010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float2) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ?float6 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RTN ?float3) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool14)))
(check-sat)


-- iteration 367 --
(declare-fun f0 (Float128 Float128 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 15 113) RTZ ?float3) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float4))))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool13 (and (and ?bool15 ?bool14 ?bool14) ?bool11) (and ?bool13)) (or (and ?bool14) (and (and ?bool15 ?bool14 ?bool13) (and ?bool12) ?bool14) (and ?bool12 ?bool11))))
(check-sat)


-- iteration 368 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ?float5 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float2 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and ?bool11 (and (and ?bool12 ?bool14))))
(check-sat)


-- iteration 369 --
(declare-fun f0 (Float128 Float16 Float16) Float64)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0111010111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTP ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 11 53) RTP ?float9) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ((_ to_fp 5 11) RTP ?float10))))
; FINAL ASSERT
(assert (and (and (and (and ?bool11 ?bool12 ?bool14) ?bool15) (or (and ?bool15 ?bool14) (or ?bool13) (and ?bool13)) (or ?bool14)) ?bool15))
(check-sat)


-- iteration 370 --
(declare-fun f0 (Float32 Float128 Float128) Float128)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ((_ to_fp 5 11) RTN ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float6 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (or (and (or ?bool14 ?bool11 ?bool14) (or ?bool12 ?bool12 (and ?bool13 ?bool13 ?bool12)) (and ?bool13 ?bool13))))
(check-sat)


-- iteration 371 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float2 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float4 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool13 (and (or ?bool14 ?bool13)) (and ?bool15 (or ?bool15)))))
(check-sat)


-- iteration 372 --
(declare-fun f0 (Float32 Float16 Float64) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00111011101 #b0111001100001001000000010111101100000010001000101101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float4) ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 5 11) RTZ ?float8) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTN ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 5 11) RTZ ?float5) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 11 53) RNE ?float10))))
; FINAL ASSERT
(assert (and (or (and (or ?bool13 ?bool13))) (and ?bool11) ?bool12))
(check-sat)


-- iteration 373 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float2 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTN ?float10) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float10))))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 ?bool11))
(check-sat)


-- iteration 374 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ?float8 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 375 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ?float6 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ((_ to_fp 11 53) RTP ?float9))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 376 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110000100001100 #b0000001011110011001101000010000010000001000111111110101011110001111000011000101100100010001011011000111100110111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 8 24) RNE ?float7) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float5) ?float7 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool11 (and ?bool12 ?bool15 (or ?bool13 ?bool14))) (and (and (and ?bool11 ?bool12) (and ?bool11 ?bool14 ?bool15) ?bool12))))
(check-sat)


-- iteration 377 --
(declare-fun f0 (Float32 Float32 Float128) Float16)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00110000011 #b0111010111110011010011010100000010101100110000000101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float4) ?float2 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 11 53) RTN ?float6) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTP ?float5) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool12)))
(check-sat)


-- iteration 378 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float6) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTZ ?float4) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float6) ?float10 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float10)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14))
(check-sat)


-- iteration 379 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 8 24) RTN ?float5) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float4) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float6 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float7) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 8 24) RTN ?float4) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RNE ?float3))))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 (or ?bool13 ?bool15)))
(check-sat)


-- iteration 380 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RTP ?float6) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 15 113) RTZ ?float2))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 381 --
(declare-fun f0 (Float128 Float128 Float64) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00100000110 #b1100100010111111011011101000100101010101000011001101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float3 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 15 113) RNE ?float2) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15 (or ?bool15 (and (and ?bool15) (and ?bool12)))))
(check-sat)


-- iteration 382 --
(declare-fun f0 (Float64 Float128 Float32) Float128)
(declare-fun p0 (Float32 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float4 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float2 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ((_ to_fp 5 11) RTZ ?float3))))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool12) ?bool15 ?bool13))
(check-sat)


-- iteration 383 --
(declare-fun f0 (Float64 Float64 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ?float2 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float2 ?float4 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool13 (and (or ?bool12 ?bool15 ?bool13)) ?bool11) (and (or (or ?bool13 ?bool15) (and ?bool12 ?bool12 ?bool12) ?bool14))))
(check-sat)


-- iteration 384 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11010010 #b00011000000111010001001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ((_ to_fp 11 53) RTP ?float3) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or (or ?bool15 (or (or ?bool15 ?bool15)) ?bool13)))
(check-sat)


-- iteration 385 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ((_ to_fp 8 24) RTN ?float7) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RTP ?float9) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 15 113) RTP ?float8))))
; FINAL ASSERT
(assert (and (or (and ?bool13) ?bool14 ?bool15) ?bool11 ?bool15))
(check-sat)


-- iteration 386 --
(declare-fun f0 (Float64 Float128 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RNE ?float2) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or (and ?bool14 (or ?bool15 (and ?bool12 ?bool12 ?bool14) ?bool15) (and (and ?bool13))) (and (or ?bool12 (or ?bool14 ?bool15)))))
(check-sat)


-- iteration 387 --
(declare-fun f0 (Float32 Float16 Float32) Float128)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ?float2 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float3 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float5 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or (and (or (or ?bool14 ?bool12 ?bool13) ?bool14 ?bool12) ?bool13 (and ?bool14 (or ?bool12)))))
(check-sat)


-- iteration 388 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00110010 #b11101111010100100010010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 15 113) RNE ?float4) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ?float3 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RNE ?float8) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11 ?bool14))
(check-sat)


-- iteration 389 --
(declare-fun f0 (Float128 Float64 Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11100010110 #b1001010010100011100000111110010010111001110110101111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 8 24) RTP ?float4) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float2 ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool12)))
(check-sat)


-- iteration 390 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float4 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTN ?float9) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float4))))
; FINAL ASSERT
(assert (and (and (and (or ?bool12 ?bool12 ?bool12)) (or (and ?bool14) (and ?bool12) (and ?bool14 ?bool13 ?bool13)))))
(check-sat)


-- iteration 391 --
(declare-fun f0 (Float128 Float32 Float16) Float128)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11000111 #b10000001001100100100101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float4) ?float6 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 392 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001001001110001 #b1001100111000101011000001010110000010000010111000000100001011000010000111001110101101011110111111110110001111111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float7 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float9)))
; FINAL ASSERT
(assert (or (or (or ?bool12 ?bool11) ?bool14 (or (or ?bool14 ?bool13)))))
(check-sat)


-- iteration 393 --
(declare-fun f0 (Float64 Float128 Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00010 #b1110010001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float6 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ?float4 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ((_ to_fp 11 53) RTP ?float3))))
; FINAL ASSERT
(assert (or ?bool14 (or (and (and ?bool14 ?bool14 ?bool15) ?bool12 (and ?bool12)))))
(check-sat)


-- iteration 394 --
(declare-fun f0 (Float64 Float64 Float32) Float128)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float2 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 11 53) RTP ?float7) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 5 11) RNE ?float5) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (or (and (or (or ?bool11) (and ?bool13 ?bool14)) (or (or ?bool11 ?bool14))) ?bool14 ?bool11))
(check-sat)


-- iteration 395 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ((_ to_fp 5 11) RTZ ?float3) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float4 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float8)))
; FINAL ASSERT
(assert (and (or (or (and ?bool13 ?bool12) (and ?bool15) ?bool14))))
(check-sat)


-- iteration 396 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10100 #b1101111110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float2 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float10) ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 15 113) RNE ?float6) ?float7)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 397 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float2) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float2) ?float9 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTP ?float8) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ?float9)))
; FINAL ASSERT
(assert (and ?bool14 ?bool15 ?bool15))
(check-sat)


-- iteration 398 --
(declare-fun f0 (Float16 Float32 Float64) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00100101101 #b0101110010001011001011000110110011110001011010111011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ?float3 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float2 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float3 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float4 ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and (and (or (and ?bool11 ?bool15 ?bool15) ?bool15) (or ?bool13) (and ?bool14)) (and ?bool12) (and ?bool13)))
(check-sat)


-- iteration 399 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float2 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or ?bool11 ?bool11 ?bool15))
(check-sat)


-- iteration 400 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 11 53) RNE ?float3) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float7 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float10) ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 5 11) RTZ ?float5))))
; FINAL ASSERT
(assert (or (or ?bool14) (and (and ?bool15) (and (or ?bool11 ?bool15 ?bool13)) (or (and ?bool15 ?bool15 ?bool15)))))
(check-sat)


-- iteration 401 --
(declare-fun f0 (Float32 Float64 Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01000000 #b11111100000000010001101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float6 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or (or ?bool15 (or ?bool12 ?bool11) ?bool15) ?bool13))
(check-sat)


-- iteration 402 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11111110011 #b0101110001010111101101001101111101001100110010110110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTZ ?float5) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float4 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTZ ?float2) ?float8)))
; FINAL ASSERT
(assert (or ?bool13 ?bool13))
(check-sat)


-- iteration 403 --
(declare-fun f0 (Float16 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00011 #b0101011010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ?float3 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float7 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RTN ?float4) ?float9)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 404 --
(declare-fun f0 (Float64 Float32 Float16) Float64)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11100 #b0000110110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float2) ?float2 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ((_ to_fp 5 11) RNE ?float6) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float8 ((_ to_fp 5 11) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float2) ?float7 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float8)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 405 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float4 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float4 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8)))
; FINAL ASSERT
(assert (or ?bool14 (and (and ?bool12 (or ?bool14 ?bool15) ?bool12) (and ?bool11))))
(check-sat)


-- iteration 406 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ((_ to_fp 15 113) RTZ ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float6) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 407 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ?float7 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 408 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00110 #b1000010110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14 (and ?bool14 (or ?bool15 (or ?bool11) (and ?bool13)) ?bool12)))
(check-sat)


-- iteration 409 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTP ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float6 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ?float7 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float7) ?float4 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 410 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTZ ?float2) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RTZ ?float7) ?float10)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12 ?bool15))
(check-sat)


-- iteration 411 --
(declare-fun f0 (Float16 Float32 Float16) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b101110000000010 #b0001100001110000110111001011111011100011101001111000101010111101010000100111110010101111110010100110101001000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 15 113) RTZ ?float7) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float7) ?float3 ((_ to_fp 5 11) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RTN ?float5))))
; FINAL ASSERT
(assert (or (and (or ?bool12 (or ?bool15 ?bool15) (or ?bool14 ?bool12 ?bool11)) ?bool14 (and (and ?bool13) (and ?bool12 ?bool15 ?bool13) (or ?bool13 ?bool15 ?bool13)))))
(check-sat)


-- iteration 412 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b001101001101100 #b0000001011010111100001000110001100000000101011100000111011001010101111001110011001110110111110010110111000101010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 8 24) RTZ ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ((_ to_fp 11 53) RTN ?float6) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ?float4 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTN ?float2) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ((_ to_fp 11 53) RTZ ?float8))))
; FINAL ASSERT
(assert (and (or ?bool12 (and ?bool13))))
(check-sat)


-- iteration 413 --
(declare-fun f0 (Float16 Float64 Float128) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float2) ?float4 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 5 11) RTP ?float3) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float4 ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and ?bool12 ?bool13))
(check-sat)


-- iteration 414 --
(declare-fun f0 (Float16 Float64 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b1010110110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float5 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 11 53) RTN ?float5) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 11 53) RTP ?float8) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTN ?float9) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RTP ?float9) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 415 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float8 ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RNE ?float5) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or (and ?bool14 (or (and ?bool12 ?bool12 ?bool15)) ?bool15) ?bool12 ?bool12))
(check-sat)


-- iteration 416 --
(declare-fun f0 (Float32 Float64 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01011 #b0100001000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float6 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ?float3 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float5 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and (or ?bool14 (or ?bool12 (or ?bool12 ?bool12)) (or (or ?bool11 ?bool15) ?bool11)) (and ?bool12) (and ?bool14)))
(check-sat)


-- iteration 417 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ((_ to_fp 5 11) RTZ ?float5) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTN ?float6) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float4 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RNE ?float2) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 5 11) RNE ?float10))))
; FINAL ASSERT
(assert (and (and ?bool11 (or ?bool13 ?bool11 ?bool12)) ?bool13))
(check-sat)


-- iteration 418 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01100010 #b00111101011100110001011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float5 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float2 ((_ to_fp 15 113) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTP ?float5) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float2) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RNE ?float4) ?float2)))
; FINAL ASSERT
(assert (or ?bool13 ?bool13))
(check-sat)


-- iteration 419 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ?float3 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ?float8)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15))
(check-sat)


-- iteration 420 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101010101110001 #b1010000010110100110110000111000110010100000111101110010001110110101101000110100010101001110110110011011001001100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 15 113) RTZ ?float3) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float6 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTZ ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or (and (or ?bool12 ?bool12) (and ?bool11 ?bool12 (or ?bool14 ?bool14)) (or (or ?bool14))) ?bool13 ?bool15))
(check-sat)


-- iteration 421 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float5 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float4 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float6 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (and (or ?bool12 (and ?bool13 ?bool13 ?bool11) (or ?bool13 ?bool11 ?bool15)) ?bool14)))
(check-sat)


-- iteration 422 --
(declare-fun f0 (Float64 Float16 Float128) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 5 11) RTP ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float4) ?float4 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 15 113) RTZ ?float3) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float3 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ((_ to_fp 15 113) RNE ?float7) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTP ?float7) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RNE ?float3) ?float10)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 423 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00010010101 #b0100111101001111110110000111001111110011011011101111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float6 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 11 53) RNE ?float3) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13 ?bool12))
(check-sat)


-- iteration 424 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11101 #b1010010001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 5 11) RTZ ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 5 11) RTN ?float2) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTN ?float10) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or (and (and (or ?bool14) ?bool13 (and ?bool12 ?bool14 ?bool11)) ?bool14) ?bool11 (or ?bool14 ?bool13)))
(check-sat)


-- iteration 425 --
(declare-fun f0 (Float16 Float32 Float16) Float128)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ?float7 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float6 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float7)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 426 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ?float3 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float4 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 5 11) RTP ?float4) ?float9)))
; FINAL ASSERT
(assert (or (and (or (and ?bool11) ?bool13 (or ?bool11 ?bool15)) (or (and ?bool15 ?bool12))) ?bool11))
(check-sat)


-- iteration 427 --
(declare-fun f0 (Float16 Float16 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11000 #b0101110101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float2 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float8 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float6) ?float3 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (and (or ?bool11 ?bool11) (or ?bool13))))
(check-sat)


-- iteration 428 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011101101100100 #b1100000110110001101101110000110101100011011111101100100111001100001100111101011111010011111011111101000111000110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11111 #b1011011000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float3 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float3 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float10) ((_ to_fp 11 53) RTP ?float9) ((_ to_fp 11 53) RTZ ?float8))))
; FINAL ASSERT
(assert (and (or (and (or ?bool11 ?bool13 ?bool12) ?bool12)) ?bool14))
(check-sat)


-- iteration 429 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00100 #b1110110110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ((_ to_fp 5 11) RTZ ?float6) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 11 53) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float9) ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool15 ?bool15) (or (and (or ?bool14) ?bool14 (or ?bool11 ?bool11 ?bool15)) ?bool14 ?bool13) (or (or (and ?bool12) (and ?bool12)) ?bool15 (and (or ?bool12)))))
(check-sat)


-- iteration 430 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11000110 #b01001011000000100001111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b001001010100100 #b1100010110111111111101111000011111100101001101110010000001001111010110110001001101001001101100010100111001011000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float2 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 11 53) RNE ?float2))))
; FINAL ASSERT
(assert (and (or (and (or ?bool13 ?bool11 ?bool13) ?bool14) ?bool14) (or (and ?bool13) (and (and ?bool13 ?bool11)) ?bool12) ?bool14))
(check-sat)


-- iteration 431 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10101111110 #b0110100101111010110000111100101010001001011100100101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ((_ to_fp 11 53) RTP ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 11 53) RTN ?float5) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTP ?float5) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float4 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTZ ?float5) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12))
(check-sat)


-- iteration 432 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float32 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float2) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 11 53) RTN ?float5) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 15 113) RTP ?float10) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RTZ ?float7))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 433 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float5 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTN ?float4 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float4) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float6) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RNE ?float3) ?float4)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool13 ?bool15) (and (or (and ?bool12 ?bool14 ?bool15) (and ?bool15 ?bool13 ?bool15)))))
(check-sat)


-- iteration 434 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11101011010 #b0110001110100000000110111111101001011111111100111111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 11 53) RTN ?float2) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RTZ ?float5) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 5 11) RTZ ?float9) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool15 ?bool15)))
(check-sat)


-- iteration 435 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RTP ?float8) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and (and (and ?bool13 (and ?bool15 ?bool13 ?bool13))) (and (or (and ?bool13) (and ?bool14)) (and ?bool14 (and ?bool12 ?bool13 ?bool11) ?bool14) ?bool13)))
(check-sat)


-- iteration 436 --
(declare-fun f0 (Float16 Float128 Float16) Float128)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ?float4 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RNE ?float5) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float8 ((_ to_fp 15 113) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ((_ to_fp 15 113) RTN ?float5))))
; FINAL ASSERT
(assert (or (or (or (and ?bool14 ?bool15 ?bool13) (or ?bool14) (and ?bool15 ?bool11 ?bool15)) ?bool11) (and ?bool15 ?bool14 (or (and ?bool14 ?bool15 ?bool13) ?bool12)) ?bool15))
(check-sat)


-- iteration 437 --
(declare-fun f0 (Float32 Float32 Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float5 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float7 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RTP ?float9) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13))
(check-sat)


-- iteration 438 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11001 #b0110100111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 5 11) RTN ?float3) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float3 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTP ?float10) ?float4)))
; FINAL ASSERT
(assert (and (and (or ?bool11 (and ?bool11) ?bool11)) ?bool14 (and ?bool14)))
(check-sat)


-- iteration 439 --
(declare-fun f0 (Float128 Float64 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b010101010001110 #b0110111000100001011000100001000000000111100110110100110111110101000100010000011011000100011010001001001001000011)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ((_ to_fp 5 11) RTN ?float6) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 11 53) RTN ?float4) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float9)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 440 --
(declare-fun f0 (Float16 Float32 Float16) Float128)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00011111 #b10100100000001001000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float2 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ?float6 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float5 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 8 24) RTP ?float2))))
; FINAL ASSERT
(assert (and (and ?bool14) ?bool11))
(check-sat)


-- iteration 441 --
(declare-fun f0 (Float32 Float128 Float128) Float32)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float4 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float5 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8 ((_ to_fp 15 113) RNE ?float9) ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RTZ ?float3) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 442 --
(declare-fun f0 (Float128 Float64 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ((_ to_fp 5 11) RTN ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 15 113) RTP ?float5) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float9) ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or ?bool11 ?bool14))
(check-sat)


-- iteration 443 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float2 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 444 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 8 24) RNE ?float5) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float9)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 445 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10010100 #b11011011101011010000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11010 #b0101011011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float3 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RTZ ?float4))))
; FINAL ASSERT
(assert (or ?bool13 (and (or (or ?bool15 ?bool13 ?bool15) ?bool14 ?bool13) ?bool12)))
(check-sat)


-- iteration 446 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ?float5 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 5 11) RNE ?float10) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ((_ to_fp 5 11) RNE ?float6))))
; FINAL ASSERT
(assert (or ?bool13 (and (or (or ?bool11) (and ?bool15 ?bool12) ?bool11) (and ?bool14))))
(check-sat)


-- iteration 447 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110000110111000 #b0011011110101100111101001101110010100011010010110111011100001111010001011011100010100111010101000010010111001011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 15 113) RNE ?float4) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float2 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float8 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float2) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 5 11) RTP ?float3))))
; FINAL ASSERT
(assert (or (or (and ?bool15 ?bool11 (or ?bool12 ?bool14)) (and ?bool15))))
(check-sat)


-- iteration 448 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ((_ to_fp 8 24) RTP ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or (or (or (or ?bool15) ?bool14 (or ?bool15 ?bool12 ?bool11)))))
(check-sat)


-- iteration 449 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 5 11) RNE ?float3) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 11 53) RTZ ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float10) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTZ ?float3) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and (and ?bool12) (and (or (and ?bool14 ?bool15 ?bool12) (or ?bool15 ?bool11)) (or ?bool14)) (and ?bool12 ?bool13 ?bool15)))
(check-sat)


-- iteration 450 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float2 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ?float5)))
; FINAL ASSERT
(assert (and (and (and (or ?bool14 ?bool11) ?bool14 ?bool14) ?bool12 ?bool12)))
(check-sat)


-- iteration 451 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10001000111 #b0011110001011101001111110100100000010011110100000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 8 24) RNE ?float7) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTZ ?float7) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float10) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (or (or (or (and ?bool12)))))
(check-sat)


-- iteration 452 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b010010001111001 #b1110111011111010111010010000111111000111110011100110011001101100010001010101011111110001101001000110011100001110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ?float3 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float8 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float6 ((_ to_fp 5 11) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ((_ to_fp 11 53) RNE ?float10))))
; FINAL ASSERT
(assert (and ?bool12 ?bool13))
(check-sat)


-- iteration 453 --
(declare-fun f0 (Float128 Float128 Float32) Float16)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 8 24) RTN ?float5) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RNE ?float6) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ?float5 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 454 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00100010000 #b1111001100110001101101001110000111011000001111000100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ((_ to_fp 11 53) RTP ?float5) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float4 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float9)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 (and (and (and ?bool13 ?bool12 ?bool15)))))
(check-sat)


-- iteration 455 --
(declare-fun f0 (Float16 Float128 Float16) Float16)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float6 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 15 113) RNE ?float3) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float7 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float5)))
; FINAL ASSERT
(assert (and ?bool12 (and (or (or ?bool13 ?bool13) (and ?bool13) (or ?bool13)) (or (or ?bool11 ?bool12) ?bool12) ?bool13) (and ?bool14 (and ?bool11 ?bool11 (or ?bool13 ?bool11 ?bool12)) (or ?bool12 ?bool11 (and ?bool14 ?bool12 ?bool13)))))
(check-sat)


-- iteration 456 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ?float6 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float7 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ?float4)))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool11 ?bool13)))
(check-sat)


-- iteration 457 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float4) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3)))
; FINAL ASSERT
(assert (or (or (or ?bool11)) ?bool13 (and ?bool11 (and ?bool11))))
(check-sat)


-- iteration 458 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RNE ?float7) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ?float6)))
; FINAL ASSERT
(assert (or (and (and ?bool14 ?bool15) (or (and ?bool15 ?bool12) ?bool14) (or ?bool14 ?bool13 ?bool14)) (and ?bool11 (or (and ?bool14 ?bool13 ?bool15) (or ?bool14 ?bool12 ?bool12) (and ?bool13 ?bool11 ?bool12))) ?bool11))
(check-sat)


-- iteration 459 --
(declare-fun f0 (Float64 Float16 Float128) Float16)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10010 #b1100100001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 8 24) RTP ?float9) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (and (and (or (and ?bool13 ?bool14 ?bool13) ?bool11 ?bool11) (or ?bool11 ?bool14))))
(check-sat)


-- iteration 460 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float2 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float7 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ((_ to_fp 5 11) RTN ?float8))))
; FINAL ASSERT
(assert (and (or (or ?bool13 (or ?bool13) (and ?bool12)) ?bool13) ?bool13 ?bool15))
(check-sat)


-- iteration 461 --
(declare-fun f0 (Float128 Float64 Float64) Float16)
(declare-fun p0 (Float16 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float6 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float5 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float8 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float3 ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or (and ?bool15 (or ?bool15 (and ?bool11 ?bool14 ?bool14) ?bool12))))
(check-sat)


-- iteration 462 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float6) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14))
(check-sat)


-- iteration 463 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and ?bool12 (or (or (and ?bool12 ?bool14)) (or ?bool13 ?bool13) ?bool12)))
(check-sat)


-- iteration 464 --
(declare-fun f0 (Float128 Float16 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float6 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float4 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTZ ?float7) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 465 --
(declare-fun f0 (Float64 Float128 Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float6 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ((_ to_fp 11 53) RTZ ?float4) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTP ?float9) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float5)))
; FINAL ASSERT
(assert (and (or ?bool12 (and (and ?bool11 ?bool12 ?bool11) ?bool14 ?bool13)) (and ?bool15 ?bool13)))
(check-sat)


-- iteration 466 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01100001 #b10011011111101100000111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float4 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 15 113) RTP ?float9) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RNE ?float8) ?float7)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11))
(check-sat)


-- iteration 467 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b101100011000011 #b1001011111100000000011000011100000100101111000000011010110101100001110101010101110101011001011011110010000010010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ?float6 ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float6) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 15 113) RNE ?float5))))
; FINAL ASSERT
(assert (and (or (and ?bool11 (or ?bool11)) (and ?bool11 ?bool14 (and ?bool13 ?bool11 ?bool13)) ?bool12) ?bool15))
(check-sat)


-- iteration 468 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 11 53) RTZ ?float8) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RTP ?float10) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ((_ to_fp 8 24) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool11 ?bool12))
(check-sat)


-- iteration 469 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01110000010 #b0010111110110001111111001100001100000101011011000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float4) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTZ ?float4) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float5))))
; FINAL ASSERT
(assert (or (and (and (and ?bool14 ?bool11 ?bool14) (or ?bool15))) ?bool13))
(check-sat)


-- iteration 470 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float6 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 8 24) RTZ ?float4) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 8 24) RTZ ?float10) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 8 24) RTN ?float3))))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 ?bool13))
(check-sat)


-- iteration 471 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RNE ?float8))))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 472 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ?float3 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float7 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float9 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RNE ?float10) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (and ?bool12 (and (or (or ?bool12 ?bool13 ?bool12)) ?bool11) (and ?bool13 ?bool12)))
(check-sat)


-- iteration 473 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float64 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float6 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTZ ?float4) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTZ ?float2) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RNE ?float9) ?float4)))
; FINAL ASSERT
(assert (and (and (and ?bool11) (and (or ?bool14 ?bool14) (or ?bool11 ?bool12 ?bool13) ?bool13)) (or ?bool11)))
(check-sat)


-- iteration 474 --
(declare-fun f0 (Float32 Float64 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10100 #b0011010101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float2 ?float4 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float6) ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 5 11) RTN ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float5))))
; FINAL ASSERT
(assert (and (and (or (or ?bool15 ?bool11)) (and ?bool11 ?bool11) (and (and ?bool12) (or ?bool12)))))
(check-sat)


-- iteration 475 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float6 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ((_ to_fp 11 53) RTZ ?float6) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 5 11) RTN ?float2))))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool13 (or (and ?bool12 ?bool14 ?bool15) (and ?bool12 ?bool15 ?bool13))) ?bool14))
(check-sat)


-- iteration 476 --
(declare-fun f0 (Float16 Float128 Float64) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float2 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float7) ?float7 ((_ to_fp 11 53) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RNE ?float5) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RTP ?float10) ?float8)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14))
(check-sat)


-- iteration 477 --
(declare-fun f0 (Float128 Float128 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTP ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ?float5 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 15 113) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTP ?float8) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (or ?bool14) (and ?bool15 ?bool14)))
(check-sat)


-- iteration 478 --
(declare-fun f0 (Float16 Float64 Float64) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or (or (or ?bool14) ?bool12) (and (or ?bool12)) (or (or (and ?bool11 ?bool13) ?bool14 ?bool14) ?bool12 (or (or ?bool15)))))
(check-sat)


-- iteration 479 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 5 11) RNE ?float4) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTZ ?float5 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (or ?bool12 (and (or ?bool15 ?bool14)) ?bool13))
(check-sat)


-- iteration 480 --
(declare-fun f0 (Float32 Float128 Float128) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float3 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float2 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 481 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RNE ?float7) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float3)))
; FINAL ASSERT
(assert (or ?bool12 ?bool11))
(check-sat)


-- iteration 482 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 8 24) RTP ?float5))))
; FINAL ASSERT
(assert (and (and ?bool15) (and (and ?bool12 (or ?bool11)) (or ?bool13 (and ?bool15 ?bool14)) ?bool14) (and (or (or ?bool11) (and ?bool15) (and ?bool12)) (or (or ?bool11 ?bool12 ?bool14)) (or ?bool12))))
(check-sat)


-- iteration 483 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float7 ((_ to_fp 8 24) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float5)))
; FINAL ASSERT
(assert (and (or (or (and ?bool11 ?bool15)))))
(check-sat)


-- iteration 484 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RTP ?float5) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float5 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool14 ?bool12 ?bool15) (and ?bool15 ?bool14)))
(check-sat)


-- iteration 485 --
(declare-fun f0 (Float16 Float32 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011110011001011 #b0000111100011110100001011011110010011100110010110110100010110100100111000000000010100000100001000110111110101100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float6 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float5) ?float6 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float8) ?float8 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RNE ?float10) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and (and (and ?bool15))))
(check-sat)


-- iteration 486 --
(declare-fun f0 (Float16 Float32 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000010001000000 #b1001111001010001111111110110000111010111110011000001010010011100101100110000010100111000011011101110010001001010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float7 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float8 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float9)))
; FINAL ASSERT
(assert (or (or ?bool11) (and ?bool13) (or ?bool15 (and ?bool11 ?bool13))))
(check-sat)


-- iteration 487 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float7 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float2))))
; FINAL ASSERT
(assert (and (and ?bool13)))
(check-sat)


-- iteration 488 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float4 ((_ to_fp 5 11) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RTN ?float2) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool11)))
(check-sat)


-- iteration 489 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01110 #b0101101000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (or (and (and ?bool14) ?bool15 (or ?bool11)) ?bool13 (or ?bool12 (or (and ?bool15 ?bool11 ?bool15) ?bool15) ?bool14)))
(check-sat)


-- iteration 490 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 11 53) RTN ?float3) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float2 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float3 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTP ?float5) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float2)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 491 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float3 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ((_ to_fp 5 11) RTN ?float7))))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool13) ?bool15 ?bool12))
(check-sat)


-- iteration 492 --
(declare-fun f0 (Float64 Float16 Float128) Float64)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01011 #b0001101110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float5 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float9 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RTP ?float5) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RTP ?float2) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 15 113) RTP ?float7))))
; FINAL ASSERT
(assert (or (or (and (or ?bool14) ?bool11) ?bool14) (and ?bool14)))
(check-sat)


-- iteration 493 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float5 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTZ ?float9) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTP ?float10) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (or ?bool15 ?bool15))
(check-sat)


-- iteration 494 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ((_ to_fp 15 113) RNE ?float5) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTN ?float6) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ?float5 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float6) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 11 53) RNE ?float7))))
; FINAL ASSERT
(assert (or ?bool15 (or (or (or ?bool13) ?bool14) ?bool12)))
(check-sat)


-- iteration 495 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01100011 #b11110001110011100000110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float4 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 5 11) RTP ?float10))))
; FINAL ASSERT
(assert (or ?bool15 ?bool11 ?bool15))
(check-sat)


-- iteration 496 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float2 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 8 24) RTP ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float3 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTZ ?float4) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 8 24) RTN ?float2))))
; FINAL ASSERT
(assert (or (or (and (and ?bool14 ?bool12 ?bool11) (or ?bool13 ?bool15 ?bool11) (and ?bool12 ?bool12 ?bool12)) ?bool14 (or ?bool15 (or ?bool15)))))
(check-sat)


-- iteration 497 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11100111000 #b0111001111010010011000101101110110100011111111001110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float7 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float7 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTP ?float6) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float6)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 498 --
(declare-fun f0 (Float16 Float16 Float64) Float128)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float2 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float5) ?float4 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float6 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float4 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float6)))
; FINAL ASSERT
(assert (or ?bool14 (or (and ?bool11 (and ?bool13 ?bool14 ?bool13)))))
(check-sat)


-- iteration 499 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float3) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float4 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 5 11) RNE ?float2) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ((_ to_fp 8 24) RTP ?float9))))
; FINAL ASSERT
(assert (and ?bool11 ?bool14 (and ?bool15)))
(check-sat)


-- iteration 500 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01100100111 #b1001001000101101111101111010101000101101000111100000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ?float2 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float7 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ?float5 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or (or (or ?bool13) ?bool15) (and (or ?bool12) ?bool15) ?bool14))
(check-sat)


-- iteration 501 --
(declare-fun f0 (Float16 Float64 Float128) Float32)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 11 53) RTN ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTP ?float2) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float7 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 15 113) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTP ?float3) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float8)))
; FINAL ASSERT
(assert (or (and (or ?bool11 (or ?bool12) ?bool15))))
(check-sat)


-- iteration 502 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTZ ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float6)))
; FINAL ASSERT
(assert (and (and ?bool12 (or (and ?bool11 ?bool14) ?bool14) (and (and ?bool15 ?bool11 ?bool15) ?bool15)) (and (or ?bool11 ?bool14)) ?bool11))
(check-sat)


-- iteration 503 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ((_ to_fp 5 11) RNE ?float4) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float5 ?float7)))
; FINAL ASSERT
(assert (or (or (and ?bool13 (or ?bool11)) (or ?bool13) (or ?bool14 (or ?bool13 ?bool13) ?bool15)) ?bool13 (or ?bool11)))
(check-sat)


-- iteration 504 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RTN ?float5) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float7)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 505 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01100 #b0110100100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 5 11) RNE ?float10) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool14)))
(check-sat)


-- iteration 506 --
(declare-fun f0 (Float128 Float128 Float64) Float16)
(declare-fun p0 (Float64 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ((_ to_fp 5 11) RTP ?float4) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float2 ((_ to_fp 8 24) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool11 ?bool13) ?bool12))
(check-sat)


-- iteration 507 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float6 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float3 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ((_ to_fp 11 53) RTN ?float7))))
; FINAL ASSERT
(assert (or ?bool12 ?bool12))
(check-sat)


-- iteration 508 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11110000111 #b0000010100101000100001110011010001010100010010111110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RNE ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTZ ?float3) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or (or ?bool14 (and (or ?bool13)) (or ?bool14 ?bool14 (or ?bool11))) ?bool15))
(check-sat)


-- iteration 509 --
(declare-fun f0 (Float64 Float64 Float128) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01100 #b1111011001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float3) ?float2 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float2 ?float2 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 510 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110101000000011 #b0111111001101100111011010101111111101111011010011111010011011101010000000111111100110100101001011111011100001110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float3 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RNE ?float5) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ((_ to_fp 15 113) RTN ?float7))))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool12 (and ?bool12) ?bool11)))
(check-sat)


-- iteration 511 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10010011001 #b1001101001010110101111101111000011001110111100110011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ((_ to_fp 15 113) RNE ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RNE ?float2) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ((_ to_fp 11 53) RTN ?float8) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float3)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 512 --
(declare-fun f0 (Float16 Float32 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 8 24) RTP ?float2) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float4 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (and (or (or ?bool15 ?bool11)) ?bool12 ?bool13))
(check-sat)


-- iteration 513 --
(declare-fun f0 (Float128 Float32 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 5 11) RTP ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float7 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or ?bool15 (and (and ?bool14 ?bool14) ?bool13 (and (and ?bool11 ?bool13 ?bool11) ?bool15))))
(check-sat)


-- iteration 514 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ((_ to_fp 8 24) RTP ?float5) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ((_ to_fp 8 24) RTP ?float5) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float2 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or (or (or ?bool12 (or ?bool11)) ?bool11 ?bool15) (or (or (or ?bool14 ?bool15)) (or ?bool11 ?bool14) ?bool15) (or ?bool15)))
(check-sat)


-- iteration 515 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float6 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ((_ to_fp 5 11) RTN ?float4) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float8) ?float2 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and (and ?bool15 (and ?bool14 ?bool15 ?bool15)) (or ?bool14) ?bool11))
(check-sat)


-- iteration 516 --
(declare-fun f0 (Float16 Float64 Float16) Float32)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float6 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTP ?float3) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13 (or (and (or ?bool15 ?bool11)) ?bool14 ?bool12)))
(check-sat)


-- iteration 517 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 11 53) RTZ ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTN ?float7) ?float3)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14))
(check-sat)


-- iteration 518 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10111101 #b01101001110100011110110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float2 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RTP ?float7) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float9) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (and (and ?bool15 (or (or ?bool11 ?bool11 ?bool12) (or ?bool13 ?bool15) ?bool13)) ?bool15))
(check-sat)


-- iteration 519 --
(declare-fun f0 (Float128 Float128 Float32) Float128)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float4 ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float2 ?float5 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool14) (or ?bool15 ?bool14)))
(check-sat)


-- iteration 520 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01101000 #b10010111111101100111100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float6 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float5 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float8) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 11 53) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RNE ?float8) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 8 24) RNE ?float2))))
; FINAL ASSERT
(assert (and (and ?bool11 (or (and ?bool14 ?bool11 ?bool12) ?bool11) (or (or ?bool11))) (or ?bool13 (or (and ?bool12 ?bool13 ?bool15))) ?bool14))
(check-sat)


-- iteration 521 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01101101101 #b1010010001110111010100011001101111100000110111000011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11101100000 #b1100011100000110100110101001111011111100000000101011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 15 113) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float2) ?float6)))
; FINAL ASSERT
(assert (or (or (or ?bool12 (and ?bool11 ?bool13) ?bool13) ?bool14) (or ?bool11 ?bool12 (or ?bool12))))
(check-sat)


-- iteration 522 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float6) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ((_ to_fp 11 53) RTN ?float7) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 11 53) RTP ?float7) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool12)))
(check-sat)


-- iteration 523 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ?float3 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float6 ((_ to_fp 8 24) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTP ?float8) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3)))
; FINAL ASSERT
(assert (or (and ?bool12) (or ?bool15 (and ?bool11 (or ?bool12 ?bool12) (or ?bool14 ?bool15)) (and (and ?bool12) (and ?bool13))) (or (and ?bool15 ?bool13 (and ?bool11 ?bool11 ?bool15)) (or ?bool12 (or ?bool11 ?bool15) (and ?bool13 ?bool12)))))
(check-sat)


-- iteration 524 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float3 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float8 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTZ ?float10) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12 ?bool11))
(check-sat)


-- iteration 525 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or (and (and (and ?bool12 ?bool14) ?bool14) (or ?bool12) (or (or ?bool15 ?bool13) ?bool13 (and ?bool11 ?bool15)))))
(check-sat)


-- iteration 526 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01001 #b0011000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011010100011011 #b1010110011010001100101110000101001101011100010000110101111101100110011011110110101000001111111010111010000100110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTN ?float5) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (and ?bool11 (and (and ?bool12 (and ?bool15 ?bool12))) ?bool11))
(check-sat)


-- iteration 527 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 15 113) RTZ ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTP ?float9) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool12 (or (or ?bool13 ?bool14) ?bool11 ?bool13) ?bool11)))
(check-sat)


-- iteration 528 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110010101100010 #b0110111110000101011011110111110101100101000001010010100110101101111100100011000110001110010110100001000100000011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTZ ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float10)))
; FINAL ASSERT
(assert (and (and ?bool14) (or ?bool12 (or (or ?bool13 ?bool11) (or ?bool12 ?bool11 ?bool12)))))
(check-sat)


-- iteration 529 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110011111001011 #b1010011110000100101010110010100010010100000111001010010010011100011101111111010010001101001101000010111111111100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00110 #b0010011001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RNE ?float3) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 530 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011111110111111 #b1011101000101001111000000110001010000001010110001001100011000010110110011110010001111011010101011000101010010001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float5 ((_ to_fp 15 113) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool15)))
(check-sat)


-- iteration 531 --
(declare-fun f0 (Float128 Float16 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float6 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RNE ?float4) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 8 24) RTP ?float2) ?float3)))
; FINAL ASSERT
(assert (or ?bool11 ?bool14))
(check-sat)


-- iteration 532 --
(declare-fun f0 (Float128 Float64 Float128) Float32)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTP ?float2 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RTP ?float10) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool13) ?bool14))
(check-sat)


-- iteration 533 --
(declare-fun f0 (Float64 Float64 Float128) Float32)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float3 ?float3 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float5) ?float3 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 11 53) RTN ?float7) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 11 53) RNE ?float4) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RTZ ?float6) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float5))))
; FINAL ASSERT
(assert (and (and (and (and ?bool14 ?bool15 ?bool12) ?bool14) (and ?bool15) ?bool13) (or ?bool15 ?bool15 (or ?bool14 ?bool12 (and ?bool11 ?bool13))) ?bool15))
(check-sat)


-- iteration 534 --
(declare-fun f0 (Float128 Float64 Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ((_ to_fp 8 24) RTP ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float2 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 5 11) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RNE ?float9) ?float2)))
; FINAL ASSERT
(assert (or (and (or (or ?bool13 ?bool14) (or ?bool11 ?bool12 ?bool11))) (or ?bool14 (and (and ?bool14 ?bool15 ?bool15)) (or ?bool11)) ?bool14))
(check-sat)


-- iteration 535 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float5 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (or ?bool12 ?bool11))
(check-sat)


-- iteration 536 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ?float7 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 8 24) RTP ?float2) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float6)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 537 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float9 ((_ to_fp 8 24) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTP ?float5) ?float4)))
; FINAL ASSERT
(assert (and ?bool15 (or (and ?bool15 (and ?bool11 ?bool12 ?bool14)) ?bool12 ?bool13)))
(check-sat)


-- iteration 538 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01011 #b1101001101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTN ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTN ?float4) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 15 113) RTN ?float4) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ?float7 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ?float8 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float8) ?float5 ((_ to_fp 11 53) RTZ ?float10))))
; FINAL ASSERT
(assert (and ?bool12 (and (and (and ?bool11))) (or (and ?bool15) ?bool11 ?bool15)))
(check-sat)


-- iteration 539 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float5 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool14 ?bool14 (and (or ?bool14 ?bool13 ?bool13) ?bool12 (or ?bool14 ?bool15)))))
(check-sat)


-- iteration 540 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11111 #b1100111010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float8 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and (and (and ?bool15 ?bool11) (and ?bool13 (and ?bool12 ?bool13) (or ?bool15 ?bool11 ?bool15)) (and ?bool15)) (and ?bool14)))
(check-sat)


-- iteration 541 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float2 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 5 11) RNE ?float5) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RTN ?float8) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 542 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11001010 #b01101100101011001110000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ((_ to_fp 8 24) RTP ?float3) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ?float6 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float2 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ?float5 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or ?bool12 (and (or ?bool11) ?bool14 ?bool11) ?bool11))
(check-sat)


-- iteration 543 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00011001011 #b1000111100110011101111111111110010101001010110010100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 11 53) RNE ?float2) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RTZ ?float5) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTN ?float2) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12 ?bool13))
(check-sat)


-- iteration 544 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00010000 #b00000110010000010011001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ?float2)))
; FINAL ASSERT
(assert (and ?bool14 (or (and ?bool11 ?bool11) ?bool12 ?bool15) ?bool12))
(check-sat)


-- iteration 545 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float4) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTN ?float5) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RTN ?float6) ?float8)))
; FINAL ASSERT
(assert (and (or ?bool13) (or ?bool12 ?bool12)))
(check-sat)


-- iteration 546 --
(declare-fun f0 (Float32 Float16 Float32) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01010000 #b00001101101111010110101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 15 113) RTP ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ((_ to_fp 8 24) RTP ?float3) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 8 24) RNE ?float2))))
; FINAL ASSERT
(assert (or (or (and ?bool15 ?bool15) ?bool11 (and ?bool15 (and ?bool14 ?bool12 ?bool11) (or ?bool11))) (or (or ?bool11) ?bool12 ?bool14) (and ?bool12 ?bool11 ?bool14)))
(check-sat)


-- iteration 547 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11001001 #b00100001111011000111000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ?float5 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 15 113) RTZ ?float5) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float6 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RNE ?float7) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float10))))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool15)))
(check-sat)


-- iteration 548 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11001011 #b01000100000000010110110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTP ?float2) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float3 ((_ to_fp 5 11) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RNE ?float9) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float6)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 549 --
(declare-fun f0 (Float32 Float16 Float16) Float64)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01000010 #b11011001110001000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ?float5 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float5 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTN ?float6) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float5) ?float5 ?float3)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool14 (and (or ?bool14 ?bool12) (or ?bool11 ?bool15 ?bool14))) (and ?bool13 ?bool14)))
(check-sat)


-- iteration 550 --
(declare-fun f0 (Float128 Float128 Float32) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float6) ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ((_ to_fp 8 24) RTZ ?float4) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float4) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTZ ?float4) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 5 11) RTZ ?float7) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or ?bool13 ?bool14))
(check-sat)


-- iteration 551 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000011000111101 #b0101111111111101011110101110110010000110011011110111110101100011101111111000001011000011110101010100000110010010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float2 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float5 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float9)))
; FINAL ASSERT
(assert (or (and (and (and ?bool14))) ?bool11 ?bool14))
(check-sat)


-- iteration 552 --
(declare-fun f0 (Float16 Float16 Float16) Float32)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110101011110010 #b0010111001000000110111111011010010101000101100001000001000100111100001100010011011000101000001010011001001011111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float4 ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float3 ((_ to_fp 11 53) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ((_ to_fp 11 53) RTZ ?float8))))
; FINAL ASSERT
(assert (and (or (and ?bool11)) ?bool15 (or (or ?bool14 (or ?bool11) ?bool14) (or ?bool13 ?bool13) (and ?bool12))))
(check-sat)


-- iteration 553 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10100 #b0111100010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ?float5 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 11 53) RNE ?float6))))
; FINAL ASSERT
(assert (or (or (and ?bool12) ?bool11) (and (and (or ?bool14 ?bool14 ?bool13) (and ?bool12 ?bool12) (or ?bool14 ?bool12 ?bool11)) (and (or ?bool13 ?bool11) ?bool15 ?bool11) ?bool11)))
(check-sat)


-- iteration 554 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11010010 #b11111101000100001011011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 15 113) RTP ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool15 ?bool15)))
(check-sat)


-- iteration 555 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ((_ to_fp 15 113) RTP ?float7))))
; FINAL ASSERT
(assert (or (and (or (or ?bool14 ?bool13 ?bool11) (or ?bool15 ?bool15 ?bool11))) ?bool14 ?bool14))
(check-sat)


-- iteration 556 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01110100101 #b0011111001000011001010100111010111101110011001000111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11000011001 #b1100011111101101110001111111000011001000001001100010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float5 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 557 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float5 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTZ ?float4) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ?float4 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float8) ?float2 ((_ to_fp 15 113) RTP ?float4))))
; FINAL ASSERT
(assert (or ?bool15 ?bool12))
(check-sat)


-- iteration 558 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 5 11) RTN ?float2) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 15 113) RNE ?float5))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 559 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01001 #b1010101000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10111101 #b00111111111000001001101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 15 113) RTN ?float8) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ((_ to_fp 8 24) RTP ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 11 53) RTP ?float5) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or (and ?bool14)))
(check-sat)


-- iteration 560 --
(declare-fun f0 (Float16 Float16 Float16) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101101000011001 #b1000101101110001110110000010100001100111111010101000101110110101000011111100001010010001110000011100111000011000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110100001000111 #b0110110010011000100111011111001101110011110001010011110111001101111000110010101001100011110000111000101011110101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float2 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float2 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float5 ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (and (and (and (and ?bool11)) (or (or ?bool12 ?bool11) ?bool15))))
(check-sat)


-- iteration 561 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float6 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float3 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float7)))
; FINAL ASSERT
(assert (and (and (or ?bool13 ?bool13) ?bool12 (or ?bool14 ?bool14))))
(check-sat)


-- iteration 562 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float7 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float2 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTP ?float5) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool11) (or ?bool12 (or (or ?bool11) ?bool12)) ?bool13))
(check-sat)


-- iteration 563 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTP ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 8 24) RTZ ?float9))))
; FINAL ASSERT
(assert (and ?bool12 ?bool11))
(check-sat)


-- iteration 564 --
(declare-fun f0 (Float16 Float128 Float16) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000110 #b01110000000000110011110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ?float2 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTN ?float2) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float6 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ((_ to_fp 5 11) RTP ?float6) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float10) ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (or (and ?bool13))))
(check-sat)


-- iteration 565 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 5 11) RTN ?float7) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ((_ to_fp 11 53) RTN ?float4) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTZ ?float10) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RTP ?float6))))
; FINAL ASSERT
(assert (and ?bool15 (and (and (or ?bool15) (or ?bool11 ?bool15) ?bool13))))
(check-sat)


-- iteration 566 --
(declare-fun f0 (Float16 Float32 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float7 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RNE ?float9) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 567 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RTP ?float5) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ?float7 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float6) ?float10 ((_ to_fp 15 113) RTP ?float10))))
; FINAL ASSERT
(assert (or ?bool15 (or (or (or ?bool14 ?bool11 ?bool14) (and ?bool13) ?bool14))))
(check-sat)


-- iteration 568 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01001100 #b11111011111011011000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float4 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool12))
(check-sat)


-- iteration 569 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b1000001110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float6 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTZ ?float2) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 15 113) RTP ?float7))))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool11 ?bool15) ?bool14))
(check-sat)


-- iteration 570 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10010 #b0000011111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float2 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float2 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RTN ?float7) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or ?bool11 (and ?bool11)))
(check-sat)


-- iteration 571 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10011001 #b01001001001011111100101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTN ?float6) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 572 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ((_ to_fp 15 113) RTZ ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RTZ ?float4) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RNE ?float6) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and ?bool12 (or (and (or ?bool13 ?bool15 ?bool11) ?bool11 (and ?bool13 ?bool13)) (or (and ?bool11 ?bool15 ?bool14)) (and ?bool11))))
(check-sat)


-- iteration 573 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ((_ to_fp 8 24) RTN ?float2) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ((_ to_fp 8 24) RTZ ?float10))))
; FINAL ASSERT
(assert (and (or ?bool11) (or (and (or ?bool14) (and ?bool11)))))
(check-sat)


-- iteration 574 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 8 24) RTN ?float3) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ?float8 ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ?float9 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ?float6 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ((_ to_fp 11 53) RTN ?float10))))
; FINAL ASSERT
(assert (or ?bool11 ?bool12))
(check-sat)


-- iteration 575 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float10))))
; FINAL ASSERT
(assert (or (or (or ?bool15) (and ?bool11 ?bool13 (and ?bool13 ?bool11)) ?bool12) ?bool15 (or (or (or ?bool15)) (or ?bool11 (and ?bool13 ?bool12 ?bool12)))))
(check-sat)


-- iteration 576 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 15 113) RTZ ?float2) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTP ?float3) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ?float8)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool13)))
(check-sat)


-- iteration 577 --
(declare-fun f0 (Float128 Float32 Float16) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float6 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float6 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (and (and (and ?bool11) (or ?bool13) (and ?bool12)) (and (and ?bool12 ?bool14 ?bool12) ?bool13)) (and ?bool15 ?bool13 (or (and ?bool12)))))
(check-sat)


-- iteration 578 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ?float4 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTN ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTZ ?float9) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RNE ?float3) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15 (or (or ?bool15))))
(check-sat)


-- iteration 579 --
(declare-fun f0 (Float128 Float128 Float128) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00101101 #b10110100101001011001110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101001010100001 #b0001010001011100011010101110010111001010111100011000111000011110110100011001100101110100011011010001110110010000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 15 113) RTZ ?float7) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTZ ?float7) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTN ?float8) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (and (or ?bool11) ?bool12)))
(check-sat)


-- iteration 580 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 5 11) RTP ?float2) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool11 (or ?bool12))))
(check-sat)


-- iteration 581 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RNE ?float6) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ((_ to_fp 5 11) RTP ?float7))))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 582 --
(declare-fun f0 (Float16 Float128 Float16) Float128)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float4 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float2 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 15 113) RTN ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (and (and (or (or ?bool12) (and ?bool12)) (and ?bool11 (or ?bool15) (or ?bool14 ?bool13)) (or (or ?bool13 ?bool11) (and ?bool13))) (and (and (or ?bool14) ?bool11 ?bool12)) ?bool14))
(check-sat)


-- iteration 583 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01000111000 #b1101101101011010000110001000100011111010001010000110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float2 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 584 --
(declare-fun f0 (Float64 Float64 Float64) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float5 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float4 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float2 ((_ to_fp 5 11) RTP ?float10))))
; FINAL ASSERT
(assert (and (or ?bool11) ?bool12))
(check-sat)


-- iteration 585 --
(declare-fun f0 (Float16 Float128 Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100001101001001 #b0101101010011001101011000111010100111110011100100101000101100000000101001010100110101001011101001101000101000110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10001001110 #b0111010011001100000110101100000001111010011001000011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 11 53) RTN ?float3) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ?float4 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float5 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 8 24) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and (or ?bool14)))
(check-sat)


-- iteration 586 --
(declare-fun f0 (Float16 Float32 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110000111011110 #b0100011011101110011011000110000101110100110100011001010111001010000010010100011000100010001001001010011101010001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float3) ?float3 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ?float2 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 8 24) RNE ?float5) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 5 11) RTP ?float7) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or (or (and (and ?bool11) (and ?bool14)) (and ?bool13) (or ?bool15 (or ?bool13 ?bool14) ?bool11)) ?bool11))
(check-sat)


-- iteration 587 --
(declare-fun f0 (Float128 Float64 Float32) Float16)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float4 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and (or (and (and ?bool14 ?bool13) ?bool15 (or ?bool14 ?bool14))) (or (or ?bool12 ?bool14 (and ?bool13 ?bool11))) (or ?bool13)))
(check-sat)


-- iteration 588 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float8) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 589 --
(declare-fun f0 (Float64 Float16 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01101101 #b10010110000001111010101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RNE ?float6) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float7) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTP ?float7) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RNE ?float4) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or (and (and (or ?bool15 ?bool13)) ?bool14 (or (or ?bool12))) ?bool12))
(check-sat)


-- iteration 590 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ((_ to_fp 15 113) RTP ?float3) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 591 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float8) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 5 11) RTP ?float8) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (and (and ?bool11 ?bool12 ?bool11) (and (and ?bool14 ?bool11 ?bool13)))))
(check-sat)


-- iteration 592 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11100 #b1011010111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10010110 #b10110011101001011100110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float3 ((_ to_fp 5 11) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTZ ?float8) ?float9)))
; FINAL ASSERT
(assert (or (and ?bool13) ?bool11 (or (and ?bool11 (and ?bool15 ?bool11 ?bool13)) ?bool14 (and ?bool15))))
(check-sat)


-- iteration 593 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float2 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ?float6 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 594 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float6 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool14)))
(check-sat)


-- iteration 595 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ((_ to_fp 5 11) RTN ?float7) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float2 ((_ to_fp 5 11) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8))))
; FINAL ASSERT
(assert (or ?bool13 (and (and ?bool14 (and ?bool15)) (or ?bool12 (or ?bool14) (or ?bool12 ?bool13)) ?bool14)))
(check-sat)


-- iteration 596 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b111000110110001 #b1000001110100011010101001001000101001001010010100101100011101010100101111110101100110011011010101101110010101001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float2 ((_ to_fp 15 113) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTN ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTN ?float7) ?float10)))
; FINAL ASSERT
(assert (or (or ?bool14 (or ?bool14))))
(check-sat)


-- iteration 597 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 15 113) RTP ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float3 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float5) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float7) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 11 53) RTN ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool11 (or (or ?bool15 ?bool15) ?bool15))))
(check-sat)


-- iteration 598 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float6 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RTN ?float2) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RNE ?float10))))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 599 --
(declare-fun f0 (Float32 Float32 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10000001111 #b1001110000111011010110010111000000110001101100000101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float4 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTP ?float5) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 600 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTN ?float8) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 15 113) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RNE ?float9) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTN ?float5) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RNE ?float6) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float4 ?float6)))
; FINAL ASSERT
(assert (and (or (or (or ?bool11 ?bool14 ?bool14)) (and ?bool14 ?bool15)) ?bool12))
(check-sat)


-- iteration 601 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00101 #b0000110101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float7 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RTP ?float2) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool12)))
(check-sat)


-- iteration 602 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float6 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 5 11) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 5 11) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool12 (or (and (and ?bool13 ?bool14) ?bool14) (and ?bool11 ?bool15) (and ?bool14 (or ?bool13))) ?bool13))
(check-sat)


-- iteration 603 --
(declare-fun f0 (Float16 Float32 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01110101010 #b0111000000100111010000001110011010110010000111000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTN ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 15 113) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool13 (and (and ?bool12))) ?bool12))
(check-sat)


-- iteration 604 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTN ?float7) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ?float6)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 605 --
(declare-fun f0 (Float16 Float128 Float16) Float64)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 11 53) RTP ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 15 113) RTP ?float3) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTN ?float8) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ((_ to_fp 8 24) RTN ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RTZ ?float4) ?float10)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 606 --
(declare-fun f0 (Float128 Float16 Float128) Float128)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 5 11) RNE ?float3) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTN ?float7) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTZ ?float2) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (or ?bool14)))
(check-sat)


-- iteration 607 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ((_ to_fp 5 11) RNE ?float2))))
; FINAL ASSERT
(assert (or (or ?bool13) ?bool11 ?bool11))
(check-sat)


-- iteration 608 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01110110001 #b0000011010110000100000111101101011000010011111011010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float4 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float8) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float8 ((_ to_fp 15 113) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 609 --
(declare-fun f0 (Float64 Float64 Float32) Float64)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float6 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or (or (and ?bool14 (and ?bool14 ?bool14) ?bool11) (or (and ?bool12) ?bool11)) (or ?bool11)))
(check-sat)


-- iteration 610 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RNE ?float3) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ?float10 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float7)))
; FINAL ASSERT
(assert (or (or ?bool12 (or (or ?bool12 ?bool15 ?bool15) (or ?bool12 ?bool15 ?bool13) (and ?bool14)) ?bool14) ?bool14 (or ?bool12 ?bool15 (and (and ?bool13) (and ?bool15 ?bool15 ?bool14) ?bool14))))
(check-sat)


-- iteration 611 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10001 #b1111000110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float8 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 5 11) RTP ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12))
(check-sat)


-- iteration 612 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 15 113) RTP ?float6) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTP ?float2) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTZ ?float8) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or (or (or ?bool11 ?bool15 ?bool11) ?bool12)))
(check-sat)


-- iteration 613 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float2 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool14)))
(check-sat)


-- iteration 614 --
(declare-fun f0 (Float64 Float16 Float32) Float32)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b010011011000111 #b1011101111011100100011010111011110100001011110000010011011011011010010101110011101001010010111100011100011100111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ?float3 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ((_ to_fp 8 24) RTZ ?float2) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ?float5 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ?float9 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ?float6 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (or ?bool13 (and (or ?bool11 ?bool11)) ?bool13)))
(check-sat)


-- iteration 615 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float3 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ((_ to_fp 15 113) RTZ ?float8))))
; FINAL ASSERT
(assert (or (or (and ?bool15) ?bool15) ?bool13))
(check-sat)


-- iteration 616 --
(declare-fun f0 (Float32 Float16 Float64) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 5 11) RTN ?float4) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float4) ?float6 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 5 11) RTP ?float7) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTZ ?float4) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 617 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11001110 #b01001001100100110101001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float2 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float7 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTN ?float7) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (and (or ?bool15) ?bool11 ?bool13) ?bool15 ?bool15))
(check-sat)


-- iteration 618 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ?float6 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTP ?float6) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RNE ?float9) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13))
(check-sat)


-- iteration 619 --
(declare-fun f0 (Float16 Float128 Float64) Float32)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000111110111100 #b1011011101101111101100101111101010010101010001000011001010010001111111111000100000101100111011101101000111001111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float4) ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float10) ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 5 11) RTN ?float7) ?float4)))
; FINAL ASSERT
(assert (and (and (or (or ?bool15)) (and (and ?bool15)) ?bool13)))
(check-sat)


-- iteration 620 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float6 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float9)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool13 ?bool15)))
(check-sat)


-- iteration 621 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ((_ to_fp 8 24) RTP ?float3) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and (and (or (or ?bool11) ?bool13 (or ?bool14 ?bool15 ?bool14)) ?bool12 (and (and ?bool14))) ?bool14))
(check-sat)


-- iteration 622 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTN ?float7 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float4 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float5 ((_ to_fp 8 24) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTN ?float10) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 623 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float32 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 5 11) RNE ?float6) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float7 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float8 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and (and (or (or ?bool14) ?bool12 ?bool13) ?bool12 ?bool13) (and (and (and ?bool11) ?bool11) (or ?bool15 ?bool14))))
(check-sat)


-- iteration 624 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11100 #b0000101110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ?float7 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float5)))
; FINAL ASSERT
(assert (or ?bool11 ?bool15))
(check-sat)


-- iteration 625 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11000001 #b00111010011011011011111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTZ ?float4) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (and ?bool15 (or (and (and ?bool15 ?bool14 ?bool12))) ?bool12))
(check-sat)


-- iteration 626 --
(declare-fun f0 (Float64 Float128 Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ?float2 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 15 113) RNE ?float7) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float10)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14))
(check-sat)


-- iteration 627 --
(declare-fun f0 (Float64 Float64 Float16) Float64)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11001100 #b01110100110011111010000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float3 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 11 53) RTN ?float9) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RNE ?float6) ?float4)))
; FINAL ASSERT
(assert (or ?bool12 ?bool11 ?bool12))
(check-sat)


-- iteration 628 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11000011 #b11111000000100000100011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float4 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (and ?bool15) (or (and ?bool12 ?bool14 (or ?bool13 ?bool14)) ?bool15 (or ?bool15 (or ?bool11))) ?bool14))
(check-sat)


-- iteration 629 --
(declare-fun f0 (Float64 Float32 Float16) Float64)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTN ?float6) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float8) ?float5 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 8 24) RTZ ?float2) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTP ?float7) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 8 24) RTN ?float4) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float2)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15))
(check-sat)


-- iteration 630 --
(declare-fun f0 (Float32 Float16 Float128) Float16)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 5 11) RNE ?float8) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 5 11) RNE ?float10) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float2) ?float2 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float9) ?float2 ?float6)))
; FINAL ASSERT
(assert (or (and (and (or ?bool11) (and ?bool13 ?bool14 ?bool12))) ?bool15))
(check-sat)


-- iteration 631 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float6 ((_ to_fp 5 11) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float8 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ((_ to_fp 5 11) RTN ?float2))))
; FINAL ASSERT
(assert (or ?bool12 ?bool15))
(check-sat)


-- iteration 632 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 15 113) RTN ?float3) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float10) ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 8 24) RTP ?float3))))
; FINAL ASSERT
(assert (and (or (or (or ?bool14 ?bool13) ?bool11 (or ?bool12 ?bool11 ?bool14)) ?bool14 ?bool11) ?bool13 (and ?bool14 (and (or ?bool12) (and ?bool12 ?bool12 ?bool15)))))
(check-sat)


-- iteration 633 --
(declare-fun f0 (Float32 Float32 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010011110000010 #b0111111001001110011001001111100000101001000110001101001110010100110010110101110100010110100111111101010001110100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float4 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ((_ to_fp 5 11) RTP ?float5) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float4 ((_ to_fp 8 24) RTN ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ((_ to_fp 8 24) RNE ?float9))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 634 --
(declare-fun f0 (Float128 Float128 Float128) Float64)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool14 ?bool14) (or ?bool12) (or (or ?bool14) ?bool15)))
(check-sat)


-- iteration 635 --
(declare-fun f0 (Float128 Float32 Float16) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010100100111010 #b0000110001000111010110000010011111111010000101100010011000000000001110001000011101101001110010100111000100001001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ((_ to_fp 11 53) RNE ?float5) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 636 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11100010 #b11100101011111110110000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTN ?float7 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float6 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float7 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool15 ?bool11))
(check-sat)


-- iteration 637 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float8 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTP ?float7) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 638 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01000000 #b01000011011001101001100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11010011 #b01110010000000010100000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTZ ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float10) ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15))
(check-sat)


-- iteration 639 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float2 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float6 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RNE ?float7) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTP ?float2) ?float8)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool14) (and ?bool14 (and ?bool12 (or ?bool12 ?bool12 ?bool15) ?bool12) (or (and ?bool12 ?bool15)))))
(check-sat)


-- iteration 640 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float2 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTP ?float5) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13))
(check-sat)


-- iteration 641 --
(declare-fun f0 (Float16 Float16 Float16) Float64)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float5 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ((_ to_fp 8 24) RNE ?float3) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 8 24) RTN ?float5) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float10) ?float7 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTP ?float9) ?float3)))
; FINAL ASSERT
(assert (and (or ?bool14) (or (or (or ?bool12 ?bool12)) (and ?bool12 (or ?bool11 ?bool13 ?bool13) ?bool12) (and (or ?bool14 ?bool15) (or ?bool13 ?bool12 ?bool11) ?bool15))))
(check-sat)


-- iteration 642 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110100011111101 #b1010010001100111001110110011011111101111101000001110111100011000010001111100110111100110010101111001101001100110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTP ?float7) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RNE ?float5) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float9)))
; FINAL ASSERT
(assert (or (and ?bool11 (or (or ?bool15 ?bool13)))))
(check-sat)


-- iteration 643 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float4 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float6 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float9))))
; FINAL ASSERT
(assert (and ?bool14 ?bool13 ?bool11))
(check-sat)


-- iteration 644 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01110001100 #b1001101100101100010011100011100101010100001000101010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11110 #b0010110000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float4 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float8)))
; FINAL ASSERT
(assert (and ?bool15 (or (and (and ?bool11 ?bool11 ?bool12) ?bool13 ?bool14) (or ?bool11))))
(check-sat)


-- iteration 645 --
(declare-fun f0 (Float128 Float128 Float32) Float32)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00101000011 #b1110011111110101101001100101111110110100000101001100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ((_ to_fp 11 53) RTP ?float2))))
; FINAL ASSERT
(assert (and (and (or ?bool12 (and ?bool15 ?bool11) (or ?bool12 ?bool13 ?bool15)) ?bool15) ?bool14))
(check-sat)


-- iteration 646 --
(declare-fun f0 (Float16 Float128) Float64)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float8 ((_ to_fp 11 53) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 5 11) RTN ?float8))))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool15 ?bool13 ?bool12) ?bool15))
(check-sat)


-- iteration 647 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10011010000 #b1001000111101011010101110100111011011100011011000101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float4 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 8 24) RTN ?float8) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTP ?float9) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and ?bool11 (and (or (or ?bool14 ?bool13) (or ?bool13)) ?bool12)))
(check-sat)


-- iteration 648 --
(declare-fun f0 (Float128 Float32 Float64) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01010 #b0100101000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ((_ to_fp 11 53) RNE ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float7) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool13 (or (and (or ?bool15 ?bool14) ?bool13 ?bool11)) (or ?bool11 ?bool11)))
(check-sat)


-- iteration 649 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101011000010111 #b1110000001100101100100100110100011100101111011011111101110010111100101100000000111000011010001100111011000111111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 11 53) RTZ ?float6) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ((_ to_fp 15 113) RNE ?float4) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float5))))
; FINAL ASSERT
(assert (and ?bool13 ?bool12))
(check-sat)


-- iteration 650 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float6 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float9 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and (or ?bool11) (or (and (or ?bool15) ?bool11))))
(check-sat)


-- iteration 651 --
(declare-fun f0 (Float32 Float64 Float64) Float128)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float3) ?float5 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float7) ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float5) ?float4 ((_ to_fp 11 53) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and (or (and (and ?bool11) (or ?bool11 ?bool13 ?bool13)) ?bool11) ?bool12))
(check-sat)


-- iteration 652 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float5 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 15 113) RNE ?float7))))
; FINAL ASSERT
(assert (or ?bool12 ?bool11 ?bool13))
(check-sat)


-- iteration 653 --
(declare-fun f0 (Float16 Float32 Float16) Float64)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ?float2 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ?float6 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or (and (and ?bool12))))
(check-sat)


-- iteration 654 --
(declare-fun f0 (Float128 Float16 Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float6 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTN ?float4) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool15 (or ?bool15 ?bool11) ?bool14) (or (and (or ?bool13 ?bool11) (and ?bool12 ?bool13) (and ?bool11 ?bool12)) ?bool11)))
(check-sat)


-- iteration 655 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ?float4 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float5) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTP ?float4) ?float9)))
; FINAL ASSERT
(assert (and (or ?bool11) ?bool14 (or (and ?bool11 ?bool14 (and ?bool13 ?bool14 ?bool13)))))
(check-sat)


-- iteration 656 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float2 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float4))))
; FINAL ASSERT
(assert (or ?bool15 ?bool14))
(check-sat)


-- iteration 657 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001010000011000 #b0010111001101100101100100010011000000000111000111101001100110010101001011001101000111010010010100110011101111110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float4 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float6 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 11 53) RTP ?float5) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTP ?float4) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool15 (and ?bool12 (or ?bool11 ?bool13 ?bool13) ?bool12)) ?bool14))
(check-sat)


-- iteration 658 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float3 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ((_ to_fp 15 113) RNE ?float6))))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 659 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01101011000 #b0001010010001110000100101010110111110000010010110111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float4 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTP ?float2) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or (or ?bool14 (and (or ?bool11 ?bool14 ?bool11) ?bool13 ?bool15))))
(check-sat)


-- iteration 660 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00111 #b0001110100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTZ ?float3) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ((_ to_fp 5 11) RNE ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTN ?float2) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float6))))
; FINAL ASSERT
(assert (and (and (or (or ?bool13 ?bool12) (and ?bool14 ?bool12 ?bool12) ?bool15)) (or (and ?bool13) (and ?bool14))))
(check-sat)


-- iteration 661 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01100010000 #b0000100010011001101110001010011100101111110011001001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11001111 #b01100100001110110001100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (and (or (and ?bool11 (or ?bool13) ?bool12))))
(check-sat)


-- iteration 662 --
(declare-fun f0 (Float32 Float128 Float32) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 8 24) RTN ?float4) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float9 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and (or (and (or ?bool13 ?bool15) ?bool14) ?bool12 ?bool12) ?bool11))
(check-sat)


-- iteration 663 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTZ ?float3) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float4)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 664 --
(declare-fun f0 (Float128 Float16 Float16) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b010011011000101 #b0111010001011110111010100011001011010101111010010100101100001101011010001011100010010011100001011000011100010000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 8 24) RNE ?float4) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float7) ?float6 ((_ to_fp 5 11) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RTZ ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool11 (or ?bool12 (and ?bool15 ?bool14 ?bool14)) ?bool12))
(check-sat)


-- iteration 665 --
(declare-fun f0 (Float64 Float32 Float32) Float64)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b111010101101100 #b1100011011000011100111101110010000111111000100000010011100110111010111010001010010111011011010011010100101001010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTP ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float3 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 8 24) RTP ?float4) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or (or (and (or ?bool11) (and ?bool13 ?bool15 ?bool12)) ?bool13 ?bool15) (or (or ?bool11 (and ?bool12 ?bool14 ?bool11)) (and (or ?bool13 ?bool11 ?bool14) (or ?bool14) (and ?bool15 ?bool11)))))
(check-sat)


-- iteration 666 --
(declare-fun f0 (Float128 Float128 Float16) Float64)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float5 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float4 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 11 53) RTN ?float2))))
; FINAL ASSERT
(assert (and ?bool15 ?bool12 ?bool12))
(check-sat)


-- iteration 667 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTZ ?float5) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 668 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 8 24) RTN ?float4) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11 ?bool12))
(check-sat)


-- iteration 669 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float8) ?float6 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RNE ?float3) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTP ?float2) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float4 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15 (and ?bool13 ?bool15)))
(check-sat)


-- iteration 670 --
(declare-fun f0 (Float128 Float32 Float128) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool12) ?bool11))
(check-sat)


-- iteration 671 --
(declare-fun f0 (Float16 Float16 Float128) Float64)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ?float10 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (or (and (and ?bool11 (and ?bool15) ?bool14) ?bool14) ?bool14 (or ?bool11 ?bool12 ?bool12)))
(check-sat)


-- iteration 672 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float2 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float7 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float2)))
; FINAL ASSERT
(assert (or ?bool12 ?bool13))
(check-sat)


-- iteration 673 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float6 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float3 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RTZ ?float5) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTP ?float8) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RNE ?float9) ?float7)))
; FINAL ASSERT
(assert (or (and (and ?bool14 ?bool14 ?bool12))))
(check-sat)


-- iteration 674 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTP ?float4 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float6 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float5 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float7)))
; FINAL ASSERT
(assert (or ?bool15 ?bool15))
(check-sat)


-- iteration 675 --
(declare-fun f0 (Float128 Float32 Float16) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11101111000 #b1100011000111011110001110110010001000001100110100001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 15 113) RTZ ?float6) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 5 11) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTZ ?float8) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ((_ to_fp 15 113) RTP ?float4))))
; FINAL ASSERT
(assert (and (and (and (or ?bool14)) ?bool15)))
(check-sat)


-- iteration 676 --
(declare-fun f0 (Float32 Float32 Float32) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RTZ ?float5) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or ?bool11 ?bool11 (or ?bool12)))
(check-sat)


-- iteration 677 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool13 (or (or ?bool14) ?bool15)) ?bool11 (and ?bool12 ?bool13)))
(check-sat)


-- iteration 678 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTN ?float4) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ((_ to_fp 11 53) RNE ?float8))))
; FINAL ASSERT
(assert (or (and (and (and ?bool13 ?bool15 ?bool11)) (and ?bool12 (or ?bool15) (or ?bool15 ?bool13 ?bool11)) (or (or ?bool12 ?bool13 ?bool11) (or ?bool14 ?bool12)))))
(check-sat)


-- iteration 679 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 5 11) RTN ?float5) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 15 113) RTZ ?float3) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 680 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 5 11) RTZ ?float2) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RNE ?float5) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ((_ to_fp 5 11) RTZ ?float7))))
; FINAL ASSERT
(assert (and ?bool14 (and ?bool15)))
(check-sat)


-- iteration 681 --
(declare-fun f0 (Float32 Float128 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTZ ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTZ ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float3))))
; FINAL ASSERT
(assert (or (and (or (or ?bool12 ?bool15) ?bool14) (and (or ?bool12 ?bool13))) ?bool14))
(check-sat)


-- iteration 682 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float3 ((_ to_fp 8 24) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTZ ?float3))))
; FINAL ASSERT
(assert (and ?bool12 ?bool12 ?bool13))
(check-sat)


-- iteration 683 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float2) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float8) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float6)))
; FINAL ASSERT
(assert (and (and (and ?bool12 ?bool12 ?bool12) (or ?bool15 ?bool15) ?bool13) (or (and ?bool13 (or ?bool11 ?bool11))) ?bool12))
(check-sat)


-- iteration 684 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float8) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (or ?bool13 (and ?bool11 (and ?bool12) (or ?bool11)) ?bool11) ?bool15))
(check-sat)


-- iteration 685 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RNE ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float4 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ((_ to_fp 5 11) RTP ?float2))))
; FINAL ASSERT
(assert (and (or ?bool12) ?bool12 ?bool14))
(check-sat)


-- iteration 686 --
(declare-fun f0 (Float128 Float32 Float16) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float2 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 15 113) RTP ?float3) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float5 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 15 113) RTP ?float3) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 15 113) RNE ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and ?bool11 (and (and (and ?bool13))) ?bool13))
(check-sat)


-- iteration 687 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11010 #b1000001001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 15 113) RNE ?float5) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTP ?float8) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool12 ?bool11 ?bool12) ?bool12))
(check-sat)


-- iteration 688 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01001011 #b01001111110010000110100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ?float2)))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool13 (and ?bool14))))
(check-sat)


-- iteration 689 --
(declare-fun f0 (Float16 Float128 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTZ ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 8 24) RTP ?float7) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ((_ to_fp 8 24) RTZ ?float5) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RNE ?float3) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (and ?bool13 (and (or ?bool11 ?bool11) ?bool12 (or ?bool14 ?bool15))))
(check-sat)


-- iteration 690 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b111100110101100 #b1000110101111100100100011110001110111110001100111000100001110100011110101011101001100001101110000101100100000110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ?float5 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float6))))
; FINAL ASSERT
(assert (or (or (or ?bool11 (or ?bool15 ?bool13) ?bool13))))
(check-sat)


-- iteration 691 --
(declare-fun f0 (Float16 Float32 Float128) Float64)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b111110010101101 #b1000001100010101011011011101011111001010010100000111100111110111010100000001101000111100110110000110001011100111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11001 #b1101010000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float2 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 15 113) RNE ?float3) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (or ?bool11) ?bool13))
(check-sat)


-- iteration 692 --
(declare-fun f0 (Float32 Float64 Float64) Float32)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float6) ?float3 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (or (or (and ?bool11) ?bool13 ?bool11)))
(check-sat)


-- iteration 693 --
(declare-fun f0 (Float16 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ((_ to_fp 8 24) RTZ ?float6) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float6 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float7) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (and ?bool11 ?bool14))
(check-sat)


-- iteration 694 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b111001101101011 #b0001110010111011111111010011000000000111001111010011100010111100010110110000110100101100000100001101001110101010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ((_ to_fp 5 11) RTZ ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float2) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float8 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTN ?float5) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float6)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool12 (or (or ?bool12))) ?bool12))
(check-sat)


-- iteration 695 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01110 #b1011011110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 5 11) RTN ?float6) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTN ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float5))))
; FINAL ASSERT
(assert (and (and (or ?bool15) ?bool14 ?bool13) (and (and ?bool11 (and ?bool11 ?bool11 ?bool15)) ?bool14 (and (or ?bool15 ?bool12 ?bool12))) (or ?bool15 (or ?bool11 ?bool13) (and ?bool13 (or ?bool11) ?bool13))))
(check-sat)


-- iteration 696 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00101 #b0001100011)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float3) ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ((_ to_fp 11 53) RNE ?float7) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool13) ?bool11))
(check-sat)


-- iteration 697 --
(declare-fun f0 (Float16 Float128 Float128) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 15 113) RTP ?float2) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float9 ((_ to_fp 15 113) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float5) ?float5)))
; FINAL ASSERT
(assert (or (or (or (and ?bool11) ?bool12) (or (and ?bool15 ?bool15) ?bool13) (or (or ?bool15 ?bool15 ?bool15) (or ?bool11 ?bool11))) ?bool12))
(check-sat)


-- iteration 698 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00001100110 #b1110001010000101000000100111011000001010001101001010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ((_ to_fp 15 113) RTN ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float4 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (or ?bool14 (and (and ?bool13 ?bool14))))
(check-sat)


-- iteration 699 --
(declare-fun f0 (Float32 Float128 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float8 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RTP ?float7) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and (and (and ?bool13 ?bool12) (and ?bool13 (and ?bool12 ?bool13 ?bool15) ?bool15)) (or (or ?bool14 ?bool11) ?bool15 ?bool12)))
(check-sat)


-- iteration 700 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11100101 #b11110001100110010101011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float3 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ((_ to_fp 8 24) RTN ?float2) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ?float7 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float6 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float6) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 15 113) RTP ?float5))))
; FINAL ASSERT
(assert (and (and ?bool11 (and (or ?bool12)) ?bool14) (and (or (or ?bool12 ?bool12 ?bool13))) ?bool15))
(check-sat)


-- iteration 701 --
(declare-fun f0 (Float32 Float32 Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RNE ?float8) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float2) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float3) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (and (and ?bool15) ?bool15))
(check-sat)


-- iteration 702 --
(declare-fun f0 (Float32 Float64 Float16) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3) ?float3 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float2 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ((_ to_fp 11 53) RTP ?float2) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTZ ?float6) ?float9)))
; FINAL ASSERT
(assert (and (and ?bool14 (and ?bool12)) ?bool13))
(check-sat)


-- iteration 703 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01011111 #b11001110001101001000111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float2 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and (and (and ?bool11 ?bool13) ?bool12 (and (and ?bool14 ?bool15 ?bool11) ?bool15))))
(check-sat)


-- iteration 704 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000111111011101 #b0111001111000010110110000111100011011000010001011010001100000101011100100110100001110001110110010010010000011111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ((_ to_fp 8 24) RNE ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float4) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 5 11) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool11 (or (and (and ?bool11) ?bool12 ?bool15) (and (and ?bool11 ?bool15 ?bool12)) ?bool14) ?bool11))
(check-sat)


-- iteration 705 --
(declare-fun f0 (Float64 Float128 Float16) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010101110011110 #b1100111000001000110110101011101110110100100011000000110110001011101111011011001010101111011000111101010111011111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float7 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTP ?float9) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (or ?bool14 (or (or ?bool12) (or ?bool14 ?bool15)) (or ?bool15 ?bool15)) (or ?bool12 (and ?bool11 ?bool11 (or ?bool15)) ?bool15) ?bool13))
(check-sat)


-- iteration 706 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTP ?float5) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14 (and ?bool15 ?bool11 ?bool15)))
(check-sat)


-- iteration 707 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00001111111 #b1110110101110011001100011001101100100110010111101111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float2 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 15 113) RTN ?float5) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ((_ to_fp 11 53) RTN ?float7) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 8 24) RTP ?float10) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 5 11) RTP ?float8))))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 708 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 8 24) RNE ?float3) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float3 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ((_ to_fp 15 113) RTN ?float9) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool12 ?bool14)))
(check-sat)


-- iteration 709 --
(declare-fun f0 (Float32 Float64 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float4 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 11 53) RNE ?float2) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and (and ?bool15 (or ?bool12 (and ?bool13) ?bool13))))
(check-sat)


-- iteration 710 --
(declare-fun f0 (Float32 Float128 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00100101111 #b1111100111100011110001101101111101111001100100100100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RTP ?float2) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 15 113) RTZ ?float6) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float9)))
; FINAL ASSERT
(assert (or (or (and ?bool14 (and ?bool14))) (or ?bool12)))
(check-sat)


-- iteration 711 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010010010001110 #b1001101111001011110111100110100100001110101011011001101010101010100101011000101000011100110000110101101101100001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ?float2 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 8 24) RNE ?float5) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (or ?bool15 (and ?bool12 (or (and ?bool15 ?bool13) ?bool15)) (and ?bool12 (and ?bool13 ?bool13) (and (or ?bool11 ?bool12)))))
(check-sat)


-- iteration 712 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float8 ((_ to_fp 11 53) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTP ?float10) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RNE ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTZ ?float2) ?float4)))
; FINAL ASSERT
(assert (and (or (and ?bool13 ?bool15))))
(check-sat)


-- iteration 713 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float4 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RNE ?float2) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 15 113) RTP ?float8) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool13) ?bool13 ?bool13))
(check-sat)


-- iteration 714 --
(declare-fun f0 (Float32 Float16 Float64) Float16)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ?float7 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 5 11) RNE ?float7))))
; FINAL ASSERT
(assert (or (or (or ?bool13 (or ?bool12 ?bool12)) (or ?bool12) ?bool12) ?bool13))
(check-sat)


-- iteration 715 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10100 #b1110001110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float6 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RTN ?float5) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RNE ?float3) ?float9)))
; FINAL ASSERT
(assert (or (and ?bool13 (or (and ?bool14 ?bool11) (and ?bool11 ?bool12 ?bool11) ?bool12))))
(check-sat)


-- iteration 716 --
(declare-fun f0 (Float16 Float128 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01101000 #b00000100111100010001100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float5 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float5) ?float7 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float10)))
; FINAL ASSERT
(assert (or ?bool15 (and (or ?bool12 ?bool13) ?bool14)))
(check-sat)


-- iteration 717 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100111000110010 #b1111101000100110001111101101111010011010111001000100001100001111110001010010100001011001110100011100001111010101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ?float5 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float8 ((_ to_fp 11 53) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RNE ?float5) ?float8)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool15 ?bool14) (and ?bool15) (and ?bool12 ?bool12)))
(check-sat)


-- iteration 718 --
(declare-fun f0 (Float32 Float16 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b111110110011011 #b1111010010110100011101000010111010110011000010110001010010001111110001100010110000001010110001111100110011111101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 5 11) RTZ ?float5) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float8 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 5 11) RNE ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float7 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (or ?bool12 ?bool11 (and (and (and ?bool13)) (or ?bool14))))
(check-sat)


-- iteration 719 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ((_ to_fp 8 24) RTN ?float2) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTP ?float3) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RTP ?float3) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float3))))
; FINAL ASSERT
(assert (and (or ?bool14) ?bool11))
(check-sat)


-- iteration 720 --
(declare-fun f0 (Float128 Float128 Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2) ?float4 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ?float3 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RTN ?float6) ?float4)))
; FINAL ASSERT
(assert (and (or (and (or ?bool14) (and ?bool11 ?bool11)) ?bool11) ?bool15 ?bool12))
(check-sat)


-- iteration 721 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01011 #b0111011111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01010011 #b10101101011011011110011)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ((_ to_fp 8 24) RTP ?float2) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ((_ to_fp 8 24) RTN ?float3) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float7 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 5 11) RNE ?float2))))
; FINAL ASSERT
(assert (or (and (or ?bool11 ?bool11 (and ?bool11))) (or ?bool14) (and ?bool11)))
(check-sat)


-- iteration 722 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10111 #b0011111010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float8) ?float7 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float3) ?float3 ?float2)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 723 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 15 113) RNE ?float7) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ?float9)))
; FINAL ASSERT
(assert (or (or ?bool12 (and (and ?bool15 ?bool14 ?bool14)) ?bool15)))
(check-sat)


-- iteration 724 --
(declare-fun f0 (Float16 Float16 Float16) Float64)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float4 ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float2) ?float7 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and (or (or ?bool13 ?bool13 ?bool14) (and ?bool12) (or ?bool14 (or ?bool12 ?bool13 ?bool14)))))
(check-sat)


-- iteration 725 --
(declare-fun f0 (Float32 Float128 Float16) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTN ?float5) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ((_ to_fp 5 11) RNE ?float5) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ((_ to_fp 8 24) RTZ ?float10))))
; FINAL ASSERT
(assert (and ?bool13 ?bool13 (or ?bool11)))
(check-sat)


-- iteration 726 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11001000001 #b1011110011011001101110001110011000011101110011111111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01110011 #b10010101000101011100000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 11 53) RTN ?float3) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float6 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float3) ?float9 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float6)))
; FINAL ASSERT
(assert (and (and (or ?bool13) (or (or ?bool11 ?bool11) ?bool12)) (and ?bool14)))
(check-sat)


-- iteration 727 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01001010111 #b0000000111110000000100000101001011110010111001011111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float3 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 8 24) RTP ?float4) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ((_ to_fp 5 11) RTN ?float3) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float2 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RNE ?float4) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ?float2)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 728 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 11 53) RTP ?float6) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ?float6 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float2 ((_ to_fp 15 113) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTN ?float3) ?float8)))
; FINAL ASSERT
(assert (and (and ?bool11)))
(check-sat)


-- iteration 729 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float3 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11))
(check-sat)


-- iteration 730 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RNE ?float6) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTN ?float3) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RTN ?float8) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15))
(check-sat)


-- iteration 731 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RTN ?float4) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float7) ?float7 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or (and (or ?bool15 (and ?bool15 ?bool12) ?bool15) (or (or ?bool12 ?bool13 ?bool14) (and ?bool11 ?bool14 ?bool11))) ?bool13))
(check-sat)


-- iteration 732 --
(declare-fun f0 (Float16 Float64 Float16) Float128)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float5 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 8 24) RNE ?float6))))
; FINAL ASSERT
(assert (and (or ?bool11 (or ?bool13) (and ?bool12))))
(check-sat)


-- iteration 733 --
(declare-fun f0 (Float16 Float32 Float64) Float16)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011110100100110 #b0101001110101010011000100011010111011000110100100000011101000001110111110101111101001011110111011101101001110011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 11 53) RNE ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 11 53) RTP ?float7) ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTZ ?float8) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (or ?bool12 ?bool11))
(check-sat)


-- iteration 734 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ?float6 ((_ to_fp 15 113) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RNE ?float9) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and (or ?bool11 (or ?bool14) ?bool13) ?bool13 ?bool15))
(check-sat)


-- iteration 735 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool13 (and (and (and ?bool15 ?bool13 ?bool13)))))
(check-sat)


-- iteration 736 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11101111 #b01000010101001100000111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 11 53) RNE ?float3) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or ?bool14 ?bool12 (or (or ?bool15 ?bool11 (and ?bool15 ?bool13)) ?bool12 ?bool13)))
(check-sat)


-- iteration 737 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 8 24) RTP ?float3) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool11) ?bool13))
(check-sat)


-- iteration 738 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11100 #b0110001111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 5 11) RNE ?float7))))
; FINAL ASSERT
(assert (or ?bool15 ?bool12 (or (and ?bool14 ?bool15 ?bool13) ?bool14 (and (or ?bool13)))))
(check-sat)


-- iteration 739 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 11 53) RTZ ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float3 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float2 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float5 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 740 --
(declare-fun f0 (Float64 Float64 Float128) Float128)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0001111011)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 15 113) RTN ?float7) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTP ?float5) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and (or ?bool12 (and (and ?bool13 ?bool15))) ?bool12 ?bool11))
(check-sat)


-- iteration 741 --
(declare-fun f0 (Float32 Float32 Float16) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b111100000110100 #b1001010011100110001110011000011010000111101011001000011011101111100110111100110010110011010100001000110110000110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ((_ to_fp 15 113) RTN ?float2) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool11 (or (or ?bool14 ?bool14) ?bool11 ?bool12))))
(check-sat)


-- iteration 742 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float2 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float4) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float5 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float2) ?float2 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ?float6)))
; FINAL ASSERT
(assert (or (and (and ?bool11 ?bool14)) ?bool15))
(check-sat)


-- iteration 743 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 11 53) RTP ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or (and (or (and ?bool12 ?bool14)) ?bool11 (or (and ?bool12 ?bool15) ?bool11 (and ?bool11))) (or ?bool11 ?bool15) ?bool14))
(check-sat)


-- iteration 744 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTZ ?float6) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float4 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float9) ?float9 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 8 24) RNE ?float5) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool13) ?bool13))
(check-sat)


-- iteration 745 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 ?bool12))
(check-sat)


-- iteration 746 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ((_ to_fp 5 11) RTN ?float3) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 15 113) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (or ?bool12 (and ?bool13) ?bool14))
(check-sat)


-- iteration 747 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01110101 #b11101011001001100111010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ?float5 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 5 11) RTZ ?float8) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 11 53) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 5 11) RTN ?float7) ?float6)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14 (or (and ?bool12))))
(check-sat)


-- iteration 748 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b011010100001110 #b0001000111111000100110010011001001101000011010001110001011001101111001000000100101010011100110111000011110101101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 749 --
(declare-fun f0 (Float64 Float32 Float128) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float4 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float7) ?float6 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float8) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float10) ?float7)))
; FINAL ASSERT
(assert (and (and ?bool13 (or (and ?bool13 ?bool15)))))
(check-sat)


-- iteration 750 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ((_ to_fp 15 113) RTN ?float4) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTN ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float7))))
; FINAL ASSERT
(assert (and ?bool11 ?bool14 ?bool13))
(check-sat)


-- iteration 751 --
(declare-fun f0 (Float32 Float32 Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100000011101000 #b0111010001101001111011100000001011101100110101100001101110110011100101000011000000110010110110110011010111100111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTN ?float6) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float6 ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float8))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 752 --
(declare-fun f0 (Float16 Float128 Float32) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float3 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ((_ to_fp 11 53) RTN ?float3) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RNE ?float9) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 11 53) RTP ?float8))))
; FINAL ASSERT
(assert (or (and (and ?bool15 ?bool12 (and ?bool13 ?bool15)) ?bool13 (or ?bool11 (or ?bool11 ?bool12 ?bool11)))))
(check-sat)


-- iteration 753 --
(declare-fun f0 (Float32 Float64 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00001011101 #b1010111000010011010011011101000111101001000000111011)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ?float4 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float6 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 11 53) RTZ ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float6)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13 ?bool12))
(check-sat)


-- iteration 754 --
(declare-fun f0 (Float16 Float128 Float16) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ((_ to_fp 5 11) RNE ?float5) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 15 113) RNE ?float3) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 755 --
(declare-fun f0 (Float32 Float16 Float16) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float6 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15))
(check-sat)


-- iteration 756 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float6 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float9 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and (and (or (and ?bool15)) ?bool14) (and (or ?bool15 ?bool15 ?bool11) ?bool11)))
(check-sat)


-- iteration 757 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float2 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float8 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float4) ?float10 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (and (or ?bool14 (or ?bool14 ?bool12 ?bool12) (and ?bool11)))))
(check-sat)


-- iteration 758 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float5 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float3 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float7 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RNE ?float7) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ?float6)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool15 (and ?bool11 ?bool13 (or ?bool12))) (or (and (or ?bool13) (and ?bool15 ?bool13) ?bool13) (or ?bool13) (or (and ?bool12 ?bool14 ?bool11) ?bool13 ?bool12))))
(check-sat)


-- iteration 759 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTN ?float2 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RNE ?float5) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or (and ?bool15 (or (or ?bool11 ?bool11 ?bool13)) ?bool14)))
(check-sat)


-- iteration 760 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00001010 #b10111101110100101100011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float4 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float7))))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool14) ?bool15))
(check-sat)


-- iteration 761 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float8 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float4 ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RTZ ?float5) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ?float7)))
; FINAL ASSERT
(assert (or ?bool15 ?bool11 (or (or ?bool13))))
(check-sat)


-- iteration 762 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float5 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float5 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RTN ?float3) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or (or (and (and ?bool14 ?bool11) ?bool14) ?bool14)))
(check-sat)


-- iteration 763 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float2 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4)))
; FINAL ASSERT
(assert (and (and (and (or ?bool14 ?bool12 ?bool13) (or ?bool12 ?bool13) ?bool13) ?bool13) ?bool11))
(check-sat)


-- iteration 764 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (and (or (or (and ?bool14 ?bool12)) (and ?bool15 (and ?bool11 ?bool11 ?bool12)) (or ?bool11 (and ?bool13 ?bool14) ?bool14)) ?bool12 (and (or ?bool13 (or ?bool12 ?bool15 ?bool15)) (and ?bool14 (or ?bool12 ?bool11)) ?bool13)))
(check-sat)


-- iteration 765 --
(declare-fun f0 (Float16 Float128 Float16) Float128)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ?float3 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15))
(check-sat)


-- iteration 766 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float6 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTN ?float2) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float5) ?float7 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (or (or (or ?bool14 ?bool12) ?bool14)))
(check-sat)


-- iteration 767 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 5 11) RTZ ?float5) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (and (and (and ?bool12 (and ?bool12 ?bool12) (and ?bool11 ?bool11)) ?bool14) ?bool15))
(check-sat)


-- iteration 768 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 15 113) RTN ?float8))))
; FINAL ASSERT
(assert (and (or ?bool12 (or ?bool11 (or ?bool11)) (and ?bool11 ?bool15 (or ?bool13 ?bool15))) ?bool15))
(check-sat)


-- iteration 769 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10010111 #b01111010010000101000111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float5 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTZ ?float6) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 11 53) RTP ?float5))))
; FINAL ASSERT
(assert (and (and (or (or ?bool12) ?bool15 (and ?bool13))) ?bool15))
(check-sat)


-- iteration 770 --
(declare-fun f0 (Float128 Float128 Float16) Float64)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float6 ?float3 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6 ?float4 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float4 ?float3 ((_ to_fp 5 11) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float6 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 5 11) RTZ ?float5))))
; FINAL ASSERT
(assert (and ?bool14 (and ?bool11 ?bool13) ?bool13))
(check-sat)


-- iteration 771 --
(declare-fun f0 (Float16 Float128) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float3 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTZ ?float7) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float6 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or ?bool15 ?bool13 (or ?bool12 (and (and ?bool12 ?bool11 ?bool14) (and ?bool12 ?bool14 ?bool15)))))
(check-sat)


-- iteration 772 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float4 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RNE ?float8) ?float3)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15))
(check-sat)


-- iteration 773 --
(declare-fun f0 (Float128 Float32 Float32) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ?float6 ((_ to_fp 15 113) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float8) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RNE ?float2) ?float5)))
; FINAL ASSERT
(assert (and (or (and (or ?bool11) ?bool13) ?bool13 (or (and ?bool13) (and ?bool12 ?bool13 ?bool13))) (or ?bool13 (or ?bool11 ?bool11) ?bool11) (or ?bool12)))
(check-sat)


-- iteration 774 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11111011 #b01001100110101111111101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000010111 #b1100110000111100111000000000111101111000000000111101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float3 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 11 53) RNE ?float4) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float2 ((_ to_fp 15 113) RNE ?float4))))
; FINAL ASSERT
(assert (and ?bool11 ?bool13))
(check-sat)


-- iteration 775 --
(declare-fun f0 (Float16 Float16 Float64) Float128)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 11 53) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9) ?float6 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ?float8 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float6) ?float3 ((_ to_fp 15 113) RTN ?float4))))
; FINAL ASSERT
(assert (and (and ?bool11 (and (or ?bool11 ?bool14) ?bool11) ?bool14)))
(check-sat)


-- iteration 776 --
(declare-fun f0 (Float64 Float16 Float16) Float128)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01001000001 #b1010011010011011110100100111011101001000000111001000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 11 53) RTP ?float4) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float6 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or ?bool12 ?bool13))
(check-sat)


-- iteration 777 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ?float3 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float4 ((_ to_fp 5 11) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (and (and (and ?bool14 ?bool11)) (and (or (or ?bool15 ?bool14) ?bool14 (and ?bool15 ?bool13 ?bool11)) (or ?bool13 (and ?bool15 ?bool13 ?bool12))) (and (and ?bool13 (or ?bool14 ?bool11)) ?bool13 (and ?bool11 (and ?bool12)))))
(check-sat)


-- iteration 778 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float6 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTP ?float6) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 11 53) RTZ ?float10) ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 779 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10011110 #b01101111010000011110110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 5 11) RNE ?float7) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float6 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool13) ?bool15 ?bool13))
(check-sat)


-- iteration 780 --
(declare-fun f0 (Float16 Float64 Float64) Float128)
(declare-fun p0 (Float64 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10100011001 #b1010111000100011011111010110110100101011011011100100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RNE ?float10) ?float4)))
; FINAL ASSERT
(assert (and (and ?bool13 (or (or ?bool14) (and ?bool15) (and ?bool14 ?bool11 ?bool15)) (and (or ?bool12) ?bool11 ?bool12))))
(check-sat)


-- iteration 781 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ?float5 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float5 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 8 24) RTN ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float2) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ((_ to_fp 8 24) RTN ?float4))))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool15 ?bool11) (or ?bool15 (and (and ?bool12 ?bool14) (or ?bool11 ?bool15) ?bool11) (or ?bool14 ?bool15))))
(check-sat)


-- iteration 782 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00110110111 #b0110011011011101000100001100110010001011000001101010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float5 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RTZ ?float7) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ?float8 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTZ ?float10) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float9) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 783 --
(declare-fun f0 (Float32 Float64 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float4 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float3 ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8 ?float4 ((_ to_fp 15 113) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool12) (or (and ?bool13 ?bool11 ?bool14) ?bool12 (or ?bool11 (and ?bool15 ?bool14) ?bool13))))
(check-sat)


-- iteration 784 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float6 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ((_ to_fp 15 113) RTZ ?float3) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 5 11) RTN ?float10))))
; FINAL ASSERT
(assert (and (or ?bool15)))
(check-sat)


-- iteration 785 --
(declare-fun f0 (Float32 Float32 Float128) Float64)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ((_ to_fp 5 11) RTZ ?float6) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 11 53) RTZ ?float8) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float9) ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTZ ?float10) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (or (and (or ?bool15 ?bool12 ?bool11))))
(check-sat)


-- iteration 786 --
(declare-fun f0 (Float64 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10001000001 #b1111100011001111100010101001101011110010101000011010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ((_ to_fp 8 24) RNE ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float4 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float6 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (or (or ?bool14) ?bool14))
(check-sat)


-- iteration 787 --
(declare-fun f0 (Float16 Float16 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ?float2 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float2 ((_ to_fp 11 53) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool15) ?bool11))
(check-sat)


-- iteration 788 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float4) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float3 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float5 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float10) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float8) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ((_ to_fp 8 24) RTN ?float7))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 789 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00010 #b1010000100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float7 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTZ ?float5) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool11) ?bool13 (and ?bool14 ?bool15)))
(check-sat)


-- iteration 790 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ?float3 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and (and ?bool12) (or ?bool15) ?bool15))
(check-sat)


-- iteration 791 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b001100010110110 #b0011011100010001111100000101000111010101010100010011111110100001101101110011001010010001010011101110000111011101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 8 24) RTN ?float8) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float8)))
; FINAL ASSERT
(assert (and (and (or ?bool14 ?bool12))))
(check-sat)


-- iteration 792 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTZ ?float7) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float7)))
; FINAL ASSERT
(assert (and (or ?bool15)))
(check-sat)


-- iteration 793 --
(declare-fun f0 (Float16 Float64 Float64) Float64)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11101111 #b01101101110010100101111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RTN ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float7 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ?float4 ((_ to_fp 8 24) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool13 (and (and ?bool13 ?bool15 ?bool14) ?bool11)) (and ?bool15 (or (or ?bool13) (and ?bool12))) ?bool13))
(check-sat)


-- iteration 794 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ?float6)))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool11) (or ?bool11 (and (or ?bool13) ?bool12) (and ?bool15 ?bool13 ?bool12)) ?bool11))
(check-sat)


-- iteration 795 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01010 #b0011001110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ((_ to_fp 11 53) RTN ?float7) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RTP ?float7) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 796 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00011 #b0000010101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ?float4 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or (and (and ?bool13 (and ?bool15 ?bool11 ?bool15) ?bool14) ?bool14 ?bool12) ?bool11 ?bool12))
(check-sat)


-- iteration 797 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float5)))
; FINAL ASSERT
(assert (or ?bool12 ?bool15))
(check-sat)


-- iteration 798 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (or (and ?bool15)))
(check-sat)


-- iteration 799 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 5 11) RTN ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float5 ((_ to_fp 8 24) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 15 113) RTP ?float2))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 800 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float4 ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float8 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float3) ?float4 ((_ to_fp 5 11) RTZ ?float8))))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool14 (or ?bool14 (or ?bool12 ?bool13 ?bool14)) ?bool14)))
(check-sat)


-- iteration 801 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float4 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 5 11) RNE ?float8) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float8 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 8 24) RTN ?float8) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTZ ?float8) ?float9)))
; FINAL ASSERT
(assert (or (and ?bool15)))
(check-sat)


-- iteration 802 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ((_ to_fp 8 24) RTN ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (or ?bool14 ?bool12))
(check-sat)


-- iteration 803 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01000100010 #b1000011100101010010100110100101001011111001010100100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 8 24) RTP ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float6 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ((_ to_fp 5 11) RTZ ?float4) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float4 ((_ to_fp 11 53) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RTZ ?float8) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 15 113) RTN ?float8))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 804 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTN ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float3 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float7 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float9) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float7 ?float5)))
; FINAL ASSERT
(assert (and (or (and ?bool12 ?bool13 ?bool11) (or (or ?bool11 ?bool15 ?bool13)) ?bool15) ?bool11 (or (and ?bool15))))
(check-sat)


-- iteration 805 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ?float2 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float2 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and (or (or ?bool13 ?bool13) (or (and ?bool14) ?bool15) (and ?bool11)) (and ?bool12 (and (or ?bool12) (or ?bool13 ?bool13)) ?bool11)))
(check-sat)


-- iteration 806 --
(declare-fun f0 (Float128 Float128 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float2 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float6 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RTZ ?float4) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ?float7)))
; FINAL ASSERT
(assert (or ?bool11 (and (or (or ?bool15 ?bool14) ?bool13 ?bool14))))
(check-sat)


-- iteration 807 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 8 24) RTN ?float6) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (or (or (and ?bool15 ?bool11 ?bool13))) ?bool12))
(check-sat)


-- iteration 808 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01111101100 #b1000000101100000100100101011111100111001001011100100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float6 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ((_ to_fp 8 24) RTZ ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (or (or ?bool15 (and ?bool12) (or (and ?bool14 ?bool11 ?bool12) (and ?bool14 ?bool14)))))
(check-sat)


-- iteration 809 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RTN ?float7) ?float6)))
; FINAL ASSERT
(assert (or (or (and (and ?bool12 ?bool12) ?bool13) (and (or ?bool15 ?bool12 ?bool12) ?bool15) (and ?bool11)) ?bool11 ?bool15))
(check-sat)


-- iteration 810 --
(declare-fun f0 (Float16 Float32 Float128) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ((_ to_fp 11 53) RTN ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float3) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float5)))
; FINAL ASSERT
(assert (and ?bool11 ?bool11))
(check-sat)


-- iteration 811 --
(declare-fun f0 (Float64 Float32 Float32) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10101011 #b01110000110000010010011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ((_ to_fp 5 11) RTZ ?float7) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and (or (and ?bool12) (or (and ?bool14 ?bool12 ?bool11) (and ?bool11 ?bool15) ?bool13)) ?bool11 (and ?bool11 ?bool15 (and ?bool12))))
(check-sat)


-- iteration 812 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01001001001 #b1111001011110001001000110100100111111011000010100100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTZ ?float4) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float2 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RTZ ?float9) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float7)))
; FINAL ASSERT
(assert (and (or (or ?bool11 ?bool14 ?bool11) (or (or ?bool11 ?bool12) ?bool15))))
(check-sat)


-- iteration 813 --
(declare-fun f0 (Float16 Float16 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float2 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float2 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 15 113) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or (and (or ?bool14) ?bool13 ?bool12) (or ?bool13 (and ?bool14 (and ?bool12 ?bool11 ?bool15))) (or ?bool15 (and (and ?bool14)) (and (or ?bool12 ?bool15 ?bool13)))))
(check-sat)


-- iteration 814 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01010 #b1110001100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float4) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float5) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float4 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float5) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float6 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (or (and ?bool12))))
(check-sat)


-- iteration 815 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float2 ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float10) ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13 ?bool13))
(check-sat)


-- iteration 816 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RTN ?float5) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float6) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and ?bool14 ?bool12 ?bool11))
(check-sat)


-- iteration 817 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01010101100 #b1001110000111000110111100011000110010101010100001101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000011100 #b0110010100101111000101101111101010011111101000110110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RNE ?float2) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTP ?float6) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or (or ?bool11) ?bool14))
(check-sat)


-- iteration 818 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 5 11) RTP ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float3 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float2 ((_ to_fp 11 53) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RNE ?float10) ?float3)))
; FINAL ASSERT
(assert (and (or ?bool13 (and ?bool15) (and (and ?bool13 ?bool12 ?bool15) (or ?bool14 ?bool14 ?bool12))) (and ?bool11) (and (and ?bool14 (and ?bool14 ?bool14)) ?bool11 ?bool11)))
(check-sat)


-- iteration 819 --
(declare-fun f0 (Float64 Float16 Float32) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 8 24) RTZ ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float3 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 5 11) RTP ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float3) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float9)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool14 (or (and ?bool14))) ?bool12 (and (or (and ?bool13 ?bool11) ?bool15 (or ?bool14)))))
(check-sat)


-- iteration 820 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTZ ?float5) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ?float8)))
; FINAL ASSERT
(assert (or (or (or ?bool12)) (and (and ?bool15 (or ?bool15)))))
(check-sat)


-- iteration 821 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11111111 #b10010100111000100101000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10111111000 #b1010001011110000100001110011110001101011011010001000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and (and (or (or ?bool11 ?bool12) (and ?bool15 ?bool13))) (or ?bool14 ?bool12 ?bool11)))
(check-sat)


-- iteration 822 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float2 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float7 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RTZ ?float7) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float4))))
; FINAL ASSERT
(assert (and (or (or ?bool15 ?bool14 ?bool11) (and ?bool11)) (or (and ?bool12) (or (or ?bool15 ?bool15 ?bool11) ?bool11))))
(check-sat)


-- iteration 823 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10100011011 #b1011101000000111011001101100011101101000001111010010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool12 ?bool14))
(check-sat)


-- iteration 824 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ((_ to_fp 5 11) RTN ?float3) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ((_ to_fp 8 24) RTZ ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (or ?bool15 (or (and ?bool12 ?bool15 ?bool12) (or ?bool13 ?bool15 ?bool13)))))
(check-sat)


-- iteration 825 --
(declare-fun f0 (Float64 Float128 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTN ?float6) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float6) ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RTN ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RTN ?float9) ?float4)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 826 --
(declare-fun f0 (Float128 Float128 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110110111011101 #b1110001010101110010001101000100000101110000110000111000101000100000110000100111100110001001101011100000010011100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float6 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float3 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RTP ?float3) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RTP ?float2) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool13 ?bool15 ?bool11) (or ?bool12 (or ?bool14))))
(check-sat)


-- iteration 827 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float4 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float7 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 828 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ((_ to_fp 8 24) RTP ?float9) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTP ?float9) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or (or (and ?bool12) ?bool11) ?bool15))
(check-sat)


-- iteration 829 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10001011 #b00001010101110010010001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float2 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float8 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float8 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float4))))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 830 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTP ?float3) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RNE ?float7) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or ?bool11 (and ?bool11 ?bool14) ?bool12))
(check-sat)


-- iteration 831 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 15 113) RTN ?float4) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTN ?float5) ?float2)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14 (and (and (and ?bool12 ?bool12 ?bool15) (and ?bool11 ?bool15 ?bool13)))))
(check-sat)


-- iteration 832 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTP ?float2) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float3 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTN ?float2) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float8)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 833 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11110110000 #b1011111101100110111011000111100110110111111000001000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float8 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float4 ((_ to_fp 8 24) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RTZ ?float2) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8) ?float10 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and (or (and ?bool15 ?bool11)) ?bool15))
(check-sat)


-- iteration 834 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RNE ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 5 11) RTP ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or (or (or ?bool12 ?bool11 ?bool15) (or (and ?bool13 ?bool13) (or ?bool11 ?bool13)) ?bool15)))
(check-sat)


-- iteration 835 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01110010011 #b1010101011110111010101110110101100011101101011010011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11111011001 #b0011001010000000100111010001001110101101110100011101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ?float5 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ((_ to_fp 11 53) RTN ?float8) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float3) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 836 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float2 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (and ?bool12 ?bool13 ?bool15))
(check-sat)


-- iteration 837 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00111001000 #b0101100111010010000101001101101101110001111101110111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float4 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float4) ?float2 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RNE ?float8) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float10) ?float6 ((_ to_fp 5 11) RTZ ?float5))))
; FINAL ASSERT
(assert (or ?bool14 ?bool13))
(check-sat)


-- iteration 838 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b111110011011001 #b1111101000010101010101001111110001110010101101010000001000001000001000100001000011110010111100010100111111000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ?float4 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ((_ to_fp 15 113) RTN ?float6) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTZ ?float10) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (and ?bool15 (and (and ?bool13) ?bool14) (and ?bool14 ?bool14)) (and ?bool15 ?bool14)))
(check-sat)


-- iteration 839 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float3 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float4 ((_ to_fp 8 24) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 (and (and (or ?bool12 ?bool14)) ?bool14)))
(check-sat)


-- iteration 840 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTZ ?float8) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RTN ?float9) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RTN ?float6) ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool12)))
(check-sat)


-- iteration 841 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTN ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ((_ to_fp 5 11) RTP ?float4) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTZ ?float6) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTP ?float4) ?float10)))
; FINAL ASSERT
(assert (or ?bool11 ?bool14))
(check-sat)


-- iteration 842 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10000 #b0001110101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float7 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 11 53) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or ?bool12 (and (and (or ?bool15 ?bool12))) ?bool11))
(check-sat)


-- iteration 843 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110100100100011 #b0100101001000111111001100000110010101011000011101001000111101001101010011000111001001111000010000010010000001011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool15)))
(check-sat)


-- iteration 844 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 11 53) RNE ?float5) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float3 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTP ?float6) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 845 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b001011001100111 #b1011000001111000100111001101100110100001100101100100001001100010011111011110111111011101110001100000110011111110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or (or (and ?bool14 (and ?bool11 ?bool14 ?bool14)) ?bool12)))
(check-sat)


-- iteration 846 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float4 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float3 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float5)))
; FINAL ASSERT
(assert (or (or ?bool13 (and (and ?bool15) ?bool13 (or ?bool14 ?bool12)) ?bool15) ?bool12))
(check-sat)


-- iteration 847 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11101001 #b01110111111010101010101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float5 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool14 (and ?bool11 ?bool15) (and ?bool11 (or ?bool15) ?bool13)) ?bool13))
(check-sat)


-- iteration 848 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10011010 #b01000010101011011110000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 15 113) RNE ?float5) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 11 53) RTP ?float8) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RNE ?float10) ?float4)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool11 (or ?bool15 ?bool13 ?bool14)) (and ?bool15 ?bool14 (or ?bool14))))
(check-sat)


-- iteration 849 --
(declare-fun f0 (Float128 Float64 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01111100111 #b1101011011111101001001101011001010001001111011010000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float7) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ((_ to_fp 15 113) RTP ?float4) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTN ?float10) ?float5)))
; FINAL ASSERT
(assert (and ?bool13 (and (or ?bool12) ?bool15 (and (and ?bool13 ?bool12) ?bool13)) (and (or (or ?bool12 ?bool13) (and ?bool12 ?bool13 ?bool13)))))
(check-sat)


-- iteration 850 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01000000111 #b1010011111010100100011000011110001011101100000110101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTN ?float4 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTZ ?float10) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float5)))
; FINAL ASSERT
(assert (and (and (or (or ?bool14 ?bool15) ?bool14) ?bool12)))
(check-sat)


-- iteration 851 --
(declare-fun f0 (Float64 Float64 Float64) Float128)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTP ?float5) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float5 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool12) (or (and (and ?bool15)) (and ?bool14) (or (and ?bool11 ?bool11) (or ?bool11 ?bool15)))))
(check-sat)


-- iteration 852 --
(declare-fun f0 (Float16 Float128 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 8 24) RNE ?float4) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float6 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float4 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ((_ to_fp 8 24) RTN ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4)))
; FINAL ASSERT
(assert (or (or ?bool15)))
(check-sat)


-- iteration 853 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10001 #b1010000111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 11 53) RTN ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float8 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (or (and (and ?bool12 ?bool11)) ?bool11))
(check-sat)


-- iteration 854 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 8 24) RTP ?float2) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ((_ to_fp 8 24) RTP ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RTZ ?float6) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 855 --
(declare-fun f0 (Float32 Float16 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float4 ?float6 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float6 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (and (and ?bool13 ?bool12 (or ?bool13 ?bool13 ?bool12)) (or ?bool11 ?bool12 ?bool14)) (and (and ?bool15 (or ?bool13 ?bool13 ?bool13)))))
(check-sat)


-- iteration 856 --
(declare-fun f0 (Float64 Float128 Float16) Float128)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b100011000000000 #b1110110100100001000001111110001111001111010000011001000000000010000101000001110110001111111011011011110010011011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11110111 #b10110111000011001111110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float5) ?float4 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float3 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float5) ?float6 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (and (or (and ?bool13) (or (or ?bool12 ?bool14)) (and ?bool13))))
(check-sat)


-- iteration 857 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float4 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float3 ((_ to_fp 8 24) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float4) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and (or (or ?bool14 (and ?bool13) ?bool15) ?bool11) ?bool14))
(check-sat)


-- iteration 858 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00110 #b1011010111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float2 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ?float5 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float5) ?float3 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ((_ to_fp 11 53) RTP ?float10))))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool12) (or ?bool15 ?bool11) (or (and (and ?bool13) ?bool11 (or ?bool13 ?bool12 ?bool15)))))
(check-sat)


-- iteration 859 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101101100110001 #b0010101001101111100101101111100001101100011011000001101111100001011111100110111000111110111111100110111000010000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float7 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float6) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13 ?bool15))
(check-sat)


-- iteration 860 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000011 #b10010010100011001000111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float5) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ?float3 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ?float5)))
; FINAL ASSERT
(assert (and (and (or (or ?bool15 ?bool15) (or ?bool14) (or ?bool12 ?bool15 ?bool15))) (and ?bool12) (and ?bool14 ?bool15)))
(check-sat)


-- iteration 861 --
(declare-fun f0 (Float32 Float128 Float16) Float128)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ?float2 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float3 ((_ to_fp 15 113) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float5) ?float6 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ?float2 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 5 11) RTP ?float6) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float5)))
; FINAL ASSERT
(assert (and (and ?bool11) ?bool11 (and (or (and ?bool15 ?bool15 ?bool12)) ?bool11 (or (and ?bool11 ?bool14) ?bool11 (or ?bool15 ?bool11)))))
(check-sat)


-- iteration 862 --
(declare-fun f0 (Float128 Float64 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000101110101111 #b1011110110111110101000111010111111001011010000111000101000100111001001111101011000111111001000011000001111110001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RNE ?float5) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14 ?bool13))
(check-sat)


-- iteration 863 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10001 #b0110101010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float7) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float2 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and (or (or (and ?bool12 ?bool12 ?bool13))) ?bool11))
(check-sat)


-- iteration 864 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float3 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float4 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or (or ?bool15) ?bool11 (or ?bool14)))
(check-sat)


-- iteration 865 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ((_ to_fp 15 113) RTP ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTZ ?float5) ?float7)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool11 (and ?bool14 ?bool14 (or ?bool15 ?bool12 ?bool15)))))
(check-sat)


-- iteration 866 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ?float4 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float5 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float9) ?float3 ((_ to_fp 15 113) RTP ?float9))))
; FINAL ASSERT
(assert (and (and ?bool13) ?bool12 (or (and ?bool15))))
(check-sat)


-- iteration 867 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RNE ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float6 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 8 24) RTP ?float3) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 5 11) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float6) ?float4)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 868 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float4 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool14 ?bool11 (or ?bool15 ?bool15)))
(check-sat)


-- iteration 869 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00100000000000011010011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 5 11) RNE ?float4) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool14 ?bool12 (and (and ?bool12)))))
(check-sat)


-- iteration 870 --
(declare-fun f0 (Float128 Float16 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTP ?float5) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float6 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and (or ?bool14) (and ?bool13 (and (and ?bool12 ?bool15) ?bool11) (and ?bool13))))
(check-sat)


-- iteration 871 --
(declare-fun f0 (Float32 Float16 Float32) Float32)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float4 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ((_ to_fp 5 11) RTP ?float3) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 5 11) RNE ?float5))))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool13) ?bool14 (and ?bool11)))
(check-sat)


-- iteration 872 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01101 #b1001101100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float4 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RTP ?float7) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float7))))
; FINAL ASSERT
(assert (or (and (or (and ?bool12 ?bool14 ?bool14) (and ?bool14 ?bool14 ?bool11) ?bool13) (or (and ?bool15 ?bool14 ?bool13)) (or (and ?bool15))) ?bool15 ?bool14))
(check-sat)


-- iteration 873 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 15 113) RTP ?float9))))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool11 ?bool12) (and (and ?bool13))))
(check-sat)


-- iteration 874 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110011110110000 #b1010001110000111110000100010100101001100111011111000111111101100001011101010100110110011010100100011010011010000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float3 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (and ?bool11 (or ?bool13) (and ?bool11 ?bool15 (and ?bool15 (and ?bool14 ?bool14 ?bool15) ?bool11))))
(check-sat)


-- iteration 875 --
(declare-fun f0 (Float128 Float32 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (and ?bool12 ?bool11 ?bool15))
(check-sat)


-- iteration 876 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01100 #b0101111000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13))
(check-sat)


-- iteration 877 --
(declare-fun f0 (Float32 Float16 Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTN ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 15 113) RTN ?float6) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and ?bool11 (or (and ?bool14 (and ?bool11)) (or ?bool12 (and ?bool12) (or ?bool15 ?bool15)))))
(check-sat)


-- iteration 878 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00011 #b0000110101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float5 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float9 ((_ to_fp 8 24) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 879 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float7 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RTZ ?float4) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTZ ?float7) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8)))
; FINAL ASSERT
(assert (and (and (or ?bool11) (or (and ?bool13)) (or ?bool13 (or ?bool14 ?bool15 ?bool15))) ?bool14))
(check-sat)


-- iteration 880 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RNE ?float8) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool14 ?bool14) (or ?bool15 (and (or ?bool13) ?bool11 ?bool13) ?bool12)))
(check-sat)


-- iteration 881 --
(declare-fun f0 (Float16 Float16 Float64) Float128)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00111011000 #b0110000000100001001010111000101000110101111101011110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float2 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ?float3 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTZ ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTZ ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTP ?float9) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 882 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RNE ?float4) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTP ?float9) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and (or (and (or ?bool15) (and ?bool13 ?bool15 ?bool12)) (or (or ?bool13) ?bool11 (and ?bool15))) ?bool15 (or ?bool13)))
(check-sat)


-- iteration 883 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ?float5 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float2 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float7) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float7)))
; FINAL ASSERT
(assert (or (or ?bool14) (and (and (and ?bool13 ?bool12) (or ?bool11)) (or (and ?bool12) (and ?bool12 ?bool13)) (and (or ?bool12 ?bool12) (or ?bool11 ?bool11 ?bool15) ?bool12)) (or (and ?bool14) ?bool15 ?bool13)))
(check-sat)


-- iteration 884 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float3 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float7 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 8 24) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float10)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool11) (or (and ?bool15 (and ?bool12)))))
(check-sat)


-- iteration 885 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01100100000 #b1110001001011001010110110110101111000011110110111110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ((_ to_fp 15 113) RTN ?float6) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float7) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ?float5)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 886 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RNE ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ?float4 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float8 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float7 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTZ ?float9) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ((_ to_fp 11 53) RTP ?float4))))
; FINAL ASSERT
(assert (or ?bool11 ?bool12 ?bool14))
(check-sat)


-- iteration 887 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01011110100 #b1000110010011001110011011000110110000101100111011010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float4 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTP ?float8) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ((_ to_fp 15 113) RTZ ?float7))))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool11 ?bool13)))
(check-sat)


-- iteration 888 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float2 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float3 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float8 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ((_ to_fp 5 11) RNE ?float8) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RNE ?float2) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and (or (and ?bool14 (and ?bool13)) (or (or ?bool12 ?bool13 ?bool13) ?bool15))))
(check-sat)


-- iteration 889 --
(declare-fun f0 (Float16 Float128 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10110 #b1001110000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTZ ?float6) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float9 ?float7 ((_ to_fp 15 113) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool15) (and ?bool13 (and (or ?bool12)) (or (or ?bool11 ?bool11) (or ?bool14 ?bool12) (or ?bool12 ?bool11 ?bool15)))))
(check-sat)


-- iteration 890 --
(declare-fun f0 (Float32 Float128 Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 11 53) RNE ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTN ?float8) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and (or (or (and ?bool11 ?bool12 ?bool11) ?bool12 ?bool15) ?bool11)))
(check-sat)


-- iteration 891 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100101011110100 #b0010001100100111001000101000110111000001100110111111111010001110100111011110001101101010000010000101010001101010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float4 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float4 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 15 113) RTP ?float5) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RTZ ?float2) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 11 53) RTZ ?float3))))
; FINAL ASSERT
(assert (or (and (or (and ?bool11) (or ?bool15 ?bool13)))))
(check-sat)


-- iteration 892 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RNE ?float3) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (and (and (and ?bool13) (and ?bool14) ?bool14) (or ?bool13 (and ?bool13) ?bool13) ?bool11) (and (or (or ?bool11 ?bool15)) (and ?bool11 (or ?bool14 ?bool11 ?bool12)) (or (and ?bool12)))))
(check-sat)


-- iteration 893 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float64 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 15 113) RTN ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTZ ?float3) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTN ?float3))))
; FINAL ASSERT
(assert (and ?bool12 ?bool11))
(check-sat)


-- iteration 894 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100100001001010 #b0010001001111111010000111000001111011110110011101101000001011000010100110000110011111111001011110110100100101101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTN ?float2) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and (and (or ?bool12) (and ?bool12))))
(check-sat)


-- iteration 895 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float6 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 11 53) RTP ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and (or (or ?bool15 ?bool14 (and ?bool14)) ?bool15 ?bool14) ?bool15))
(check-sat)


-- iteration 896 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11101100111 #b0101010011001110000110000011011011001111101111101011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ?float4 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ((_ to_fp 11 53) RTP ?float3) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ?float7 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float6 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 897 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float2 ((_ to_fp 11 53) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float4)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 898 --
(declare-fun f0 (Float16 Float16 Float16) Float64)
(declare-fun p0 (Float16 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float3 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RNE ?float3) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 15 113) RTP ?float8) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float8 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float6) ?float10 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float7 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 899 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01100000 #b10101110000010000011011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011001011101001 #b1011011100100110000000010001100001000010111001000010100011111010011110010010101010000101111100110001101110110000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float5 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (and (or ?bool14) (or (or (or ?bool15 ?bool13 ?bool15)) (or (or ?bool12)))))
(check-sat)


-- iteration 900 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RNE ?float7) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float2 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and (and ?bool13) (or (and ?bool15 (and ?bool12 ?bool15 ?bool13)) ?bool14 (or (or ?bool14 ?bool13 ?bool13) (and ?bool11 ?bool12) (or ?bool14 ?bool13))) ?bool13))
(check-sat)


-- iteration 901 --
(declare-fun f0 (Float128 Float32 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float9))))
; FINAL ASSERT
(assert (or (and ?bool11) ?bool13))
(check-sat)


-- iteration 902 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float4 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 5 11) RTZ ?float5) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RNE ?float10) ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 8 24) RTP ?float5))))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool11 ?bool12)))
(check-sat)


-- iteration 903 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float5) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ((_ to_fp 5 11) RTP ?float4) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float4 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float5) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 5 11) RTP ?float5) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and (or (and (and ?bool11 ?bool11 ?bool14) (and ?bool14) ?bool13) ?bool13 ?bool14) ?bool11))
(check-sat)


-- iteration 904 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10001010010 #b0101010101010100001010011001100000111001101110100000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float3 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 8 24) RTN ?float9) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 5 11) RTZ ?float4) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (and (or (and ?bool14))))
(check-sat)


-- iteration 905 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101110100101111 #b0111100010001110011011100000100111010001000101110100101010111010001001110010001010011011001111101000101110110101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00111111000 #b1010000010000010111010011100011011000001000101111010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float5 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 5 11) RTN ?float2) ?float8)))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool11)))
(check-sat)


-- iteration 906 --
(declare-fun f0 (Float32 Float128 Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001010000000010 #b1000001110100011110101110110101110101111000101111010001001000011000010111011010000101001001001001111110010111000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTN ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool13 ?bool14) ?bool14 ?bool11))
(check-sat)


-- iteration 907 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool12))
(check-sat)


-- iteration 908 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float4 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float4 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float8) ?float7 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float2) ?float5 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or (or (or ?bool12) (or (and ?bool11 ?bool12) ?bool12)) ?bool13 ?bool12))
(check-sat)


-- iteration 909 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTZ ?float5) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RTP ?float7) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RNE ?float6) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTP ?float5) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RNE ?float2) ?float9)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14))
(check-sat)


-- iteration 910 --
(declare-fun f0 (Float32 Float128 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float4 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float4 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTP ?float6) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float2))))
; FINAL ASSERT
(assert (or (and ?bool13)))
(check-sat)


-- iteration 911 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01011101101 #b0111000000000101101111101000111010000110111010111010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float3 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float5 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTN ?float8))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 912 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float6 ((_ to_fp 8 24) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float10) ?float8)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 913 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float5) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (and ?bool14 ?bool11))
(check-sat)


-- iteration 914 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float2 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ?float3 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool13 (and (or ?bool11 ?bool11) ?bool12 ?bool11) (and ?bool13)))
(check-sat)


-- iteration 915 --
(declare-fun f0 (Float16 Float32 Float16) Float128)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00111101 #b00000111110011001010111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 11 53) RTP ?float7) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTN ?float5) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 15 113) RTN ?float8) ?float10)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 916 --
(declare-fun f0 (Float16 Float64 Float128) Float128)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110100111110100 #b1011000111010111111010011101100110111011001110010000000110111101001100001001100100111111101110111011100110101010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float9) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float5)))
; FINAL ASSERT
(assert (and (or ?bool13 (or (and ?bool12 ?bool11))) (and ?bool14) ?bool11))
(check-sat)


-- iteration 917 --
(declare-fun f0 (Float128 Float16 Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5) ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ((_ to_fp 5 11) RTP ?float5) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float6 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ?float2 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 918 --
(declare-fun f0 (Float128 Float128 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01011 #b0110011111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTP ?float5) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTN ((_ to_fp 11 53) RTZ ?float4) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTP ?float6) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ((_ to_fp 11 53) RTN ?float6))))
; FINAL ASSERT
(assert (or ?bool13 ?bool12))
(check-sat)


-- iteration 919 --
(declare-fun f0 (Float16 Float16 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01000110000 #b0111100100000110010000111110010101010101110001000101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10011110110 #b0111010111100011001000100110001101110111101010001010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 5 11) RTP ?float2) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 5 11) RTZ ?float3) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float7 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RNE ?float6) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RNE ?float6) ?float5)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 920 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RTZ ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float7 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 921 --
(declare-fun f0 (Float128 Float16 Float16) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10100111 #b00100011011000000110000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 5 11) RTN ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float5 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float7) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float10) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool13 (and ?bool11 (and ?bool12 ?bool13 ?bool11) ?bool12)) ?bool13 ?bool12))
(check-sat)


-- iteration 922 --
(declare-fun f0 (Float16 Float64 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTN ?float4) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13))
(check-sat)


-- iteration 923 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ((_ to_fp 5 11) RTN ?float3) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTN ?float10) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float3)))
; FINAL ASSERT
(assert (and (or ?bool15 (and ?bool14 ?bool14 (and ?bool13 ?bool15))) ?bool14 ?bool13))
(check-sat)


-- iteration 924 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ((_ to_fp 8 24) RTP ?float4) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float8) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTZ ?float7) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ((_ to_fp 8 24) RTP ?float9))))
; FINAL ASSERT
(assert (and (or ?bool12)))
(check-sat)


-- iteration 925 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ((_ to_fp 15 113) RNE ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ((_ to_fp 15 113) RTN ?float2) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 5 11) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float6) ?float10 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float8) ?float10 ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (and (or ?bool12 (or (and ?bool15 ?bool12))) (and ?bool13 (or (and ?bool11)) (and (or ?bool14 ?bool15) ?bool11 (or ?bool12))) (and (and ?bool15) ?bool13 (and ?bool13))))
(check-sat)


-- iteration 926 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10111010000 #b0010111010101101101100010011001010101111100000100100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float6)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14 ?bool11))
(check-sat)


-- iteration 927 --
(declare-fun f0 (Float32 Float64 Float16) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 11 53) RTZ ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float2) ?float7 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ((_ to_fp 11 53) RTP ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTN ?float3) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float8)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15 (and ?bool11 ?bool11)))
(check-sat)


-- iteration 928 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float6)))
; FINAL ASSERT
(assert (and ?bool15 ?bool13))
(check-sat)


-- iteration 929 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b111110000011111 #b1101111011010010100100001001101000010100001001011100100010000110101110010001011111001111000011000010011010000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ?float4 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ?float5 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and (or (or ?bool11 (or ?bool13)) (or (or ?bool15 ?bool15 ?bool11) (and ?bool14 ?bool12 ?bool11) (and ?bool14 ?bool15 ?bool11)) ?bool13) (and (and (or ?bool15)) ?bool14)))
(check-sat)


-- iteration 930 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11001011100 #b0100011001111011111011011100101011100001111111100001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTN ?float6) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTP ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or (and (and (and ?bool15 ?bool14 ?bool13)))))
(check-sat)


-- iteration 931 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float2 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float8 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ((_ to_fp 5 11) RTN ?float9) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6 ((_ to_fp 8 24) RNE ?float9) ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 932 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float2 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ?float3 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or ?bool11 ?bool15 (and ?bool13 (and ?bool14 (or ?bool14)))))
(check-sat)


-- iteration 933 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 8 24) RNE ?float4) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ((_ to_fp 15 113) RTP ?float7) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 934 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01100001011 #b1010100011010001110001110010100110101101011101111100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 8 24) RTN ?float2) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTZ ?float7) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTN ?float9) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTZ ?float5) ?float2)))
; FINAL ASSERT
(assert (and (or ?bool13 (or ?bool11 ?bool13 ?bool13)) ?bool11))
(check-sat)


-- iteration 935 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float6 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float4 ((_ to_fp 11 53) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float10))))
; FINAL ASSERT
(assert (and ?bool13 ?bool15))
(check-sat)


-- iteration 936 --
(declare-fun f0 (Float128 Float64 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 5 11) RTN ?float4) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTN ?float5) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float3 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RNE ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool14 (and (and (and ?bool14 ?bool13))) ?bool14))
(check-sat)


-- iteration 937 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float2 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float7)))
; FINAL ASSERT
(assert (or ?bool14 (and (or (and ?bool11 ?bool14 ?bool12) ?bool15 (and ?bool14 ?bool12))) (or (and ?bool12 (or ?bool15 ?bool11 ?bool14)) (and ?bool11) ?bool13)))
(check-sat)


-- iteration 938 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ?float5 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RNE ?float5) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and (or ?bool11 (and ?bool15 (and ?bool14 ?bool14) ?bool14) (or ?bool12 (and ?bool15 ?bool15) (or ?bool13 ?bool11))) ?bool14 (or ?bool12 (and (or ?bool11 ?bool15 ?bool14) (or ?bool13) (or ?bool13)))))
(check-sat)


-- iteration 939 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTP ?float6) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and (and (or ?bool11) (or (or ?bool11))) ?bool11 (or ?bool11 ?bool13)))
(check-sat)


-- iteration 940 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ?float5 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 941 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11100 #b1000101110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b1000011111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float3 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float5 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float7 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (and ?bool14 ?bool12 ?bool14) ?bool13))
(check-sat)


-- iteration 942 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTN ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and (and ?bool15) ?bool13))
(check-sat)


-- iteration 943 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RTN ?float4) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTP ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTZ ?float7) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTZ ?float4) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 5 11) RNE ?float6))))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool11) (or ?bool12 ?bool13 (and (and ?bool11 ?bool11)))))
(check-sat)


-- iteration 944 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000100 #b01111000000000110100110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ((_ to_fp 11 53) RTZ ?float2) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RNE ?float5) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15 (or (or ?bool15 ?bool15))))
(check-sat)


-- iteration 945 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01010000111 #b1011111100000010001000110011010001111001100100110011)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTP ?float4) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 946 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10001111 #b00110100111010110110010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float10) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 5 11) RTZ ?float4))))
; FINAL ASSERT
(assert (and (or ?bool12 (or ?bool11 (or ?bool12)) (and (or ?bool11) ?bool12)) ?bool13))
(check-sat)


-- iteration 947 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float6 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RTP ?float3) ?float6)))
; FINAL ASSERT
(assert (or (or (or ?bool14 (or ?bool13 ?bool13 ?bool15) ?bool15))))
(check-sat)


-- iteration 948 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10000001 #b10010011101000100000100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float8 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float10) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float7) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float10) ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (and (and (and ?bool12 ?bool13) ?bool15)))
(check-sat)


-- iteration 949 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RNE ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTZ ?float4) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float3 ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float9) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (or ?bool11) ?bool12))
(check-sat)


-- iteration 950 --
(declare-fun f0 (Float64 Float32 Float16) Float64)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float2 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool12 ?bool13 (or (or (or ?bool15 ?bool14) (and ?bool13) ?bool11) (or (and ?bool14 ?bool11)) (or (or ?bool11)))))
(check-sat)


-- iteration 951 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 8 24) RTZ ?float2) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 8 24) RTP ?float4) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 11 53) RTP ?float4) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RNE ?float3) ?float6)))
; FINAL ASSERT
(assert (and ?bool13 (or (and (and ?bool13 ?bool14 ?bool15) (and ?bool14))) (or (and (and ?bool11 ?bool12) ?bool11 ?bool15))))
(check-sat)


-- iteration 952 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RNE ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 5 11) RTN ?float6) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTN ?float6 ((_ to_fp 8 24) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 5 11) RNE ?float9))))
; FINAL ASSERT
(assert (or ?bool15 (and (or (or ?bool13 ?bool13)) (and (and ?bool11 ?bool11 ?bool15)))))
(check-sat)


-- iteration 953 --
(declare-fun f0 (Float64 Float16 Float128) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTN ?float4) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ((_ to_fp 15 113) RTN ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float5 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float5 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTP ?float8) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTP ?float7) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RNE ?float6) ?float7)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool13 ?bool11) (or ?bool12) ?bool14))
(check-sat)


-- iteration 954 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float4 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 15 113) RTN ?float6) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or (and (or (or ?bool13 ?bool12) ?bool11))))
(check-sat)


-- iteration 955 --
(declare-fun f0 (Float64 Float128 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10111 #b1000000101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10101010 #b01010110010111010110100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float4) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ?float4 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 5 11) RTP ?float8) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RTN ?float9) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float9))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 956 --
(declare-fun f0 (Float128 Float128 Float16) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTN ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float6) ?float4 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float6 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 15 113) RTP ?float6) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float2) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (and (and (and ?bool14 (or ?bool13) (or ?bool14 ?bool14)) ?bool14) ?bool15 (or ?bool14 (and ?bool12) ?bool15)))
(check-sat)


-- iteration 957 --
(declare-fun f0 (Float64 Float32 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11101 #b0101010100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ?float5 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float8))))
; FINAL ASSERT
(assert (or (or (or (and ?bool13 ?bool14 ?bool13) ?bool14)) ?bool11 ?bool12))
(check-sat)


-- iteration 958 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00001100000 #b1110110010011011111001001010101100110000010100000101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float3 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool14)))
(check-sat)


-- iteration 959 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11011 #b0111110010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTN ?float7) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float7 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RNE ?float7) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 960 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11110 #b0010010011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 5 11) RNE ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RTZ ?float3) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 961 --
(declare-fun f0 (Float128 Float64 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10111010111 #b0111100011101001111111011111101110101101000100110010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 8 24) RTN ?float3) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTP ?float5) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 962 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTP ?float7) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ?float8)))
; FINAL ASSERT
(assert (and ?bool11 ?bool11))
(check-sat)


-- iteration 963 --
(declare-fun f0 (Float16 Float128 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float5 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float7 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float2 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or ?bool14 (and (or (and ?bool15 ?bool14 ?bool14) (or ?bool12 ?bool12 ?bool15) ?bool14))))
(check-sat)


-- iteration 964 --
(declare-fun f0 (Float64 Float64 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 11 53) RTP ?float2) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RNE ?float8) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 5 11) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float3) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTP ?float7) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTP ?float4) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 8 24) RTN ?float7))))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool14 ?bool14)))
(check-sat)


-- iteration 965 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float3 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float7 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float8 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 966 --
(declare-fun f0 (Float16 Float32 Float32) Float16)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float5 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and (or ?bool14)))
(check-sat)


-- iteration 967 --
(declare-fun f0 (Float128 Float16 Float64) Float16)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10011111 #b11101101101101001001000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RNE ?float6) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float6 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTZ ?float4) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float2)))
; FINAL ASSERT
(assert (and ?bool13 (or (and (and ?bool11 ?bool12 ?bool11)) (or ?bool11 ?bool11)) (or ?bool13)))
(check-sat)


-- iteration 968 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ((_ to_fp 8 24) RNE ?float7) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTZ ?float5) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14 (or (and (or ?bool12 ?bool11 ?bool11) ?bool11 (or ?bool15 ?bool11)) (or ?bool13 ?bool13) ?bool11)))
(check-sat)


-- iteration 969 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01010001 #b10010101001010110010110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 15 113) RTZ ?float4) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and (and (and ?bool15 ?bool11 (and ?bool13)) (or (and ?bool13 ?bool15))) ?bool15))
(check-sat)


-- iteration 970 --
(declare-fun f0 (Float128 Float64 Float32) Float64)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float2 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float3 ((_ to_fp 15 113) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (and ?bool11 (or ?bool14) ?bool12) ?bool13))
(check-sat)


-- iteration 971 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float4 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool12))
(check-sat)


-- iteration 972 --
(declare-fun f0 (Float64 Float128) Float32)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTN ?float7) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float4 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ((_ to_fp 11 53) RTN ?float7))))
; FINAL ASSERT
(assert (and (or ?bool13 (or (and ?bool12) ?bool14) (and ?bool14 ?bool12 (or ?bool14 ?bool14 ?bool13))) ?bool15))
(check-sat)


-- iteration 973 --
(declare-fun f0 (Float32 Float16 Float64) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b1011001100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float5 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool12 ?bool13) ?bool11 (or ?bool13 (and ?bool11))))
(check-sat)


-- iteration 974 --
(declare-fun f0 (Float32 Float32 Float64) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float5 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ((_ to_fp 15 113) RTN ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (and (and (or ?bool15)) ?bool11))
(check-sat)


-- iteration 975 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float2 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float7 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float5 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float5)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 (and ?bool15 ?bool12 ?bool12)))
(check-sat)


-- iteration 976 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110010100011101 #b0001000100100100011001100000111100110111000100000111010101111111000101101101101101001001110011001101010101110110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTZ ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float4 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float5 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 8 24) RNE ?float4) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTN ?float9))))
; FINAL ASSERT
(assert (and (and (and ?bool15 (and ?bool14 ?bool11))) ?bool13 ?bool12))
(check-sat)


-- iteration 977 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ?float5 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float6 ((_ to_fp 11 53) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RTP ?float7) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ?float5 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float5) ?float5 ((_ to_fp 11 53) RTN ?float9))))
; FINAL ASSERT
(assert (and (and (and (or ?bool13))) (and ?bool11) (and ?bool13)))
(check-sat)


-- iteration 978 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float6) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ((_ to_fp 11 53) RTZ ?float2))))
; FINAL ASSERT
(assert (and (and (and ?bool11) ?bool13) (and ?bool12 ?bool14)))
(check-sat)


-- iteration 979 --
(declare-fun f0 (Float32 Float64 Float128) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ((_ to_fp 11 53) RTN ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTP ?float2) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float4) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float8) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ((_ to_fp 11 53) RTN ?float7))))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool12) (or ?bool11)))
(check-sat)


-- iteration 980 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11000000101 #b1010010101101011110000111001010100111011011100111001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float5 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float7 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float9) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 981 --
(declare-fun f0 (Float16 Float128 Float64) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool12) ?bool14))
(check-sat)


-- iteration 982 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float4 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 8 24) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTN ?float4) ?float10)))
; FINAL ASSERT
(assert (or (or ?bool14) ?bool15))
(check-sat)


-- iteration 983 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTZ ?float4 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float9) ((_ to_fp 15 113) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool13 ?bool13 ?bool14))
(check-sat)


-- iteration 984 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101011110001010 #b1100000010100000100011110001110111010111010111011100110110010000010100010000011110101011001011000011001011111010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float7)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 985 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11000001 #b11001010001000001111011)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float4 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float2 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or (and (or ?bool15 ?bool11 ?bool14) ?bool12) ?bool12))
(check-sat)


-- iteration 986 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTN ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float3 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float10) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTP ?float10) ?float5)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 987 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float10) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (or (or (or ?bool11 (and ?bool12 ?bool13 ?bool15)) (and (and ?bool12 ?bool14) ?bool11 (and ?bool15)))))
(check-sat)


-- iteration 988 --
(declare-fun f0 (Float64 Float16 Float128) Float32)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float3 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float2 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float7 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float2 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RNE ?float3) ?float8)))
; FINAL ASSERT
(assert (and ?bool11 (or (and (and ?bool11) ?bool11 ?bool12) ?bool14) (and ?bool13 (or (and ?bool11 ?bool12 ?bool15) ?bool12) ?bool12)))
(check-sat)


-- iteration 989 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00111 #b1110110101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float5 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float5 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float9 ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (or ?bool14) ?bool14 (or (or (and ?bool12 ?bool13 ?bool14)) ?bool15 (and ?bool11 ?bool14))))
(check-sat)


-- iteration 990 --
(declare-fun f0 (Float16 Float16 Float32) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float4) ?float7 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (or (or ?bool11 (and ?bool14 ?bool12) (or ?bool15)) ?bool15)))
(check-sat)


-- iteration 991 --
(declare-fun f0 (Float128 Float128 Float32) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11011101000 #b0001000010110101100011010001100000000000001111100101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ?float4 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ((_ to_fp 11 53) RTN ?float7) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float10) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ((_ to_fp 8 24) RNE ?float5))))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool12)))
(check-sat)


-- iteration 992 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01010001001 #b0000110011110101101100110100011000110100000011011111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float2 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float5 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or (or (or ?bool13 (or ?bool14 ?bool11) ?bool14)) ?bool14 (and ?bool11 ?bool11)))
(check-sat)


-- iteration 993 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ((_ to_fp 5 11) RTZ ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float6 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float8 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13 (and (and ?bool12 ?bool12 ?bool11) (and ?bool11) ?bool13)))
(check-sat)


-- iteration 994 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 11 53) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RTN ?float6) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTN ?float2) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float6))))
; FINAL ASSERT
(assert (and ?bool14 (or (or ?bool11 (and ?bool11)))))
(check-sat)


-- iteration 995 --
(declare-fun f0 (Float32 Float16 Float128) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float4 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float8 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (or (or (or ?bool12 (or ?bool12) (and ?bool11 ?bool14 ?bool15)) ?bool12 ?bool11) (or (and ?bool12) ?bool11)))
(check-sat)


-- iteration 996 --
(declare-fun f0 (Float64 Float32 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00011 #b0110001011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float3 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 11 53) RNE ?float4) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (and (or ?bool13) ?bool14))
(check-sat)


-- iteration 997 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTP ?float5) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 11 53) RTP ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float10)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 998 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 11 53) RTZ ?float6))))
; FINAL ASSERT
(assert (and ?bool11 ?bool14))
(check-sat)


-- iteration 999 --
(declare-fun f0 (Float64 Float128 Float64) Float16)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10001 #b1001101001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ((_ to_fp 5 11) RTN ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float7) ?float3 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float8 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float7 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RTN ?float2) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and (and ?bool11 (or (or ?bool13 ?bool12)) ?bool11) ?bool15))
(check-sat)


-- iteration 1000 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10101 #b0101011111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float7 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and (and (or (or ?bool11 ?bool11) (and ?bool12 ?bool11)) (or (and ?bool12)) (or (and ?bool15 ?bool15 ?bool15)))))
(check-sat)


-- iteration 1001 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11011100 #b01100110001110010111011)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float3 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14))
(check-sat)


-- iteration 1002 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01101011 #b01010001100110000001110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float8 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float9 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RNE ?float2) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float10)))
; FINAL ASSERT
(assert (or ?bool13 (or (or ?bool12 (or ?bool13 ?bool13) ?bool15)) (and ?bool11)))
(check-sat)


-- iteration 1003 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 11 53) RNE ?float6) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool12 ?bool11) ?bool13))
(check-sat)


-- iteration 1004 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01101101010 #b1110001000011010000010010010011101010110111101010101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 15 113) RTP ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float3 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float7 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool13 (or (or ?bool15 ?bool13 ?bool15) ?bool13)) ?bool15 ?bool13))
(check-sat)


-- iteration 1005 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11001000101 #b1011110100101010110001110111001111001100000001001101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float3 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 11 53) RTZ ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or (and ?bool11)))
(check-sat)


-- iteration 1006 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTP ?float2) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float7 ((_ to_fp 15 113) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (and (and (or (or ?bool12 ?bool14) ?bool14) ?bool15 ?bool14) ?bool14))
(check-sat)


-- iteration 1007 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ?float3 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float3 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTN ?float3) ?float2)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1008 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float7) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float7 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (and (and ?bool14 (or ?bool15))))
(check-sat)


-- iteration 1009 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 1010 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 8 24) RTN ?float8) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or (and (and ?bool15))))
(check-sat)


-- iteration 1011 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ((_ to_fp 11 53) RTN ?float5) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTN ?float10) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float9) ?float10)))
; FINAL ASSERT
(assert (or (or (and (or ?bool13 ?bool14))) (or (or (and ?bool15 ?bool11) ?bool14) (and (and ?bool13) (or ?bool14 ?bool11) ?bool14) (or ?bool13 (and ?bool12 ?bool12) (or ?bool14)))))
(check-sat)


-- iteration 1012 --
(declare-fun f0 (Float32 Float32 Float128) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101000000010111 #b0000101111011010011111010001100001001000110101111000011010110110110011100011100010110110000110111000111101111110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ((_ to_fp 15 113) RNE ?float7) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ((_ to_fp 15 113) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (and ?bool12 (or ?bool15 ?bool15 ?bool14)) (or (or ?bool11 ?bool15 ?bool15))))
(check-sat)


-- iteration 1013 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01000111 #b10110001001011011111111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float8)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14 ?bool12))
(check-sat)


-- iteration 1014 --
(declare-fun f0 (Float128 Float64 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01010 #b0001110101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RTZ ?float5) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTZ ?float7) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1015 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b011100100000101 #b1110001001101111110101000000101101010101011101010000110110100010000001110000000110000010001000000001111111111000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001001011000101 #b1011000000000111101010110010111000000110001000100100100100001011101111110100001010011010001000011010001011111010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 15 113) RTZ ?float3) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float6 ((_ to_fp 15 113) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (or (or ?bool15 (and (or ?bool13 ?bool13 ?bool13)) (and ?bool11 (or ?bool14 ?bool12 ?bool11))) (or ?bool11 ?bool11) ?bool13))
(check-sat)


-- iteration 1016 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 15 113) RTN ?float4) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float7 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 11 53) RNE ?float9))))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1017 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ?float3 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 8 24) RNE ?float5) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (and ?bool15 ?bool13))
(check-sat)


-- iteration 1018 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01001 #b0101000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 11 53) RTZ ?float6) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float5 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1019 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float9)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 1020 --
(declare-fun f0 (Float16 Float32 Float64) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RTP ?float6) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float6 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float4) ?float5 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RNE ?float5) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float2) ?float7)))
; FINAL ASSERT
(assert (or (or (and (or ?bool15 ?bool14) ?bool14 ?bool13) ?bool12 (and ?bool13)) (or (and (and ?bool11) ?bool11 (or ?bool14 ?bool13 ?bool11)) ?bool11) (and ?bool11)))
(check-sat)


-- iteration 1021 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float4 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float4 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13))
(check-sat)


-- iteration 1022 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float5 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ((_ to_fp 5 11) RNE ?float4))))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool14 ?bool15 (or (or ?bool13))) (or (and ?bool11 (or ?bool13 ?bool13 ?bool11)) ?bool11)))
(check-sat)


-- iteration 1023 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1024 --
(declare-fun f0 (Float128 Float16 Float128) Float16)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float4 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float7) ?float9 ?float5)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13))
(check-sat)


-- iteration 1025 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b100111011010001 #b0100101010010111100001010011011110101111100110011100110110001111111011010000101110010001010101001000010011101111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ?float4 ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RNE ?float6) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float9)))
; FINAL ASSERT
(assert (or (or (or (or ?bool11 ?bool11) ?bool11) ?bool12) (or ?bool11 ?bool12 (and ?bool15))))
(check-sat)


-- iteration 1026 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RNE ?float4) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float8) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 11 53) RTN ?float10) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float7)))
; FINAL ASSERT
(assert (and (and (or ?bool12)) ?bool11 (or ?bool12 ?bool15)))
(check-sat)


-- iteration 1027 --
(declare-fun f0 (Float16 Float32 Float128) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float7 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RTP ?float8))))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1028 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b111100101100001 #b1001010100001110000000011011010101111110111000001011101101000111011100000100011111010100101100110001010000110101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTZ ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float6) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and ?bool11 (or ?bool12 (and (and ?bool12)) ?bool13)))
(check-sat)


-- iteration 1029 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101101010010100 #b1010110100001011111000010101100111110011100011111111100111010111010110001101110011101010101000101101111010010111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 8 24) RNE ?float5) ?float6)))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool14 (or ?bool11)) (and ?bool11 (or (or ?bool12 ?bool15 ?bool11) (and ?bool12)) (and ?bool12 (and ?bool15))) ?bool14))
(check-sat)


-- iteration 1030 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTZ ?float6) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ?float2 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or (or (or (or ?bool12 ?bool11))) ?bool15 (and ?bool15)))
(check-sat)


-- iteration 1031 --
(declare-fun f0 (Float32 Float16 Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 8 24) RTP ?float4) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RNE ?float8) ?float4)))
; FINAL ASSERT
(assert (or (or (and (and ?bool14 ?bool12 ?bool11) ?bool15 ?bool14)) (or ?bool12 (and ?bool15)) ?bool12))
(check-sat)


-- iteration 1032 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float3 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (or (or (and ?bool13 (or ?bool11))) (or ?bool13)))
(check-sat)


-- iteration 1033 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float2 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float6 ((_ to_fp 5 11) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (and (or (and ?bool11 ?bool13 ?bool15) (or ?bool12 ?bool12) ?bool14)) (or (and ?bool14 (or ?bool14 ?bool15) (or ?bool13 ?bool11)) ?bool11 ?bool14)))
(check-sat)


-- iteration 1034 --
(declare-fun f0 (Float64 Float32 Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float3 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float7 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float10) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool12)))
(check-sat)


-- iteration 1035 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float8 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (and (or (and (and ?bool15) ?bool14)) (or ?bool11 (and (or ?bool12) ?bool14) ?bool12)))
(check-sat)


-- iteration 1036 --
(declare-fun f0 (Float128 Float32 Float64) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ?float4 ((_ to_fp 15 113) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 15 113) RNE ?float6))))
; FINAL ASSERT
(assert (and (and (and ?bool14) (and ?bool14 ?bool11))))
(check-sat)


-- iteration 1037 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01011011001 #b0101001011010111000111011010101101111000111010000010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float2 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 11 53) RTP ?float2) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float3 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float3 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 5 11) RTP ?float6) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (and (or ?bool12 ?bool15) (or (or ?bool13) ?bool15 ?bool14) ?bool15)))
(check-sat)


-- iteration 1038 --
(declare-fun f0 (Float32 Float128 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTP ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float3 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 5 11) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTN ?float3) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float7)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool15 ?bool12) (or ?bool14 ?bool14 (and ?bool15)) (or ?bool15)))
(check-sat)


-- iteration 1039 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 11 53) RTP ?float2) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float2 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (or (or (and ?bool15 ?bool11)) ?bool12))
(check-sat)


-- iteration 1040 --
(declare-fun f0 (Float16 Float128 Float64) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000011 #b11011000010111100010011)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ((_ to_fp 8 24) RTN ?float9))))
; FINAL ASSERT
(assert (and ?bool15 (or (and (and ?bool12 ?bool14 ?bool11) ?bool14 ?bool12) (or (or ?bool13 ?bool15 ?bool14) ?bool12))))
(check-sat)


-- iteration 1041 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float9 ((_ to_fp 15 113) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool14 ?bool11)))
(check-sat)


-- iteration 1042 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float3 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float3 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTP ?float4) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (or (or (and ?bool14 (and ?bool13 ?bool12))) (or (or (or ?bool11) ?bool11 (or ?bool12))) (and (or (and ?bool12 ?bool12) ?bool11))))
(check-sat)


-- iteration 1043 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTN ?float7) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ?float7)))
; FINAL ASSERT
(assert (and (and (or ?bool13 ?bool12 ?bool13) (and ?bool11)) (or (and ?bool13 ?bool12 ?bool12)) ?bool14))
(check-sat)


-- iteration 1044 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float5 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float4) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float5) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float7 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float4) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float8) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float3) ?float9)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15 (and ?bool14)))
(check-sat)


-- iteration 1045 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float4) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float7) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (and (and (or ?bool12 ?bool11)) ?bool12))
(check-sat)


-- iteration 1046 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00011 #b1110011111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float5 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float6 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or (or (and ?bool15) (and ?bool11 ?bool13 (or ?bool13))) (or (or (or ?bool12 ?bool12 ?bool11) (and ?bool14 ?bool14))) ?bool13))
(check-sat)


-- iteration 1047 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ?float2 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float2 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTP ?float6) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 11 53) RTP ?float9) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 1048 --
(declare-fun f0 (Float32 Float32 Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float5 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float5 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ((_ to_fp 5 11) RTZ ?float3) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1049 --
(declare-fun f0 (Float128 Float64 Float64) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110000011011000 #b1011101010111000110111110011000100001001100101010110011001010111111011001011110100000010100100000101101011111100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float2 ?float3 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float2 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float2 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or (and ?bool15 (or (or ?bool11 ?bool15))) (or ?bool12 (and (and ?bool11 ?bool13 ?bool13))) (or (or (or ?bool12) (or ?bool13) (and ?bool13)) (and ?bool14))))
(check-sat)


-- iteration 1050 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01010 #b0011100001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (and (or ?bool11) (or (and ?bool13 ?bool14) (or (or ?bool15 ?bool13 ?bool12)) ?bool15)))
(check-sat)


-- iteration 1051 --
(declare-fun f0 (Float16 Float128 Float64) Float64)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTP ?float6) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 15 113) RTP ?float5) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTP ?float9) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or (or (or ?bool14) (and ?bool14 (and ?bool15 ?bool12) (or ?bool14))) (or (and (or ?bool12 ?bool13 ?bool13) (or ?bool14) ?bool13) (or ?bool11 (or ?bool12 ?bool13)) (or ?bool11 (or ?bool14 ?bool12 ?bool15) (and ?bool11 ?bool15)))))
(check-sat)


-- iteration 1052 --
(declare-fun f0 (Float16 Float16 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 8 24) RTP ?float2) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float3))))
; FINAL ASSERT
(assert (and (or (or ?bool13))))
(check-sat)


-- iteration 1053 --
(declare-fun f0 (Float128 Float32 Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or (or ?bool15 (and (or ?bool15 ?bool13) (or ?bool14))) (and (or (or ?bool13 ?bool12)) (or (and ?bool14 ?bool14) (and ?bool13 ?bool11)))))
(check-sat)


-- iteration 1054 --
(declare-fun f0 (Float64 Float32 Float128) Float64)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float6 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float3 ((_ to_fp 8 24) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1055 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b010010001110000 #b1011100111101011000011110011110101111011011010001101100111001110010101010101100110110010101000010111110000001001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float4) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and (or (and (or ?bool11 ?bool11)) ?bool14)))
(check-sat)


-- iteration 1056 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00100011 #b10011011100101100001001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float6 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13 (and ?bool13 (and ?bool14 (and ?bool14 ?bool13) ?bool15))))
(check-sat)


-- iteration 1057 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTN ?float3) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and (and ?bool13) (or ?bool12 (or ?bool12 (or ?bool14 ?bool14) (or ?bool12)) ?bool12)))
(check-sat)


-- iteration 1058 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10111 #b0101100011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float5 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float5 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ?float5 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ((_ to_fp 15 113) RNE ?float6))))
; FINAL ASSERT
(assert (and (and (and ?bool13 (or ?bool13 ?bool11) ?bool15)) (or (and (and ?bool14)) (or ?bool12 (and ?bool14 ?bool11)) ?bool11)))
(check-sat)


-- iteration 1059 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11100 #b0100100001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ?float2 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTN ?float4) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12))
(check-sat)


-- iteration 1060 --
(declare-fun f0 (Float64 Float32 Float16) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ?float4 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTP ?float7) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 1061 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011110011101111 #b1000101101001100111100101010010000110001011110000100011011011100011101111101000001110000101101111110110010011110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RNE ?float2) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTN ?float4) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ((_ to_fp 11 53) RTZ ?float9))))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 1062 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float7 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool13 (or ?bool13 (and ?bool11)))))
(check-sat)


-- iteration 1063 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ?float6 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ((_ to_fp 11 53) RTZ ?float8))))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool11 (or ?bool14 (or ?bool15))) ?bool12 (or ?bool11 (and ?bool14 ?bool15 (and ?bool12 ?bool14)) (and ?bool11))))
(check-sat)


-- iteration 1064 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RNE ?float4) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RNE ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool13 (or (or (or ?bool12) ?bool14 ?bool14) ?bool13) (or ?bool13)))
(check-sat)


-- iteration 1065 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10011110001 #b1110000011001010111001111010100110101111011101101110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float6) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or (and (or ?bool15) (and (and ?bool15 ?bool15) (or ?bool14 ?bool14) (and ?bool14 ?bool11 ?bool13))) (or (and ?bool14 ?bool11 ?bool14) (or ?bool13 ?bool14 (and ?bool15))) (or ?bool13 ?bool11)))
(check-sat)


-- iteration 1066 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float5 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTZ ?float6 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ?float8 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 5 11) RNE ?float2) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool12 ?bool14))
(check-sat)


-- iteration 1067 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 8 24) RTP ?float3) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTN ?float6) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (or (and (and (or ?bool11) (or ?bool11)) (and (and ?bool13 ?bool12 ?bool14) ?bool15)) (and (and ?bool12)) ?bool14))
(check-sat)


-- iteration 1068 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 5 11) RTP ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float8 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RTP ?float4) ?float5)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11))
(check-sat)


-- iteration 1069 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10100101 #b11111101101100110110010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float3 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ?float2)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool13) ?bool11 (or (or ?bool14) (or (or ?bool13) ?bool15 ?bool12) (or (and ?bool11 ?bool12 ?bool14)))))
(check-sat)


-- iteration 1070 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ?float2 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float2 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float6 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool15) (or (or ?bool15 ?bool13 (and ?bool11 ?bool15 ?bool15)) ?bool11 ?bool13)))
(check-sat)


-- iteration 1071 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110001110101110 #b1001011110111111000010001010101011110101100100110111100110100011100110101101011011011000001011010001000011111000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float4) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float4) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 11 53) RTN ?float6) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTN ?float6) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float5 ?float5)))
; FINAL ASSERT
(assert (and (and ?bool11 (and (and ?bool11 ?bool15 ?bool14) (or ?bool11 ?bool14) (and ?bool14 ?bool13)))))
(check-sat)


-- iteration 1072 --
(declare-fun f0 (Float64 Float128 Float32) Float32)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00111 #b1010011101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float3) ?float5 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTZ ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTZ ?float7) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 11 53) RTN ?float6))))
; FINAL ASSERT
(assert (or ?bool13 ?bool13 (or ?bool12)))
(check-sat)


-- iteration 1073 --
(declare-fun f0 (Float16 Float16 Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float4 ?float4 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float5 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float7) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and (and ?bool15) ?bool12))
(check-sat)


-- iteration 1074 --
(declare-fun f0 (Float32 Float64 Float64) Float16)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float8 ?float6 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTP ?float6) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float8)))
; FINAL ASSERT
(assert (or (or ?bool12 (or ?bool13)) ?bool12))
(check-sat)


-- iteration 1075 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000100011 #b1100101011000001010110001010101010100011111010011101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ((_ to_fp 5 11) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool13 (or (and (and ?bool12) (or ?bool12 ?bool12 ?bool12)) (or (and ?bool12 ?bool15) (or ?bool11) ?bool11) ?bool14)))
(check-sat)


-- iteration 1076 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11111 #b0011001011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ?float3)))
; FINAL ASSERT
(assert (or (or (or ?bool14) ?bool13) (and ?bool11) (or (or (and ?bool15 ?bool15) (and ?bool11 ?bool14)) ?bool13)))
(check-sat)


-- iteration 1077 --
(declare-fun f0 (Float32 Float64 Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100001101110100 #b1111101110010101000101010001010000010010010111010000100011001010001100110110100001010100101101000100011001111010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10111111 #b00100011111111100010111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float4 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float8)))
; FINAL ASSERT
(assert (and ?bool12 (or (or (and ?bool14) ?bool13))))
(check-sat)


-- iteration 1078 --
(declare-fun f0 (Float128 Float32 Float32) Float64)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b101000101010011 #b0011111001101100010101110001001011001110001100001001000101001011000000001000100111001000011100111001011100110100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float6 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float7 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float7) ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RNE ?float2) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RTN ?float6) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool14 (or (or ?bool15) ?bool11))))
(check-sat)


-- iteration 1079 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00111111100 #b1001001000010111100111010101011011010101010001001011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool15 (or (or (or ?bool15 ?bool14) ?bool13) (or (or ?bool11 ?bool14) ?bool11 ?bool13)) (or ?bool11)))
(check-sat)


-- iteration 1080 --
(declare-fun f0 (Float128 Float16 Float64) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float4 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float4 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float6)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1081 --
(declare-fun f0 (Float128 Float16 Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTP ?float5) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 5 11) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ((_ to_fp 8 24) RTN ?float10))))
; FINAL ASSERT
(assert (or ?bool14 ?bool12))
(check-sat)


-- iteration 1082 --
(declare-fun f0 (Float128 Float16 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RNE ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ?float8)))
; FINAL ASSERT
(assert (or (or (and ?bool12) ?bool13 ?bool15) (and (and (and ?bool13 ?bool12 ?bool14) ?bool15))))
(check-sat)


-- iteration 1083 --
(declare-fun f0 (Float64 Float32 Float64) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11001 #b0100010010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 15 113) RTP ?float5) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 5 11) RNE ?float9))))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1084 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float2 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float7 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool15 (and ?bool13)))
(check-sat)


-- iteration 1085 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 5 11) RTP ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float5 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float5 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float3 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 8 24) RNE ?float8) ?float10)))
; FINAL ASSERT
(assert (and ?bool13 (and (or (and ?bool14)) ?bool14 (or (or ?bool11 ?bool15 ?bool14) ?bool13 ?bool12))))
(check-sat)


-- iteration 1086 --
(declare-fun f0 (Float128 Float32 Float64) Float32)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11101000 #b00101000000110001100100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float2) ?float6 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 8 24) RTZ ?float10) ?float8)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool12 ?bool15) ?bool12))
(check-sat)


-- iteration 1087 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float6 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTP ?float4) ?float3)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool12 ?bool14) (or (and (and ?bool13 ?bool14 ?bool14) ?bool11)) (and ?bool11 ?bool14 (and ?bool11 (or ?bool14)))))
(check-sat)


-- iteration 1088 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b010111001010100 #b0110101010111100001011011111110100011010110110110100110000001010101010000011100010100010000001001011011110001010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ?float7 ((_ to_fp 15 113) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RNE ?float8) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool14 (or (or ?bool11)) ?bool14))
(check-sat)


-- iteration 1089 --
(declare-fun f0 (Float16 Float16 Float64) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 5 11) RTP ?float4) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 5 11) RNE ?float7) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float3 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float5 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float8) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15))
(check-sat)


-- iteration 1090 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RTN ?float5) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float2 ((_ to_fp 5 11) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float3)))
; FINAL ASSERT
(assert (or ?bool15 (and (and ?bool11 (or ?bool13 ?bool15)) ?bool14) ?bool12))
(check-sat)


-- iteration 1091 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11011100 #b11000101000001011101101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float2 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float3 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float2) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RNE ?float8) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float3) ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool14 ?bool13 (and ?bool13 ?bool11))))
(check-sat)


-- iteration 1092 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float6 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTN ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (and ?bool12 ?bool15))
(check-sat)


-- iteration 1093 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RNE ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float3)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1094 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b011010000100110 #b1110111010001011110100010011110010011100010101010011001110110000101100100111000010001000001000011101100101100011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float5 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTZ ?float4) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float8))))
; FINAL ASSERT
(assert (or (or (or ?bool14 (or ?bool15 ?bool12 ?bool15)) ?bool12 (and (or ?bool11 ?bool12) (or ?bool13 ?bool13))) (or ?bool13)))
(check-sat)


-- iteration 1095 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01011 #b0101101001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float5 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float6 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTN ?float7) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float4 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float9)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 (and ?bool13 ?bool13)))
(check-sat)


-- iteration 1096 --
(declare-fun f0 (Float64 Float64 Float32) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 11 53) RTZ ?float5) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float4 ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RTP ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1097 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01000001 #b11110100110011111111101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float6) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTZ ?float6) ?float7)))
; FINAL ASSERT
(assert (and (or ?bool15 (or (or ?bool12) ?bool15 ?bool11)) ?bool13))
(check-sat)


-- iteration 1098 --
(declare-fun f0 (Float32 Float128 Float128) Float32)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RNE ?float3 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ((_ to_fp 8 24) RTZ ?float4) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ?float10)))
; FINAL ASSERT
(assert (or (and ?bool14 (or (and ?bool11))) (or ?bool14 ?bool12)))
(check-sat)


-- iteration 1099 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011011010011010 #b0000110001111011001101001000011000010000001010101001000011110111100101110001011111000101010111101101110000110111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ((_ to_fp 11 53) RTZ ?float4) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ?float2)))
; FINAL ASSERT
(assert (and (or (or (or ?bool12 ?bool12) ?bool15) ?bool11)))
(check-sat)


-- iteration 1100 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10101 #b0101011101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ((_ to_fp 15 113) RTP ?float5) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTZ ?float3) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float8) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float3) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RNE ?float6) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 15 113) RTP ?float7))))
; FINAL ASSERT
(assert (and (or ?bool13) ?bool13 (or (or ?bool13 ?bool12) ?bool13)))
(check-sat)


-- iteration 1101 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float7 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RNE ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float10)))
; FINAL ASSERT
(assert (and ?bool15 ?bool11))
(check-sat)


-- iteration 1102 --
(declare-fun f0 (Float16 Float64 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 11 53) RTN ?float2) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 11 53) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float4)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool14 ?bool15 ?bool12)))
(check-sat)


-- iteration 1103 --
(declare-fun f0 (Float128 Float32 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100101101000101 #b0010101000111001101000011011100000010110001011101010000110111101110110000100000100111010111000010101010011100000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ?float4 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 15 113) RTN ?float6) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RNE ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTP ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (and ?bool14 (and ?bool15)) (and (or ?bool15 ?bool12))))
(check-sat)


-- iteration 1104 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float5 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ((_ to_fp 15 113) RTP ?float10))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 1105 --
(declare-fun f0 (Float64 Float64 Float128) Float32)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01001100011 #b0110110111010000101001011001011111010011110110100001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RNE ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float4 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTP ?float4) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float5) ?float8 ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or (and ?bool15) ?bool11))
(check-sat)


-- iteration 1106 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 5 11) RTN ?float7) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 11 53) RNE ?float9) ?float4)))
; FINAL ASSERT
(assert (or (and ?bool15) (and ?bool15 (and ?bool12) ?bool14)))
(check-sat)


-- iteration 1107 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float128 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11111010110 #b0101001011000011010010011110101001100111101110000110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float2 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float5) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ?float6 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RTP ?float10) ?float3)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 1108 --
(declare-fun f0 (Float128 Float32 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 8 24) RTP ?float2) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float3)))
; FINAL ASSERT
(assert (and (or (and ?bool15 (and ?bool15 ?bool15)))))
(check-sat)


-- iteration 1109 --
(declare-fun f0 (Float32 Float32 Float128) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTZ ?float9) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (and ?bool12 (and (and (or ?bool14) (and ?bool14 ?bool15)) ?bool14) ?bool13))
(check-sat)


-- iteration 1110 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RNE ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RTZ ?float4) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ((_ to_fp 15 113) RTZ ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float4) ?float4 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool15 (and (or ?bool12) (or (and ?bool14))) ?bool11))
(check-sat)


-- iteration 1111 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01110 #b0110100000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTN ?float3) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float4 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float5) ?float3 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or (and ?bool13 (and (or ?bool12 ?bool14)) (or (or ?bool13 ?bool11))) ?bool13 (or (and ?bool15))))
(check-sat)


-- iteration 1112 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ((_ to_fp 15 113) RTP ?float6) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float2 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 5 11) RTN ?float4) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 1113 --
(declare-fun f0 (Float64 Float128 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float4) ?float4 ((_ to_fp 11 53) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or (and ?bool11 (and (or ?bool14) (and ?bool15))) (or (or (and ?bool12) ?bool14) (and ?bool14 ?bool11) (and (or ?bool12)))))
(check-sat)


-- iteration 1114 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ((_ to_fp 11 53) RTZ ?float3) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float2 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float3 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTN ?float5) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float10)))
; FINAL ASSERT
(assert (and (or (and ?bool14 ?bool11) (and (and ?bool15 ?bool11 ?bool13) (and ?bool14)))))
(check-sat)


-- iteration 1115 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01001 #b0001110010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ((_ to_fp 5 11) RTP ?float5) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RTZ ?float8) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float8)))
; FINAL ASSERT
(assert (or (and ?bool15) ?bool11 ?bool11))
(check-sat)


-- iteration 1116 --
(declare-fun f0 (Float32 Float64 Float64) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float2 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ((_ to_fp 8 24) RTP ?float6) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float2 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and (or ?bool11 (or (or ?bool12)) (or (or ?bool14 ?bool11))) ?bool15 ?bool11))
(check-sat)


-- iteration 1117 --
(declare-fun f0 (Float64 Float32 Float32) Float64)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001101100001100 #b0000010111101010001100001100001101000001100110111101001111101000001101011010111110001000101100111110000001000101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float4 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float3 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float5 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 11 53) RTZ ?float3) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RNE ?float9) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or (or (or ?bool11) ?bool15) (and ?bool15 ?bool15 (or ?bool12))))
(check-sat)


-- iteration 1118 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RTP ?float3) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float2 ((_ to_fp 11 53) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (or ?bool12 (and (or (and ?bool12 ?bool11) (and ?bool14)) (and (or ?bool12) (or ?bool15)))))
(check-sat)


-- iteration 1119 --
(declare-fun f0 (Float128 Float16 Float16) Float64)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01111 #b0001100011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RNE ?float5) ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (or (and (and ?bool13) (and ?bool11 ?bool13 ?bool15) ?bool11)) ?bool12))
(check-sat)


-- iteration 1120 --
(declare-fun f0 (Float16 Float16 Float32) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 5 11) RTN ?float3) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float3) ?float4 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float8 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float9 ?float2 ((_ to_fp 8 24) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or ?bool15 ?bool15 ?bool12))
(check-sat)


-- iteration 1121 --
(declare-fun f0 (Float16 Float128 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float7 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RNE ?float10) ?float8)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool13 ?bool13) ?bool14))
(check-sat)


-- iteration 1122 --
(declare-fun f0 (Float16 Float64 Float128) Float64)
(declare-fun p0 (Float64 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101010001100001 #b1011001011110011010001110101111010110011010110110000101110100001010011111100010101110100110110101010110101010101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 11 53) RTZ ?float2) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTN ?float3) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RTN ?float10) ?float5)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1123 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float3) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float2 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTP ?float7) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and (and ?bool15 (and (and ?bool12 ?bool12) ?bool12)) ?bool11 ?bool15))
(check-sat)


-- iteration 1124 --
(declare-fun f0 (Float64 Float128) Float32)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTN ?float2) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float9) ((_ to_fp 15 113) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float9) ?float8 ((_ to_fp 11 53) RTZ ?float10))))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool11 ?bool12) ?bool15 (and ?bool15 (or ?bool13 ?bool13 (or ?bool13 ?bool12 ?bool14)) ?bool14)))
(check-sat)


-- iteration 1125 --
(declare-fun f0 (Float16 Float32 Float16) Float64)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTP ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 15 113) RTN ?float2) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ((_ to_fp 11 53) RTZ ?float5) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 8 24) RTN ?float4))))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool14 (or ?bool11 (and ?bool12 ?bool12 ?bool13))) ?bool14))
(check-sat)


-- iteration 1126 --
(declare-fun f0 (Float128 Float64 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ?float2 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float3 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTN ?float7 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTN ?float4) ?float2)))
; FINAL ASSERT
(assert (or (and (or (and ?bool11)) (or (or ?bool15 ?bool13 ?bool14)) (and (and ?bool14 ?bool14 ?bool12) (and ?bool14))) ?bool15 (and ?bool15 ?bool11)))
(check-sat)


-- iteration 1127 --
(declare-fun f0 (Float32 Float128 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110011000110001 #b1111010011101100001010111110101111010110010001100110001011110100001110100010111111110001100000111010100101101110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ?float7 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 8 24) RTP ?float9) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or ?bool12 (and (or (and ?bool14 ?bool13)) (or (or ?bool12 ?bool14) ?bool13) (and (and ?bool11) ?bool12)) ?bool13))
(check-sat)


-- iteration 1128 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTN ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool12 (and ?bool14 (and ?bool12) (or ?bool11 ?bool13)) ?bool12)))
(check-sat)


-- iteration 1129 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11101 #b0000110000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float8) ?float6 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ((_ to_fp 8 24) RTN ?float6))))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 1130 --
(declare-fun f0 (Float64 Float128 Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float6 ?float2 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 8 24) RTN ?float7) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (and ?bool12 ?bool11 ?bool13))
(check-sat)


-- iteration 1131 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RNE ?float7) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float2 ((_ to_fp 8 24) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 5 11) RTN ?float2))))
; FINAL ASSERT
(assert (or ?bool14 (or (and (and ?bool12 ?bool14) ?bool15)) (and (or ?bool15 (or ?bool15 ?bool11)))))
(check-sat)


-- iteration 1132 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11011110 #b11111101101000010111001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float7 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float4) ?float6)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1133 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ?float5 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTZ ?float5) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (and ?bool14) (and ?bool13 ?bool12)))
(check-sat)


-- iteration 1134 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01010 #b1000010011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RNE ?float6) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or (or (or ?bool12 (and ?bool13 ?bool13)))))
(check-sat)


-- iteration 1135 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ?float5 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTP ?float6 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float7) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float9)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool13 (and ?bool12 ?bool14) (or (and ?bool12 ?bool12)))))
(check-sat)


-- iteration 1136 --
(declare-fun f0 (Float128 Float64 Float64) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10110 #b0111100110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float8 ((_ to_fp 8 24) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ((_ to_fp 5 11) RTP ?float4))))
; FINAL ASSERT
(assert (and ?bool15 (or (or (or ?bool14) ?bool15 ?bool14) ?bool14 ?bool11)))
(check-sat)


-- iteration 1137 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100011110100100 #b0110111011001000100100000001000110111101011000001011111101101000111110000110101000011011000010101011101010111100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 5 11) RTP ?float6) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ((_ to_fp 8 24) RTP ?float4) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTN ?float3) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float5)))
; FINAL ASSERT
(assert (or (or ?bool11 (or (and ?bool15 ?bool13) ?bool12 (or ?bool11)))))
(check-sat)


-- iteration 1138 --
(declare-fun f0 (Float16 Float16 Float32) Float128)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11101001 #b11000011101100111011010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 5 11) RTZ ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float7) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTN ?float8) ?float9)))
; FINAL ASSERT
(assert (or (and ?bool15) (or ?bool13 ?bool11) (or ?bool14 (or ?bool14 (or ?bool11 ?bool11 ?bool12)))))
(check-sat)


-- iteration 1139 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ((_ to_fp 15 113) RTN ?float2) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and (or ?bool13)))
(check-sat)


-- iteration 1140 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float3 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float6) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RNE ?float7) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTN ?float3) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and (and (and ?bool11) (or ?bool15) ?bool13) (or (or ?bool14 ?bool15 ?bool14) ?bool12 (and ?bool14)) ?bool11))
(check-sat)


-- iteration 1141 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 11 53) RNE ?float2) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (or (and ?bool11 (or (or ?bool12 ?bool14) ?bool13) (or ?bool12 (or ?bool13) ?bool13)) (and ?bool11 (or (and ?bool15 ?bool13))) ?bool15))
(check-sat)


-- iteration 1142 --
(declare-fun f0 (Float32 Float64 Float128) Float64)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float6 ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RTN ?float7) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and (or ?bool13)))
(check-sat)


-- iteration 1143 --
(declare-fun f0 (Float16 Float32 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01010110101 #b0110110101111000101100100000001111010101011001101110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ?float2 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ?float6)))
; FINAL ASSERT
(assert (and (and (or (and ?bool15 ?bool15 ?bool11) ?bool15 ?bool12) (or ?bool12 (or ?bool14 ?bool12 ?bool14))) (or ?bool12) (and (or (and ?bool13 ?bool13 ?bool12)) ?bool12)))
(check-sat)


-- iteration 1144 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float2 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float2 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RNE ?float5) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float10)))
; FINAL ASSERT
(assert (or (or (and (or ?bool15) ?bool11 ?bool11) ?bool15 ?bool13) ?bool11 ?bool11))
(check-sat)


-- iteration 1145 --
(declare-fun f0 (Float64 Float32 Float32) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RNE ?float3) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RTN ?float7) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (and (or ?bool13) (and (and ?bool15 ?bool11 (or ?bool11 ?bool11)) (or ?bool13 ?bool11 ?bool15) (or ?bool15))))
(check-sat)


-- iteration 1146 --
(declare-fun f0 (Float16 Float128 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01100011 #b00011001111001010100001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float5 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float7 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float2 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RNE ?float8) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 1147 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01001101 #b10000011111000100100001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 1148 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float5 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float4 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float2 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool13 (and (or ?bool11 ?bool12 ?bool14))) (or ?bool12 ?bool14 (or ?bool13 (and ?bool13 ?bool12) (and ?bool14)))))
(check-sat)


-- iteration 1149 --
(declare-fun f0 (Float64 Float32 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01010011 #b10011001001101100001100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ?float5 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float9 ((_ to_fp 15 113) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or (and (and (and ?bool15 ?bool12 ?bool14) (or ?bool14 ?bool11 ?bool15)) ?bool11) ?bool11))
(check-sat)


-- iteration 1150 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11110101 #b11010001011001001100110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float3 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (and (and (or (or ?bool13)) (and (or ?bool13 ?bool15) (or ?bool15)) (and (or ?bool13 ?bool14 ?bool13))) (or (and ?bool12 ?bool11)) ?bool13))
(check-sat)


-- iteration 1151 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 8 24) RTN ?float7) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RTN ?float7) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ((_ to_fp 15 113) RTP ?float10) ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 8 24) RNE ?float2))))
; FINAL ASSERT
(assert (or (or ?bool15) (or ?bool15 ?bool12)))
(check-sat)


-- iteration 1152 --
(declare-fun f0 (Float128 Float16 Float32) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float2 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 11 53) RTP ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RTP ?float6) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (or ?bool13 (and (or ?bool12))))
(check-sat)


-- iteration 1153 --
(declare-fun f0 (Float32 Float16 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float7 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RNE ?float6) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and ?bool11 (and (and ?bool12 ?bool12 (and ?bool13 ?bool14 ?bool12)) ?bool11)))
(check-sat)


-- iteration 1154 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 15 113) RTN ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float4) ?float3 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 8 24) RNE ?float4) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (and ?bool11 (or (or ?bool15)) ?bool15) (and (and ?bool12 ?bool13)) (and ?bool11)))
(check-sat)


-- iteration 1155 --
(declare-fun f0 (Float64 Float32 Float16) Float128)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 11 53) RTP ?float2) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RTP ?float8) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTZ ?float6) ?float4)))
; FINAL ASSERT
(assert (and (and (or ?bool13 (and ?bool12 ?bool11 ?bool15)))))
(check-sat)


-- iteration 1156 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ?float6 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float3)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1157 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RTZ ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float10)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool13 (or (or ?bool13 ?bool15))) ?bool14))
(check-sat)


-- iteration 1158 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11001101001 #b0001000111101000011100101110110001101110000111011101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RNE ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float2 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 8 24) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or (and (or ?bool11) (or ?bool11)) (and (or ?bool11) (and (and ?bool15 ?bool14 ?bool13)) ?bool13) (and ?bool12 ?bool12)))
(check-sat)


-- iteration 1159 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11001 #b0010111100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float4 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15 (or ?bool12 (or (and ?bool12 ?bool14) ?bool13))))
(check-sat)


-- iteration 1160 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float6 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float6)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 1161 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ?float2 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float4 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTZ ?float9) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float9)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 ?bool13))
(check-sat)


-- iteration 1162 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01111 #b0000000110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float2 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float7 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float10) ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTN ?float10) ?float5)))
; FINAL ASSERT
(assert (and (and (and ?bool11) ?bool12) (and (or ?bool12 ?bool12))))
(check-sat)


-- iteration 1163 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01101010 #b00100010001100110111101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float4 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 11 53) RNE ?float5) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float9) ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 11 53) RNE ?float5) ?float8)))
; FINAL ASSERT
(assert (or (and (and ?bool13) (or (and ?bool14 ?bool12) (or ?bool12 ?bool12 ?bool13) ?bool14) (and ?bool11)) (and (or (and ?bool12 ?bool12 ?bool15) ?bool15))))
(check-sat)


-- iteration 1164 --
(declare-fun f0 (Float64 Float16 Float128) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float5 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 15 113) RTP ?float3) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 1165 --
(declare-fun f0 (Float64 Float128 Float64) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float3 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 15 113) RTN ?float2) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float6 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13))
(check-sat)


-- iteration 1166 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float4) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float2 ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float9) ?float6 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8) ?float3 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12))
(check-sat)


-- iteration 1167 --
(declare-fun f0 (Float64 Float64 Float64) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ((_ to_fp 11 53) RTP ?float3) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float2 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float5) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RNE ?float3) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool12 (and (or ?bool15 ?bool13 ?bool14) (and ?bool11 ?bool14 ?bool14) (or ?bool14 ?bool15))) ?bool12 ?bool15))
(check-sat)


-- iteration 1168 --
(declare-fun f0 (Float128 Float16 Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00011101001 #b0011110101110001101001010110100110011001111001010011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float8 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RNE ?float8) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and (or ?bool12 (or (or ?bool13 ?bool11) (or ?bool15) (and ?bool14)))))
(check-sat)


-- iteration 1169 --
(declare-fun f0 (Float64 Float32 Float16) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTN ?float3) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float8) ?float5 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 11 53) RTN ?float10) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RNE ?float5) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float10) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or ?bool11 ?bool15 (or (or ?bool12 (and ?bool14 ?bool14 ?bool14) (or ?bool11 ?bool13)) ?bool14)))
(check-sat)


-- iteration 1170 --
(declare-fun f0 (Float32 Float16 Float32) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ((_ to_fp 15 113) RTZ ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ((_ to_fp 11 53) RTN ?float4) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 5 11) RTP ?float7) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 1171 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ?float2 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ((_ to_fp 15 113) RNE ?float4) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RTN ?float8) ?float5)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 1172 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 15 113) RTZ ?float2) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RNE ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float8) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float9)))
; FINAL ASSERT
(assert (or (and (and ?bool15) (or (and ?bool13))) ?bool12))
(check-sat)


-- iteration 1173 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ((_ to_fp 15 113) RTN ?float4) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ?float5 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float7 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTP ?float3) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float8) ?float7 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float5) ?float4 ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 1174 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float2 ((_ to_fp 5 11) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float2)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 ?bool13))
(check-sat)


-- iteration 1175 --
(declare-fun f0 (Float128 Float128 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float4 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 11 53) RTZ ?float4) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTP ?float8) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTN ?float9) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool14) ?bool13 (and ?bool13 ?bool15 (and ?bool15 ?bool11 ?bool14))))
(check-sat)


-- iteration 1176 --
(declare-fun f0 (Float64 Float128 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool13 (and (and ?bool12) (and ?bool13 ?bool12 ?bool14))) (and (or ?bool12) (and ?bool14 ?bool11 (and ?bool14 ?bool11)) ?bool13) (or ?bool15 (and ?bool13) ?bool12)))
(check-sat)


-- iteration 1177 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11011001000 #b1110011100000100001001110101101001111101111110010001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010100110110110 #b1001101110001111010010011011101001011111001111000010001011001101110001001101001011001010100100101111111000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ?float7 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or (and (and (and ?bool13) (and ?bool11 ?bool15)) (and ?bool12 (and ?bool14 ?bool13))) (or ?bool12 ?bool15 ?bool12) ?bool12))
(check-sat)


-- iteration 1178 --
(declare-fun f0 (Float64 Float128 Float128) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00100000 #b10011101000100110100110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10111 #b1111100001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float2 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float7) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ?float2)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool13)))
(check-sat)


-- iteration 1179 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTZ ?float7) ?float9)))
; FINAL ASSERT
(assert (and (or ?bool12) (or ?bool14 (and ?bool12 ?bool11) ?bool11)))
(check-sat)


-- iteration 1180 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11111101 #b11011001100100010101100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTZ ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ((_ to_fp 15 113) RNE ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and (or ?bool14 (or (and ?bool15 ?bool11 ?bool15) ?bool12 (and ?bool12 ?bool11))) (and ?bool13 (and (and ?bool13 ?bool12 ?bool14)) (and ?bool13 ?bool13))))
(check-sat)


-- iteration 1181 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00010 #b0000110100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float6 ((_ to_fp 15 113) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTN ?float9) ?float6)))
; FINAL ASSERT
(assert (and ?bool11 ?bool11 (and ?bool13)))
(check-sat)


-- iteration 1182 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float6 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RTZ ?float6) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float10) ?float3 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or (and ?bool11 (or ?bool15)) (and ?bool11)))
(check-sat)


-- iteration 1183 --
(declare-fun f0 (Float32 Float16 Float128) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ?float5 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float2) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RTN ?float7) ?float8)))
; FINAL ASSERT
(assert (or ?bool14 (and ?bool11 ?bool11 (and (or ?bool15 ?bool12) (and ?bool11))) ?bool14))
(check-sat)


-- iteration 1184 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float4 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float8)))
; FINAL ASSERT
(assert (and ?bool15 (or (and ?bool14 ?bool12 (or ?bool13 ?bool15)) (or ?bool11 (or ?bool14 ?bool15 ?bool13) (or ?bool15)) ?bool11)))
(check-sat)


-- iteration 1185 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTN ?float9) ?float3)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 1186 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ?float7 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float2 ((_ to_fp 8 24) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float4) ?float3)))
; FINAL ASSERT
(assert (or (and (or ?bool14 (and ?bool12) ?bool14))))
(check-sat)


-- iteration 1187 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110101100011000 #b0011100011001000110011110000111001101011101001010110101011111010100011001100110110100101011011110010111001110001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1188 --
(declare-fun f0 (Float16 Float64 Float64) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTP ?float2) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float3 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (or ?bool11 ?bool11 (or ?bool14)))
(check-sat)


-- iteration 1189 --
(declare-fun f0 (Float128 Float64 Float16) Float128)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10111101 #b11000100100011010001011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or ?bool14 (or (and ?bool15 (or ?bool11 ?bool13) ?bool14) ?bool12 ?bool14)))
(check-sat)


-- iteration 1190 --
(declare-fun f0 (Float16 Float64 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float7 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float7)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1191 --
(declare-fun f0 (Float16 Float64 Float64) Float64)
(declare-fun p0 (Float32 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float4 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float7) ?float3 ?float2)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1192 --
(declare-fun f0 (Float32 Float128 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00001000 #b01010101110010000111100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ((_ to_fp 8 24) RTP ?float2) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 15 113) RTN ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float8))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 1193 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b100010000110001 #b0000011011000110001010010110111000011011101000110000111111101111010010111001101100011101111010101100000111000100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float10))))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool13 ?bool13) ?bool14))
(check-sat)
