the generated formulas used by the solvers



-- iteration 1 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RNE ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float2 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool11 ?bool11)))
(check-sat)


-- iteration 2 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10111 #b0111001101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float4 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 15 113) RTP ?float3) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTN ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ((_ to_fp 5 11) RTZ ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 5 11) RNE ?float2))))
; FINAL ASSERT
(assert (and ?bool14 ?bool11 (or ?bool14)))
(check-sat)


-- iteration 3 --
(declare-fun f0 (Float128 Float64 Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01100 #b0010101010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RTZ ?float5) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and (and ?bool14 (and (and ?bool15 ?bool13 ?bool12) ?bool11 (and ?bool15 ?bool13)) (or (and ?bool11 ?bool11 ?bool14) (or ?bool11 ?bool13) ?bool14)) ?bool12))
(check-sat)


-- iteration 4 --
(declare-fun f0 (Float64 Float64 Float128) Float16)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11111 #b1101101010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01010101101 #b0000001011100010111101001101111010101101100100001011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 11 53) RTP ?float4) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14 ?bool15))
(check-sat)


-- iteration 5 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float2 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ?float6 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float2 ((_ to_fp 5 11) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ((_ to_fp 15 113) RNE ?float10))))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool13 (or (or ?bool12))) ?bool11))
(check-sat)


-- iteration 6 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00010111001 #b1000100001011010000011000011010010100111100011010100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10100110 #b01011010011000101110111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RTP ?float6))))
; FINAL ASSERT
(assert (and ?bool12 (or (and (or ?bool12 ?bool12 ?bool11) ?bool13 ?bool15) ?bool13 (and (or ?bool14 ?bool14) ?bool12)) ?bool15))
(check-sat)


-- iteration 7 --
(declare-fun f0 (Float64 Float64 Float16) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float2 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float8) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RNE ?float9) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and (and ?bool15)))
(check-sat)


-- iteration 8 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float64 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11000100 #b10010101011101010110000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float2 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTZ ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 5 11) RNE ?float8) ?float5)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool14) ?bool13))
(check-sat)


-- iteration 9 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b011101011110101 #b0100001000000011110001000111110000000111010010001100011011010011001010101011111011001001010010000000000000001101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ((_ to_fp 5 11) RTP ?float5) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float4 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 5 11) RNE ?float10) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float9)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 10 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00011 #b1101000111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float7 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float2 ((_ to_fp 15 113) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float7)))
; FINAL ASSERT
(assert (or ?bool12 (or (or (and ?bool14 ?bool13)))))
(check-sat)


-- iteration 11 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float7) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12))
(check-sat)


-- iteration 12 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01000 #b1111011000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 8 24) RNE ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float5 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float10) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float10)))
; FINAL ASSERT
(assert (and ?bool14 ?bool15))
(check-sat)


-- iteration 13 --
(declare-fun f0 (Float16 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b011100100101100 #b1111010011100100000110100111000100100100001111110000001110010010000101010111101110011101101111001110100001111100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float3 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float4 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float6)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool12) (and ?bool12)))
(check-sat)


-- iteration 14 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float4) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float2 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float7 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTP ?float2) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (and (and (or ?bool12 (and ?bool11 ?bool11 ?bool14) (or ?bool14))) (or ?bool11 ?bool12) ?bool13))
(check-sat)


-- iteration 15 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float4 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or (and (or ?bool12 (or ?bool14 ?bool11) (and ?bool15 ?bool12)) (or ?bool14 (and ?bool14) ?bool11) ?bool14) ?bool13 ?bool14))
(check-sat)


-- iteration 16 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTP ?float4) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float9) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 8 24) RNE ?float8))))
; FINAL ASSERT
(assert (and ?bool15 (or (and ?bool11 ?bool14 (and ?bool11)) (and ?bool15) (or ?bool13))))
(check-sat)


-- iteration 17 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 11 53) RTN ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float4 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float3 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 5 11) RTP ?float7) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (and (or ?bool13) ?bool11))
(check-sat)


-- iteration 18 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11110 #b1000110000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 11 53) RTZ ?float7) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTP ?float9) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool12 ?bool15))
(check-sat)


-- iteration 19 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float5) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTN ?float4) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float8) ?float7)))
; FINAL ASSERT
(assert (or (or (or ?bool13)) (or ?bool15 ?bool12 (or (or ?bool15) ?bool15))))
(check-sat)


-- iteration 20 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float5 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ((_ to_fp 8 24) RTP ?float7) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float4 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool11 ?bool14 (or ?bool11 (and ?bool15 ?bool15))) (and ?bool15 ?bool13 ?bool15)))
(check-sat)


-- iteration 21 --
(declare-fun f0 (Float16 Float128 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float5) ?float6 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTZ ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool11) ?bool15 ?bool11))
(check-sat)


-- iteration 22 --
(declare-fun f0 (Float32 Float64 Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float2 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 5 11) RTP ?float4) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTZ ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float2)))
; FINAL ASSERT
(assert (or (or ?bool12 (or ?bool14 (and ?bool12 ?bool12 ?bool13) ?bool11) (and ?bool14)) ?bool12))
(check-sat)


-- iteration 23 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10011101000 #b1101010100111101000000100100111110110111010011110011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 5 11) RTP ?float6) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float8 ((_ to_fp 5 11) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float7) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or ?bool15 (and ?bool12 ?bool14)))
(check-sat)


-- iteration 24 --
(declare-fun f0 (Float16 Float64 Float128) Float16)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float3 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 8 24) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool15 (or (and (and ?bool15) (and ?bool13) ?bool11)) ?bool13))
(check-sat)


-- iteration 25 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 8 24) RNE ?float5) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ((_ to_fp 8 24) RNE ?float2) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float10) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 15 113) RTP ?float2))))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool11 ?bool14 (and (or ?bool11)))))
(check-sat)


-- iteration 26 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011010000000000 #b1000011101000000011001101111001111100000101110100111000010111001110011000110110001010100010100000001011011111111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float7 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float8)))
; FINAL ASSERT
(assert (or ?bool14 (and (and (or ?bool12 ?bool11 ?bool11) ?bool14 (or ?bool13 ?bool12)) (or (or ?bool15) ?bool15) (or (or ?bool14 ?bool13 ?bool11) ?bool12 (or ?bool13 ?bool11 ?bool15))) (and (or (or ?bool14) (or ?bool11) (and ?bool12)) ?bool13)))
(check-sat)


-- iteration 27 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float3 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float5 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float9 ((_ to_fp 11 53) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (or (and (or ?bool12 (and ?bool15)))))
(check-sat)


-- iteration 28 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float6) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and (or (or ?bool11 (or ?bool14) (or ?bool11)) ?bool13) ?bool15))
(check-sat)


-- iteration 29 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ?float6 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ((_ to_fp 8 24) RNE ?float3))))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool15 (and ?bool13 ?bool13 ?bool13)) (or (and (or ?bool11 ?bool11 ?bool14) ?bool14 (or ?bool12 ?bool15)) ?bool14 ?bool12)))
(check-sat)


-- iteration 30 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11010 #b1011010101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float4 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or (or ?bool14) (or (and ?bool11 ?bool14 ?bool12) (or (or ?bool11 ?bool12 ?bool12) ?bool12 ?bool15))))
(check-sat)


-- iteration 31 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float9)))
; FINAL ASSERT
(assert (or (or ?bool15) (or ?bool14 (or (and ?bool12 ?bool14)))))
(check-sat)


-- iteration 32 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 8 24) RTN ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RNE ?float7) ?float9)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 33 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float5 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float6))))
; FINAL ASSERT
(assert (and ?bool12 (or (or (or ?bool11 ?bool12)) ?bool14 (or ?bool13 (and ?bool14 ?bool14) ?bool14)) ?bool11))
(check-sat)


-- iteration 34 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float4 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float4) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and (and (and (or ?bool13 ?bool11 ?bool15) ?bool13 (and ?bool12 ?bool13))) (and (or (or ?bool11 ?bool12) (and ?bool12 ?bool11 ?bool11)))))
(check-sat)


-- iteration 35 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float3 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ?float2 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float4)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15 ?bool11))
(check-sat)


-- iteration 36 --
(declare-fun f0 (Float32 Float128 Float128) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RNE ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float2 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ((_ to_fp 5 11) RTN ?float6))))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool13 ?bool12 ?bool15) (and (and ?bool12 (and ?bool12) ?bool13) ?bool13 (or (and ?bool12 ?bool14)))))
(check-sat)


-- iteration 37 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00011000001 #b0111011000000100001110000100100110111110101011111010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float3) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RTP ?float4) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and ?bool11 (and (and ?bool12) ?bool15) (and ?bool15 (or (and ?bool11 ?bool15) (or ?bool11 ?bool15) ?bool11))))
(check-sat)


-- iteration 38 --
(declare-fun f0 (Float128 Float64 Float64) Float16)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01111010 #b00100101001001101010110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ?float3 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ?float2 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 39 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float4 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float3 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 11 53) RTZ ?float9))))
; FINAL ASSERT
(assert (or (and (or ?bool15 ?bool12) (and (or ?bool13 ?bool14) (and ?bool14 ?bool15 ?bool12)) ?bool14) ?bool14))
(check-sat)


-- iteration 40 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float3 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 41 --
(declare-fun f0 (Float128 Float128 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float3 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float7 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float2 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTN ?float2) ?float4)))
; FINAL ASSERT
(assert (or (or ?bool12) (or (or ?bool14) (and (and ?bool12) ?bool15) (and (and ?bool15 ?bool12) (and ?bool11 ?bool15 ?bool12)))))
(check-sat)


-- iteration 42 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float4 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float6 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float2 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and ?bool15 ?bool11))
(check-sat)


-- iteration 43 --
(declare-fun f0 (Float32 Float16 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float6 ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13))
(check-sat)


-- iteration 44 --
(declare-fun f0 (Float16 Float32 Float64) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (or (or (and ?bool13)) ?bool13))
(check-sat)


-- iteration 45 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float4 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float3 ((_ to_fp 5 11) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 11 53) RTN ?float7) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTN ?float8) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (or (or (or ?bool11 ?bool13) (and ?bool11) (or ?bool12 ?bool13 ?bool12)))))
(check-sat)


-- iteration 46 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float6) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RTN ?float2) ?float3)))
; FINAL ASSERT
(assert (and (or (and (and ?bool12))) (and (and (and ?bool12) (and ?bool11 ?bool12 ?bool12)) ?bool15)))
(check-sat)


-- iteration 47 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 11 53) RNE ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float4) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (and ?bool13 (and (and (and ?bool13) ?bool15 ?bool11) ?bool12 ?bool13) ?bool12))
(check-sat)


-- iteration 48 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTP ?float5 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RTN ?float10) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and (or (and ?bool11 ?bool15) (and (and ?bool15 ?bool12 ?bool15) (and ?bool12 ?bool13 ?bool12))) ?bool15 (and ?bool15)))
(check-sat)


-- iteration 49 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 15 113) RNE ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ?float2 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RNE ?float7) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and (or (and ?bool15)) ?bool13))
(check-sat)


-- iteration 50 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ((_ to_fp 11 53) RTN ?float3) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ((_ to_fp 15 113) RTP ?float4) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float7 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RNE ?float10) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (and (and (or ?bool13 ?bool15 ?bool15) ?bool14) (and ?bool12 ?bool11 (and ?bool14)) ?bool12)))
(check-sat)


-- iteration 51 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00100 #b1000100000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ((_ to_fp 5 11) RTN ?float6) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float9 ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RNE ?float10) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13 ?bool12))
(check-sat)


-- iteration 52 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01000011000 #b1101011011000011101110011001011001000010010100011100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float3 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool14 ?bool13)))
(check-sat)


-- iteration 53 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100100100101010 #b0111001011111110001100010101111110110011001111101000011001010110111000101001101001011010100010111100000101101011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ((_ to_fp 15 113) RNE ?float4) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ((_ to_fp 8 24) RTZ ?float7))))
; FINAL ASSERT
(assert (and (or ?bool15) ?bool13 (and ?bool13 (or (and ?bool11 ?bool13 ?bool15) ?bool14) (or ?bool14))))
(check-sat)


-- iteration 54 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00111010 #b01110010100100001101110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float3 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RNE ?float4) ?float9)))
; FINAL ASSERT
(assert (or (and (or (and ?bool11) (or ?bool11 ?bool14 ?bool13) (or ?bool13 ?bool12 ?bool11)) ?bool14)))
(check-sat)


-- iteration 55 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RNE ?float4) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float6) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float9) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool12 ?bool12 (and (or ?bool12 ?bool15 ?bool14))))
(check-sat)


-- iteration 56 --
(declare-fun f0 (Float32 Float128 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RTN ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float3))))
; FINAL ASSERT
(assert (or ?bool11 ?bool14))
(check-sat)


-- iteration 57 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float7) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 5 11) RTP ?float2))))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool14 (and (and ?bool15 ?bool12 ?bool12))) ?bool15))
(check-sat)


-- iteration 58 --
(declare-fun f0 (Float128 Float128 Float128) Float16)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11101 #b0111010111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101100010001010 #b1111011010111000000110011111111010011110000010000010110101111010110111001011100111101010101010011011001000101000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14 ?bool13))
(check-sat)


-- iteration 59 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ((_ to_fp 5 11) RTP ?float5) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float4 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTP ?float5) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ?float3 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float8))))
; FINAL ASSERT
(assert (or (and ?bool13)))
(check-sat)


-- iteration 60 --
(declare-fun f0 (Float64 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 15 113) RTP ?float3) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float2 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float2 ((_ to_fp 15 113) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RTP ?float9) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (and ?bool11 ?bool11))
(check-sat)


-- iteration 61 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float6 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float6 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 11 53) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float10) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool11) ?bool12))
(check-sat)


-- iteration 62 --
(declare-fun f0 (Float16 Float16 Float16) Float32)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01111111 #b10010000000111001100011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTP ?float8 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ?float9 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14))
(check-sat)


-- iteration 63 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b011010011011000 #b1100000100001101110010010000101001001101001100001001101001010001111011000111111011010101111001111111001100111101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float3 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float7 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float5 ((_ to_fp 15 113) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RTP ?float3) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTZ ?float10) ?float8)))
; FINAL ASSERT
(assert (or (and (or (or ?bool14 ?bool13) ?bool13))))
(check-sat)


-- iteration 64 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTZ ?float10) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 65 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10000011 #b11011101011110010001001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ?float2 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTN ?float7) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float5)))
; FINAL ASSERT
(assert (or ?bool12 (or (or (and ?bool15 ?bool15)) (and (or ?bool13) ?bool11 ?bool11) (and (and ?bool15 ?bool14 ?bool15)))))
(check-sat)


-- iteration 66 --
(declare-fun f0 (Float16 Float64 Float16) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 11 53) RTZ ?float2) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float8) ?float7 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float6 ((_ to_fp 11 53) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float3) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTZ ?float10) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool11 (and (or ?bool11))) ?bool14))
(check-sat)


-- iteration 67 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float7 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float2 ((_ to_fp 5 11) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTP ?float3) ?float10)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool12) ?bool14 (and (and ?bool14 (or ?bool11) ?bool14))))
(check-sat)


-- iteration 68 --
(declare-fun f0 (Float32 Float64 Float32) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float5) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (and ?bool11 ?bool11 (or (and ?bool12) ?bool11 ?bool13)))
(check-sat)


-- iteration 69 --
(declare-fun f0 (Float32 Float32 Float64) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float4 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTP ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float2 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 5 11) RTN ?float2) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 11 53) RNE ?float3) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float2))))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool11 ?bool13 ?bool15)))
(check-sat)


-- iteration 70 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float2 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float9 ((_ to_fp 8 24) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTP ?float10) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float6)))
; FINAL ASSERT
(assert (and (and ?bool15) (or (and ?bool11) (or (or ?bool12 ?bool12 ?bool11)))))
(check-sat)


-- iteration 71 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float4) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float10))))
; FINAL ASSERT
(assert (and ?bool15 ?bool12 (and ?bool15)))
(check-sat)


-- iteration 72 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b101010100001001 #b0001011010001101100101111100100101010000110111110111101011000100010001000010111000100101101010110110110100111100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float5 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RNE ?float2) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ?float4)))
; FINAL ASSERT
(assert (and (and (and ?bool14 (or ?bool13 ?bool12) ?bool13) ?bool12) (and (or (or ?bool15 ?bool11) ?bool13) ?bool15 (or (and ?bool14 ?bool11 ?bool14) (and ?bool15 ?bool12))) (or (or (and ?bool14 ?bool14 ?bool14) (or ?bool14) ?bool13) (and ?bool12 ?bool13 ?bool13))))
(check-sat)


-- iteration 73 --
(declare-fun f0 (Float32 Float16 Float32) Float16)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00101111 #b10110101100101010111011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 5 11) RTZ ?float4) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float2 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float2 ((_ to_fp 5 11) RTN ?float7) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float6 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float2 ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float5) ?float6 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float9) ?float8 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ((_ to_fp 8 24) RTZ ?float9))))
; FINAL ASSERT
(assert (and ?bool15 (and (and ?bool14 (or ?bool15 ?bool15 ?bool15)))))
(check-sat)


-- iteration 74 --
(declare-fun f0 (Float64 Float64 Float128) Float128)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float3 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 8 24) RTN ?float6) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7 ?float6 ((_ to_fp 15 113) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RNE ?float5) ?float8)))
; FINAL ASSERT
(assert (and ?bool15 ?bool13 ?bool11))
(check-sat)


-- iteration 75 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float2 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ?float3 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float5 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 8 24) RTP ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 15 113) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 15 113) RTZ ?float9))))
; FINAL ASSERT
(assert (and (and ?bool12 (and (and ?bool15) ?bool15 ?bool12)) (or ?bool13)))
(check-sat)


-- iteration 76 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 8 24) RTN ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool14) ?bool13))
(check-sat)


-- iteration 77 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ?float7 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float5 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool12 ?bool14) ?bool13 ?bool14))
(check-sat)


-- iteration 78 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float2 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 8 24) RTP ?float7) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float3 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (or ?bool14 (and (or ?bool15 ?bool11 ?bool12) (or ?bool11) (and ?bool15))) ?bool12 ?bool13))
(check-sat)


-- iteration 79 --
(declare-fun f0 (Float32 Float32 Float128) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 8 24) RTP ?float5) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float8 ((_ to_fp 5 11) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTP ?float5) ?float6)))
; FINAL ASSERT
(assert (and (and (or ?bool12 (and ?bool14 ?bool12 ?bool12) ?bool15) (or (and ?bool12 ?bool14)))))
(check-sat)


-- iteration 80 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float4 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 5 11) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RNE ?float4) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and (or (or ?bool12 ?bool14) ?bool14 (or ?bool11 ?bool14))))
(check-sat)


-- iteration 81 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTN ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTN ?float5) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float8))))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool15 ?bool11)))
(check-sat)


-- iteration 82 --
(declare-fun f0 (Float128 Float16 Float128) Float16)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RNE ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float6) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (and (or (or ?bool13 ?bool15))))
(check-sat)


-- iteration 83 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00101111010 #b1101000001100001100100111101001011010110011010111001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 8 24) RTZ ?float2) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float4 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RNE ?float4) ?float10)))
; FINAL ASSERT
(assert (or (or (or ?bool12) (or ?bool14 ?bool13 (and ?bool13 ?bool13 ?bool11)) ?bool12) ?bool11 (and ?bool15 (and ?bool12) ?bool14)))
(check-sat)


-- iteration 84 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RTN ?float6) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float3 ((_ to_fp 11 53) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float7) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool13 (or (and (and ?bool13) (or ?bool11 ?bool11) (or ?bool12 ?bool11)))))
(check-sat)


-- iteration 85 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float2 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ((_ to_fp 8 24) RNE ?float6) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RTN ?float5) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RNE ?float6) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float2) ?float7 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float6) ?float3 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float4)))
; FINAL ASSERT
(assert (or (or (or ?bool14 (and ?bool11 ?bool13 ?bool11)) (and ?bool14 ?bool13)) (and ?bool12 (and ?bool11 (or ?bool12 ?bool14 ?bool14))) ?bool13))
(check-sat)


-- iteration 86 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110000111100101 #b1111001110011001000001101010101000010011101011011001000100100000011001000000010001010011111101001110110000101100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 5 11) RTP ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RNE ?float10) ?float5)))
; FINAL ASSERT
(assert (and (and ?bool13)))
(check-sat)


-- iteration 87 --
(declare-fun f0 (Float128 Float16 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float4 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 11 53) RNE ?float3) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and (or (or (and ?bool14 ?bool13)) (and (and ?bool11 ?bool11)) (and (or ?bool11 ?bool15 ?bool15) ?bool12 (and ?bool11))) ?bool12 ?bool14))
(check-sat)


-- iteration 88 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTN ?float5) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11))
(check-sat)


-- iteration 89 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ?float6)))
; FINAL ASSERT
(assert (or (and ?bool13)))
(check-sat)


-- iteration 90 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01110100 #b01111001011011001011110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float5 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3)))
; FINAL ASSERT
(assert (or ?bool15 (and ?bool13 ?bool13) (and (and (or ?bool13 ?bool12) (or ?bool14 ?bool11) ?bool13))))
(check-sat)


-- iteration 91 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float5 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float3 ((_ to_fp 11 53) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 8 24) RTZ ?float4))))
; FINAL ASSERT
(assert (and (and ?bool15 (and ?bool11 (or ?bool11 ?bool14) ?bool12) ?bool15) ?bool13))
(check-sat)


-- iteration 92 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float6 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or (or (or ?bool13 (or ?bool13) ?bool14) (and (and ?bool11 ?bool11))) (or (and (and ?bool14 ?bool14 ?bool14)) ?bool14 ?bool11) ?bool11))
(check-sat)


-- iteration 93 --
(declare-fun f0 (Float128 Float64 Float64) Float32)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float2 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 5 11) RTP ?float9) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTN ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ?float8 ((_ to_fp 11 53) RTP ?float3))))
; FINAL ASSERT
(assert (and (or ?bool12 (and ?bool15 (or ?bool15 ?bool11 ?bool11))) (and (and (and ?bool11 ?bool11 ?bool15)))))
(check-sat)


-- iteration 94 --
(declare-fun f0 (Float32 Float16 Float16) Float16)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float3 ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 5 11) RTP ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float2 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float9 ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 15 113) RTZ ?float8))))
; FINAL ASSERT
(assert (or ?bool11 ?bool14 ?bool11))
(check-sat)


-- iteration 95 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 5 11) RNE ?float3) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ((_ to_fp 15 113) RTP ?float9) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float4)))
; FINAL ASSERT
(assert (and (or (or (and ?bool15 ?bool11 ?bool14) ?bool12 (and ?bool14)) ?bool14 ?bool14) (or ?bool11 (and ?bool13)) (or (and ?bool14 (or ?bool14)) ?bool11 (and (or ?bool13 ?bool11)))))
(check-sat)


-- iteration 96 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00101 #b0100100111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ((_ to_fp 8 24) RTZ ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTP ?float3) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTP ?float10) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float9)))
; FINAL ASSERT
(assert (and (or (or (and ?bool13 ?bool14)))))
(check-sat)


-- iteration 97 --
(declare-fun f0 (Float16 Float32 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float2 ?float3 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTZ ?float4) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 8 24) RTN ?float5) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTN ?float4) ?float9)))
; FINAL ASSERT
(assert (and (or ?bool12 (or ?bool15 ?bool12 (and ?bool13 ?bool11)) (or ?bool12))))
(check-sat)


-- iteration 98 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTP ?float3) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or (and ?bool13) (or ?bool13 ?bool13) (or ?bool13)))
(check-sat)


-- iteration 99 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ((_ to_fp 15 113) RNE ?float2))))
; FINAL ASSERT
(assert (and (or ?bool12) ?bool11))
(check-sat)


-- iteration 100 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float64 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 5 11) RTN ?float5) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float4 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 15 113) RTZ ?float3) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 5 11) RTP ?float5))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 101 --
(declare-fun f0 (Float16 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000001000010110 #b1100111110100000000100000010111111100001010000111110101110001011011001001011111110010011101111111011111110011111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float4 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float6) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RTP ?float2) ?float5)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13))
(check-sat)


-- iteration 102 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 15 113) RTP ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTP ?float8) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RTZ ?float6) ?float9)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15 ?bool15))
(check-sat)


-- iteration 103 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01101000011 #b1011111101011100100101111111000000110110101110111010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float2 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTZ ?float9) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 8 24) RTZ ?float9) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float9)))
; FINAL ASSERT
(assert (and (and (and ?bool13 (or ?bool12 ?bool12 ?bool11) (or ?bool12)) (and ?bool15 ?bool13 (or ?bool12)) ?bool15) (or (or ?bool12) (or ?bool12 (and ?bool15)))))
(check-sat)


-- iteration 104 --
(declare-fun f0 (Float16 Float128) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10000 #b1110100111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float3 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 11 53) RTN ?float7))))
; FINAL ASSERT
(assert (or (or (and ?bool13 ?bool13) (and ?bool14) (or (or ?bool12 ?bool15) ?bool12 (and ?bool11 ?bool12))) (or (and (or ?bool11 ?bool12 ?bool11)) (and (or ?bool11 ?bool14) ?bool13 ?bool12)) (or ?bool14)))
(check-sat)


-- iteration 105 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 11 53) RNE ?float7) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTZ ?float6) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or (and ?bool12 ?bool13) (or ?bool14)))
(check-sat)


-- iteration 106 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100011001011101 #b1010111011101110001101100100101101000111001010101010001001000011100101100101010011010101110011100001110110110110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01111010111 #b1100111001011001100000100000001111011111111001101010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RTP ?float5) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RNE ?float8) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (and (and (and (or ?bool15 ?bool13) (and ?bool14 ?bool15))) ?bool15 ?bool12))
(check-sat)


-- iteration 107 --
(declare-fun f0 (Float32 Float64 Float32) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTP ?float3) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float9 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 8 24) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14 ?bool12))
(check-sat)


-- iteration 108 --
(declare-fun f0 (Float16 Float16 Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00110110101 #b0101001110111100011100100010100111010100000110001110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float4 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTN ?float3 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float5 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float8)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool15) (or ?bool12) (or ?bool15)))
(check-sat)


-- iteration 109 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 11 53) RTZ ?float7) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float5 ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 110 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0101001101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float5 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float5 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float3 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RNE ?float3) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTP ?float5) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (and (or ?bool13) ?bool15 ?bool12))
(check-sat)


-- iteration 111 --
(declare-fun f0 (Float128 Float64 Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11001 #b0100111100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01110 #b1110100111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float6 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 8 24) RTZ ?float7) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool12 (and ?bool15 ?bool14 ?bool13))))
(check-sat)


-- iteration 112 --
(declare-fun f0 (Float64 Float128 Float128) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float3 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 15 113) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float4) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and (and (and ?bool13 (and ?bool13 ?bool11 ?bool15) (and ?bool13 ?bool12))) (or (or ?bool14 (or ?bool12 ?bool11)))))
(check-sat)


-- iteration 113 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or ?bool13 (or (or (or ?bool14 ?bool12) ?bool13) ?bool12) (and ?bool14)))
(check-sat)


-- iteration 114 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100010111101110 #b0000101010010010001111000111011011101100101001001110011101011001011011101111110111110001100001110110000100010001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTZ ?float3 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float3 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 115 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float2 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float3 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ?float6 ((_ to_fp 5 11) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTP ?float4) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14))
(check-sat)


-- iteration 116 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float7 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float7)))
; FINAL ASSERT
(assert (or (or (and (or ?bool13 ?bool14)) ?bool13) (or (or ?bool12) (and ?bool14))))
(check-sat)


-- iteration 117 --
(declare-fun f0 (Float128 Float32 Float64) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 8 24) RTP ?float2) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15 (or (and ?bool13 (or ?bool11 ?bool12) (and ?bool14 ?bool13)))))
(check-sat)


-- iteration 118 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10100 #b1110011010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10110111001 #b0111111110011000001100001111010111110101010011111001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTZ ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float2 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float7 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and (or (and ?bool13 (and ?bool15 ?bool15 ?bool11) (and ?bool12 ?bool15)) (or (and ?bool11) (or ?bool12 ?bool15 ?bool15) (and ?bool15)) (or (and ?bool13))) (and (or ?bool12 ?bool14)) (or (or ?bool12 ?bool11))))
(check-sat)


-- iteration 119 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 15 113) RTP ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ((_ to_fp 5 11) RTN ?float2))))
; FINAL ASSERT
(assert (and (and ?bool13 (and ?bool11 (and ?bool11) ?bool15))))
(check-sat)


-- iteration 120 --
(declare-fun f0 (Float128 Float32 Float16) Float64)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTP ?float4) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTP ?float8) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ?float7)))
; FINAL ASSERT
(assert (or ?bool15 ?bool15 ?bool14))
(check-sat)


-- iteration 121 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RNE ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool11 ?bool14 ?bool13)))
(check-sat)


-- iteration 122 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float6 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float6 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float9 ((_ to_fp 8 24) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float5)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15))
(check-sat)


-- iteration 123 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10110111 #b10110101000100100011110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00010000 #b00101101001101111011000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 8 24) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float10)))
; FINAL ASSERT
(assert (or (or (or ?bool14 (or ?bool13))) ?bool15))
(check-sat)


-- iteration 124 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float5 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool13 (or ?bool14 (and ?bool11)) ?bool11) ?bool13))
(check-sat)


-- iteration 125 --
(declare-fun f0 (Float64 Float64 Float64) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float5 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RNE ?float9) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RNE ?float7) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTP ?float2) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float7 ?float5)))
; FINAL ASSERT
(assert (or ?bool15 (or (or ?bool12)) ?bool11))
(check-sat)


-- iteration 126 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01100011 #b10000001001010101001011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float2 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 8 24) RTP ?float5) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 15 113) RTN ?float3))))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool11 ?bool11)))
(check-sat)


-- iteration 127 --
(declare-fun f0 (Float16 Float16 Float16) Float32)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4 ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float4 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 8 24) RTP ?float4) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float5) ?float6 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ((_ to_fp 5 11) RNE ?float6))))
; FINAL ASSERT
(assert (or ?bool15 (and (and (and ?bool14 ?bool14)) (and (and ?bool15 ?bool15 ?bool13) ?bool12) ?bool13) ?bool15))
(check-sat)


-- iteration 128 --
(declare-fun f0 (Float32 Float32 Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11000111001 #b0101111101010111100001110111010110101000101001010111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float8 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RTZ ?float6) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RTN ?float3) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (and ?bool12 ?bool12 (or (or ?bool13 (and ?bool12 ?bool14) ?bool15) ?bool14 ?bool14)))
(check-sat)


-- iteration 129 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01010101011 #b0000101000010000000100110000110110111011101000001101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 11 53) RTN ?float3) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTZ ?float6) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RNE ?float4) ?float2)))
; FINAL ASSERT
(assert (and ?bool15 (or (and (and ?bool13 ?bool14 ?bool15)) ?bool15 (or ?bool14))))
(check-sat)


-- iteration 130 --
(declare-fun f0 (Float128 Float128 Float128) Float128)
(declare-fun p0 (Float32 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10110001110 #b1001100101101111100110100010000000101100011101010000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010000101011110 #b0010001100000101111010000001011011001101001010110100100000110000010111000101010011001110010001100111111111111100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTP ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 5 11) RNE ?float2) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or ?bool12 ?bool12))
(check-sat)


-- iteration 131 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float9) ?float5 ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 132 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float6 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RNE ?float4) ?float3)))
; FINAL ASSERT
(assert (or (and ?bool15) (and (or (and ?bool15 ?bool15)))))
(check-sat)


-- iteration 133 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ?float3 ((_ to_fp 8 24) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (and ?bool13 (or (or ?bool14 (or ?bool15 ?bool15) (and ?bool14 ?bool13 ?bool14)) (and (or ?bool15 ?bool11 ?bool14))) (or (or (and ?bool14 ?bool13 ?bool12) (and ?bool14 ?bool15) (or ?bool13 ?bool11)))))
(check-sat)


-- iteration 134 --
(declare-fun f0 (Float16 Float32 Float128) Float128)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float5 ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float7) ?float10 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or (and (and (or ?bool15 ?bool14)) (and ?bool12 (and ?bool15 ?bool14 ?bool11)) (or ?bool14)) ?bool13))
(check-sat)


-- iteration 135 --
(declare-fun f0 (Float16 Float64 Float32) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTN ?float2) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ((_ to_fp 11 53) RTN ?float3) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RNE ?float8) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (or (and (and ?bool15 (or ?bool13 ?bool13)) (or ?bool13 ?bool14 ?bool14) ?bool13)))
(check-sat)


-- iteration 136 --
(declare-fun f0 (Float32 Float64 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float6 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float4 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float5 ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTN ?float9) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14))
(check-sat)


-- iteration 137 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011111100011111 #b1000111010110010010111100000100001010011100111010100110010110100001011010000100100111000101000011011010010101100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float4 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float5 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTN ?float2) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float8) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (and ?bool14 ?bool13))
(check-sat)


-- iteration 138 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float4 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ((_ to_fp 11 53) RTZ ?float5) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool12) ?bool15 (and (or (and ?bool13) ?bool11 (and ?bool14 ?bool15 ?bool15)) ?bool13)))
(check-sat)


-- iteration 139 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTZ ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float2 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RNE ?float10) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 8 24) RNE ?float2))))
; FINAL ASSERT
(assert (and ?bool12 (or (or (or ?bool12) ?bool12)) ?bool12))
(check-sat)


-- iteration 140 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float2 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float4 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or (or (and (or ?bool15 ?bool11 ?bool14) (or ?bool13 ?bool15) (and ?bool12)))))
(check-sat)


-- iteration 141 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float4) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (and (or ?bool15) ?bool15))
(check-sat)


-- iteration 142 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011001101000011 #b1111110011101110110101110101010000101010001001010010001100101000001101110110001110011110011100000001111010100110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RNE ?float3) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 8 24) RTN ?float5) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 8 24) RNE ?float7) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool13) (and (and ?bool11))))
(check-sat)


-- iteration 143 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ((_ to_fp 8 24) RTZ ?float2) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RNE ?float6) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 144 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float3 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or (and ?bool14) (and (and ?bool12)) ?bool11))
(check-sat)


-- iteration 145 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 5 11) RTN ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float3 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float2 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float4) ?float7 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float8) ?float8 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 15 113) RNE ?float4) ?float7)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11))
(check-sat)


-- iteration 146 --
(declare-fun f0 (Float32 Float128 Float64) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11000 #b1100010011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010101110101001 #b1110101001000011110101011100001111110000011001100100110111111100101111101001011010010100111010110010110101010100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3) ?float5 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float3) ?float5 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float9) ?float6 ((_ to_fp 11 53) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ((_ to_fp 15 113) RNE ?float4))))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool13 (and ?bool11))))
(check-sat)


-- iteration 147 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float5 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float5 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float4 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ?float4)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool13 (or ?bool14 ?bool15) (and (or ?bool15 ?bool15) ?bool15 (or ?bool13 ?bool11 ?bool12)))))
(check-sat)


-- iteration 148 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000100111100011 #b0001001000011110111100011011111111100100110010111001100000000010100000011001101000011110010011100110100010010110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ((_ to_fp 11 53) RNE ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ?float2 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float6 ((_ to_fp 11 53) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or ?bool12 (and (and (and ?bool15 ?bool12) (and ?bool14 ?bool11) (and ?bool15)) (and (and ?bool12 ?bool14)) ?bool12)))
(check-sat)


-- iteration 149 --
(declare-fun f0 (Float128 Float32 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float3) ?float6 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ((_ to_fp 15 113) RTZ ?float7) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 5 11) RNE ?float2) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 15 113) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and (and ?bool12) ?bool11 ?bool13))
(check-sat)


-- iteration 150 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 8 24) RTN ?float5) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ?float2 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 5 11) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or (and (and ?bool15))))
(check-sat)


-- iteration 151 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11001 #b0111110110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ((_ to_fp 15 113) RTZ ?float4) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ((_ to_fp 15 113) RTN ?float4) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ?float8 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 8 24) RTN ?float4) ?float3)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 152 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011010000111100 #b0111001111100010101110010100000001001011111110010101111001001000001110010000101000011011001000110011101110101110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11101 #b0000110111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float3 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 15 113) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 5 11) RNE ?float6))))
; FINAL ASSERT
(assert (and (and (and (or ?bool12) (or ?bool14 ?bool12 ?bool12)) ?bool15)))
(check-sat)


-- iteration 153 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RTN ?float5) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 154 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RNE ?float7) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 15 113) RTZ ?float10))))
; FINAL ASSERT
(assert (or ?bool12 ?bool12 (and ?bool13 (and (and ?bool13 ?bool14 ?bool11)) ?bool13)))
(check-sat)


-- iteration 155 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10101 #b1101101111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float3 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RNE ?float9) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 5 11) RNE ?float10) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (or (or (or ?bool11) ?bool11) ?bool14 ?bool15) (or (or (and ?bool14 ?bool15 ?bool11)) (or ?bool13 ?bool12 (and ?bool13 ?bool12 ?bool14)) ?bool14) (and (or (and ?bool14 ?bool11) (and ?bool13 ?bool13)) ?bool14 ?bool15)))
(check-sat)


-- iteration 156 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float4 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ((_ to_fp 15 113) RTZ ?float2) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float6 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTN ?float8) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 5 11) RNE ?float5))))
; FINAL ASSERT
(assert (and (and (or (or ?bool15 ?bool12) ?bool13) ?bool14) ?bool15 ?bool11))
(check-sat)


-- iteration 157 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float4 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float2 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTZ ?float8) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and (and (or (or ?bool12) (or ?bool15)) (and (or ?bool15 ?bool13) ?bool15 ?bool12)) ?bool11 (or (and (and ?bool14)))))
(check-sat)


-- iteration 158 --
(declare-fun f0 (Float128 Float128 Float64) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101100000000110 #b1111110010011001000100101001100110110111111100000011001100111101000011001011010010001110101110101111101011011000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float5 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float7 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RNE ?float3))))
; FINAL ASSERT
(assert (and (or ?bool13) (and (or ?bool14) ?bool11) ?bool15))
(check-sat)


-- iteration 159 --
(declare-fun f0 (Float16 Float128 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01001000011 #b1010001001110010100010010110110110011000011000001001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float3 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ((_ to_fp 8 24) RNE ?float6) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 5 11) RNE ?float4) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTN ?float4) ?float2)))
; FINAL ASSERT
(assert (or ?bool12 (and ?bool13 (or ?bool15 ?bool15 (or ?bool11)) (and (or ?bool14 ?bool15 ?bool13) (or ?bool13 ?bool11 ?bool14) (or ?bool15 ?bool12 ?bool12)))))
(check-sat)


-- iteration 160 --
(declare-fun f0 (Float16 Float128 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RNE ?float3 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15 ?bool12))
(check-sat)


-- iteration 161 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 8 24) RTZ ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float6 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float9 ((_ to_fp 8 24) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 11 53) RNE ?float6))))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool13 (and ?bool13) ?bool11)))
(check-sat)


-- iteration 162 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 163 --
(declare-fun f0 (Float64 Float64 Float128) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7 ?float2 ((_ to_fp 15 113) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float6) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or (or (or (and ?bool13) ?bool14) (or ?bool15 (or ?bool11) (and ?bool15 ?bool12 ?bool15))) (or ?bool11)))
(check-sat)


-- iteration 164 --
(declare-fun f0 (Float64 Float64 Float16) Float128)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110111000000111 #b1010100110011111111100111110101010111011111100110011001011110111010100000110011111001111011101000100111100110010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float2 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2) ?float3 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float6 ((_ to_fp 15 113) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTN ?float3) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 165 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ?float2 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float5 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ?float10)))
; FINAL ASSERT
(assert (and (or (and (and ?bool15 ?bool15) ?bool14 (or ?bool14 ?bool13)) (or ?bool11 (and ?bool12 ?bool13 ?bool15) ?bool14))))
(check-sat)


-- iteration 166 --
(declare-fun f0 (Float16 Float128) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11011010111 #b1010111110110000001100110001100011000100111101010100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 8 24) RTN ?float4) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (or ?bool15) (or (or (and ?bool13 ?bool11) (or ?bool15 ?bool15) (and ?bool13 ?bool15 ?bool12)) (and (and ?bool11) (or ?bool15 ?bool13 ?bool14) (or ?bool12 ?bool12 ?bool15))) ?bool12))
(check-sat)


-- iteration 167 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float3 ((_ to_fp 5 11) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float2)))
; FINAL ASSERT
(assert (and (or (or ?bool13)) ?bool12 (and ?bool13)))
(check-sat)


-- iteration 168 --
(declare-fun f0 (Float16 Float32 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10010 #b1000011110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTP ?float6) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RTZ ?float5) ?float9)))
; FINAL ASSERT
(assert (and (or (or ?bool15 (and ?bool14) (or ?bool15 ?bool15))) (and ?bool13) (and (and (or ?bool11 ?bool12 ?bool11)))))
(check-sat)


-- iteration 169 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float6 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float5 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and ?bool11 ?bool11 ?bool13))
(check-sat)


-- iteration 170 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101010001001111 #b1011110011101011110111000111111011001010100100110110110011111100001100010010100011101110101111011111111110101111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float6 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 8 24) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool15 (and (and ?bool15 (or ?bool11 ?bool15 ?bool15)) (and ?bool14)) (or (or (and ?bool12) ?bool12 (and ?bool14 ?bool12)) ?bool11)))
(check-sat)


-- iteration 171 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ((_ to_fp 15 113) RNE ?float5) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTP ?float8) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTP ?float3) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 ?bool15))
(check-sat)


-- iteration 172 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RNE ?float7) ?float5)))
; FINAL ASSERT
(assert (or ?bool13 (or (or (and ?bool13) ?bool11 ?bool15) (or ?bool15 (and ?bool14) (or ?bool15))) (and (or ?bool11 ?bool11) ?bool15 (or (or ?bool13 ?bool12 ?bool11) (or ?bool11 ?bool12 ?bool13) (and ?bool15 ?bool11 ?bool13)))))
(check-sat)


-- iteration 173 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01010 #b1111100000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTN ?float2) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (or ?bool11 ?bool12 ?bool14))
(check-sat)


-- iteration 174 --
(declare-fun f0 (Float64 Float64 Float64) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01011 #b0000110000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float3) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RTN ?float4) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTP ?float4) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ?float8)))
; FINAL ASSERT
(assert (or (or (or (and ?bool13 ?bool12) (or ?bool13) (or ?bool12)) ?bool14) (or ?bool14) (and (and ?bool14))))
(check-sat)


-- iteration 175 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13 (and (and ?bool11 (or ?bool12 ?bool12)))))
(check-sat)


-- iteration 176 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ((_ to_fp 5 11) RTZ ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float6) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and (and ?bool15 ?bool15) ?bool11))
(check-sat)


-- iteration 177 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 8 24) RTZ ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float5 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RTZ ?float6) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RTN ?float3) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 11 53) RNE ?float6) ?float6)))
; FINAL ASSERT
(assert (or (or ?bool13 (or (and ?bool11 ?bool14) (or ?bool13) (or ?bool13))) ?bool11))
(check-sat)


-- iteration 178 --
(declare-fun f0 (Float128 Float128 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11001 #b1111001001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float2 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 8 24) RTP ?float9) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and (or ?bool13 (and (and ?bool12 ?bool14)) (and ?bool11 ?bool13)) ?bool12))
(check-sat)


-- iteration 179 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10011100011 #b1110010001000110110010100000110101010110001001111110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b001000100101010 #b1110001101010000001010100000101110011100001110110000011001001101000000100101101000111001101011010110100001001000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTN ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float4 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 11 53) RTZ ?float5) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTZ ?float3) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 180 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01100 #b1100111000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float5) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 ?bool12))
(check-sat)


-- iteration 181 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float4 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float8 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ((_ to_fp 11 53) RNE ?float2))))
; FINAL ASSERT
(assert (or ?bool15 ?bool15 (and (or ?bool14) ?bool14)))
(check-sat)


-- iteration 182 --
(declare-fun f0 (Float64 Float32 Float16) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 8 24) RNE ?float3) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RTZ ?float3) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RNE ?float7) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ((_ to_fp 15 113) RTN ?float6))))
; FINAL ASSERT
(assert (or ?bool14 ?bool14 ?bool13))
(check-sat)


-- iteration 183 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00010111001 #b0101001101001000011000111111000001000010011101011101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float3) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTN ?float6) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 8 24) RTP ?float9) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (and (and (or (or ?bool14 ?bool11)) ?bool15 ?bool13) (and (or (and ?bool14) ?bool13) (and (or ?bool14 ?bool11) (and ?bool14)) (or (and ?bool14 ?bool11 ?bool15) ?bool11))))
(check-sat)


-- iteration 184 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float5 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 11 53) RTP ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 8 24) RNE ?float7) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 8 24) RTZ ?float9))))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 185 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ((_ to_fp 11 53) RTZ ?float5) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTN ?float9) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float5))))
; FINAL ASSERT
(assert (and (and (or ?bool14 (or ?bool12) (or ?bool12 ?bool13))) ?bool11))
(check-sat)


-- iteration 186 --
(declare-fun f0 (Float64 Float64 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100101000010001 #b0110101000000011010010101011101110011010010111111111110110010000111000111110110110110110111000111000011110001000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 5 11) RNE ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RTN ?float8) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RNE ?float5) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and ?bool11 (or (or ?bool11))))
(check-sat)


-- iteration 187 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 15 113) RTP ?float10))))
; FINAL ASSERT
(assert (or (or ?bool13 (and (or ?bool12 ?bool15 ?bool14))) ?bool11))
(check-sat)


-- iteration 188 --
(declare-fun f0 (Float128 Float16 Float64) Float32)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11001101011 #b1101100011101011011000000100000111111001100010010011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float3 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 5 11) RNE ?float7) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 11 53) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float6 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or (or ?bool14)))
(check-sat)


-- iteration 189 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float4 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 15 113) RTP ?float6) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTZ ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 8 24) RTP ?float9))))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool13 ?bool12 ?bool13) ?bool15))
(check-sat)


-- iteration 190 --
(declare-fun f0 (Float16 Float128) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10011100 #b11000110100110110000011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTP ?float4) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or (or (or (or ?bool11))) ?bool15 (or (or ?bool11 ?bool15) ?bool14)))
(check-sat)


-- iteration 191 --
(declare-fun f0 (Float32 Float32 Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float6 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4) ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float3)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 192 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00101 #b0010000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RNE ?float3) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ((_ to_fp 8 24) RTN ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTZ ?float10) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTN ?float7) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 15 113) RNE ?float2))))
; FINAL ASSERT
(assert (and (and (and ?bool12) (or ?bool13 ?bool13 (and ?bool14 ?bool12)) (or ?bool15))))
(check-sat)


-- iteration 193 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11010011 #b10010111100011000111000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float3 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 5 11) RTN ?float9) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 194 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11101101 #b01000100010011010000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float3 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float5 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RNE ?float6) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 195 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11011111 #b10110100101101100001000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RNE ?float4) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float3 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTP ?float6) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RNE ?float10) ?float3)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13 ?bool14))
(check-sat)


-- iteration 196 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000111011 #b1100000111000011000110111101110001010110100101100000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float2 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 11 53) RTP ?float7) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RTN ?float3) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float8)))
; FINAL ASSERT
(assert (and (or (and ?bool11 (and ?bool14 ?bool13 ?bool15) ?bool12) ?bool13) (or (or (or ?bool13)) ?bool14) (and ?bool12 ?bool11)))
(check-sat)


-- iteration 197 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11000 #b1101000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float4) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ?float7 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RTP ?float4) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ((_ to_fp 5 11) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 198 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01111 #b1001001011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTZ ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ((_ to_fp 5 11) RTP ?float3) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float2 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (or ?bool13 ?bool12 (or ?bool11 (or (or ?bool14)) (or ?bool11 (and ?bool11 ?bool15 ?bool14) ?bool11))))
(check-sat)


-- iteration 199 --
(declare-fun f0 (Float64 Float128 Float64) Float16)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 5 11) RTN ?float5) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float9) ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and ?bool14 (or (and ?bool12 ?bool15 (or ?bool12 ?bool15)) (and ?bool12 (and ?bool15 ?bool15 ?bool15)))))
(check-sat)


-- iteration 200 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11000 #b1101000010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float8 ((_ to_fp 11 53) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 ?bool11))
(check-sat)


-- iteration 201 --
(declare-fun f0 (Float64 Float128 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float5) ?float5 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ((_ to_fp 5 11) RTP ?float10))))
; FINAL ASSERT
(assert (and ?bool15 ?bool13 (and (or ?bool11 (or ?bool13 ?bool15) ?bool15) ?bool12)))
(check-sat)


-- iteration 202 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11))
(check-sat)


-- iteration 203 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 11 53) RTZ ?float3) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float8 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 5 11) RNE ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTP ?float7) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTN ?float7) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (and ?bool14 ?bool15 (and ?bool15)))
(check-sat)


-- iteration 204 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ?float6 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float5 ((_ to_fp 8 24) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float3 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 205 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ?float5)))
; FINAL ASSERT
(assert (or (or (or ?bool15 (and ?bool14 ?bool11))) (or (and (and ?bool12 ?bool13 ?bool13) (or ?bool13 ?bool13)) (and (or ?bool15) ?bool14 (and ?bool13 ?bool14)) (and ?bool14 ?bool14 (or ?bool14 ?bool14))) ?bool15))
(check-sat)


-- iteration 206 --
(declare-fun f0 (Float32 Float32 Float32) Float128)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float2 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 15 113) RTN ?float6) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ((_ to_fp 5 11) RTZ ?float8) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 11 53) RTN ?float5))))
; FINAL ASSERT
(assert (or (and (or ?bool12)) ?bool12))
(check-sat)


-- iteration 207 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 11 53) RTZ ?float9) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or ?bool14 (and ?bool15) (and (or (or ?bool13)) ?bool12 (or (and ?bool15 ?bool14 ?bool12) ?bool12))))
(check-sat)


-- iteration 208 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ?float5 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float2) ?float9 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 8 24) RTP ?float10))))
; FINAL ASSERT
(assert (or (or ?bool14) (and (or ?bool12) (and (and ?bool13) (or ?bool14 ?bool12 ?bool14)))))
(check-sat)


-- iteration 209 --
(declare-fun f0 (Float16 Float16 Float64) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTN ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 5 11) RNE ?float5) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool13 (and ?bool14 ?bool14 ?bool15))))
(check-sat)


-- iteration 210 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000001011 #b0101010100101000010000001000111111110011110111000111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float6 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float8 ((_ to_fp 11 53) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ((_ to_fp 8 24) RTN ?float5))))
; FINAL ASSERT
(assert (and (and (or (and ?bool14 ?bool12) ?bool11 (and ?bool15))) ?bool15 (or (and (or ?bool11 ?bool13 ?bool13) ?bool13) ?bool12)))
(check-sat)


-- iteration 211 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float6 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float5 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float7 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or (and (and (or ?bool14 ?bool15 ?bool15) ?bool13) (and (and ?bool12))) (or ?bool14 ?bool12 (and ?bool13))))
(check-sat)


-- iteration 212 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11011001 #b11001011110000011001010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTP ?float3) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ?float5 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ?float5 ((_ to_fp 15 113) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and (and (or (and ?bool15) ?bool13) (or ?bool13 (or ?bool15 ?bool11))) (or ?bool12 ?bool15 (or ?bool11)) (and (and ?bool12 ?bool11 ?bool14) (and ?bool14) (and ?bool15 ?bool14))))
(check-sat)


-- iteration 213 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float2 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float5 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float2 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 214 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RTN ?float4) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ((_ to_fp 8 24) RNE ?float6) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTN ?float4) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and (and ?bool12 (or ?bool13))))
(check-sat)


-- iteration 215 --
(declare-fun f0 (Float16 Float128 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 11 53) RTN ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (or (and (or ?bool11)) (and (or ?bool12 ?bool11) (and ?bool11 ?bool12)) ?bool15))
(check-sat)


-- iteration 216 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ?float6 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float2) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ?float6 ((_ to_fp 8 24) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 217 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float2 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float3 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RTZ ?float2) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and (and ?bool11 (and ?bool15 (or ?bool12) ?bool15) (or (and ?bool12 ?bool15) (or ?bool12 ?bool14) ?bool13)) ?bool14))
(check-sat)


-- iteration 218 --
(declare-fun f0 (Float16 Float16 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ((_ to_fp 11 53) RNE ?float7))))
; FINAL ASSERT
(assert (and (or ?bool12 (or ?bool11 (or ?bool12 ?bool13 ?bool12) (and ?bool13 ?bool14 ?bool13)))))
(check-sat)


-- iteration 219 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float6 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15 (and ?bool13 (and ?bool14) ?bool11)))
(check-sat)


-- iteration 220 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float5 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 8 24) RTP ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 221 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9)))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool15 (and ?bool14 ?bool13 (and ?bool14 ?bool14)) (and ?bool15 (and ?bool13) ?bool13)) ?bool12))
(check-sat)


-- iteration 222 --
(declare-fun f0 (Float16 Float128 Float128) Float128)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float5 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (and (and ?bool11 ?bool13 ?bool14)) (or ?bool15)))
(check-sat)


-- iteration 223 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float7 ((_ to_fp 15 113) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and (and (and (and ?bool13 ?bool13))) (and ?bool14 ?bool11 ?bool15) (or (or (or ?bool15) ?bool13 ?bool14) ?bool15)))
(check-sat)


-- iteration 224 --
(declare-fun f0 (Float32 Float16 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float4 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float6 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ?float8)))
; FINAL ASSERT
(assert (or (or ?bool12) (or (or ?bool15))))
(check-sat)


-- iteration 225 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00010 #b0000000110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float2) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float2 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (or ?bool12 (or (or ?bool15 ?bool15 ?bool11))) (or (and ?bool12 (and ?bool12 ?bool12) ?bool11) ?bool13 (or (and ?bool13 ?bool13) (and ?bool12 ?bool12)))))
(check-sat)


-- iteration 226 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ?float6 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float4 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float3 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 5 11) RTZ ?float4))))
; FINAL ASSERT
(assert (and (and ?bool14)))
(check-sat)


-- iteration 227 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float8 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float8) ?float8)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 228 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00010011 #b10011000001100100011110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float3 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and ?bool11 (or (or (and ?bool15)) (or (and ?bool11 ?bool15 ?bool15)) (or (or ?bool13 ?bool11 ?bool12) (and ?bool12 ?bool13 ?bool12))) ?bool12))
(check-sat)


-- iteration 229 --
(declare-fun f0 (Float128 Float128 Float128) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float5 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float4 ((_ to_fp 15 113) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14 (or (and ?bool13 ?bool12 ?bool15) ?bool15 ?bool11)))
(check-sat)


-- iteration 230 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTP ((_ to_fp 11 53) RNE ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ((_ to_fp 11 53) RTN ?float3) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 8 24) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float8) ?float9 ((_ to_fp 8 24) RNE ?float10))))
; FINAL ASSERT
(assert (or ?bool15 ?bool11 (and (or ?bool11 ?bool11 ?bool15) ?bool13 ?bool11)))
(check-sat)


-- iteration 231 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTP ?float3) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ?float8 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTZ ?float3) ?float2)))
; FINAL ASSERT
(assert (and (or ?bool11)))
(check-sat)


-- iteration 232 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTZ ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float9) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool12 ?bool15 ?bool14))
(check-sat)


-- iteration 233 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b100110100001010 #b0110100100001010001110010000100010111011110111000011010110001011011011010100000100101010000111100010010100110110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float4 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float5) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool14 (or (and ?bool12 ?bool13 ?bool12) (and ?bool15))) ?bool15))
(check-sat)


-- iteration 234 --
(declare-fun f0 (Float16 Float16 Float64) Float32)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11010010 #b00000010101000100101011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RTN ?float6) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 11 53) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float6) ?float8 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ((_ to_fp 15 113) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RTP ?float3) ?float3)))
; FINAL ASSERT
(assert (or (or ?bool11 (or (and ?bool14) (and ?bool12)) ?bool13) ?bool13 (or (or (or ?bool13 ?bool15)))))
(check-sat)


-- iteration 235 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01101110001 #b0011111110011010000001010110101001010010110011110111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float8 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (or (or ?bool13 ?bool15 ?bool11) (and ?bool14 (or ?bool15) ?bool11) ?bool14)))
(check-sat)


-- iteration 236 --
(declare-fun f0 (Float64 Float16 Float64) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float5 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ((_ to_fp 5 11) RNE ?float9))))
; FINAL ASSERT
(assert (and (or (or (or ?bool11 ?bool12)) (and ?bool13 (and ?bool12 ?bool13 ?bool14) (and ?bool13 ?bool14))) (and ?bool13 (or ?bool14) (and (or ?bool15) (or ?bool15 ?bool13) ?bool13)) (and (or (and ?bool15 ?bool13)))))
(check-sat)


-- iteration 237 --
(declare-fun f0 (Float16 Float128 Float128) Float32)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ?float4 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float4) ?float6 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ?float7)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 238 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11001011 #b11111000000110000101000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ?float4 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTZ ?float6) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTZ ?float7) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (or (and (or ?bool15) (or (and ?bool11 ?bool13) ?bool13 (or ?bool12 ?bool13 ?bool12)) ?bool11) (or (and (or ?bool11) ?bool15)) (or ?bool13)))
(check-sat)


-- iteration 239 --
(declare-fun f0 (Float64 Float32 Float128) Float64)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00001100 #b11011001000111101001000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ((_ to_fp 11 53) RNE ?float7) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RNE ?float2) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool15) (or (or ?bool11 (and ?bool11 ?bool12 ?bool15))) ?bool14))
(check-sat)


-- iteration 240 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float5 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float4 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float9))))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool12 ?bool13)))
(check-sat)


-- iteration 241 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ((_ to_fp 15 113) RNE ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float6 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTP ?float5) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTZ ?float8) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float6)))
; FINAL ASSERT
(assert (or (and (and ?bool15 ?bool14 ?bool12) (and (or ?bool12 ?bool13 ?bool13) ?bool13 ?bool12) ?bool12) (or (or ?bool11 (and ?bool13 ?bool13 ?bool13) ?bool11))))
(check-sat)


-- iteration 242 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0110011010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTP ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ((_ to_fp 11 53) RNE ?float6) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float7 ((_ to_fp 5 11) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTP ?float7) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 5 11) RTP ?float8))))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool15 ?bool15) (and ?bool13) ?bool12))
(check-sat)


-- iteration 243 --
(declare-fun f0 (Float16 Float16 Float16) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ((_ to_fp 11 53) RTP ?float4) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool13) ?bool15 ?bool11))
(check-sat)


-- iteration 244 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float4 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 15 113) RTZ ?float6) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float9) ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool12 ?bool11) (and (and (or ?bool14 ?bool15) (or ?bool15 ?bool11)))))
(check-sat)


-- iteration 245 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTP ?float6 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float2 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RTN ?float5) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 5 11) RTP ?float5))))
; FINAL ASSERT
(assert (or ?bool15 ?bool13))
(check-sat)


-- iteration 246 --
(declare-fun f0 (Float32 Float128 Float64) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float2 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float4) ?float7 ((_ to_fp 11 53) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and (and (and ?bool14 (or ?bool15) ?bool14)) (and (and ?bool12 ?bool13) (and (or ?bool15 ?bool14 ?bool14))) (or ?bool14)))
(check-sat)


-- iteration 247 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11101101 #b00111000001110110101000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float5 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (and (or (and ?bool11 (or ?bool11 ?bool13) ?bool14) ?bool11 ?bool12) (or (and ?bool15 ?bool14 ?bool13) (or (or ?bool14)) ?bool14)))
(check-sat)


-- iteration 248 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTZ ?float6 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RTP ?float5) ?float7)))
; FINAL ASSERT
(assert (and (or (and (or ?bool15 ?bool12) (or ?bool12 ?bool13) (or ?bool15 ?bool13)))))
(check-sat)


-- iteration 249 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ?float2 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float2 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (or (and ?bool11 ?bool11 (or ?bool12)))))
(check-sat)


-- iteration 250 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00101111000 #b0100101010111111011111001100101100101011100011101101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTP ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float10))))
; FINAL ASSERT
(assert (or (and (or (or ?bool15 ?bool12 ?bool12) (or ?bool15 ?bool13 ?bool12))) ?bool14))
(check-sat)


-- iteration 251 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 15 113) RTZ ?float2) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTP ?float6 ((_ to_fp 8 24) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ((_ to_fp 15 113) RTZ ?float7))))
; FINAL ASSERT
(assert (or ?bool15 ?bool11))
(check-sat)


-- iteration 252 --
(declare-fun f0 (Float64 Float64 Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTP ?float4) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float6 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float9)))
; FINAL ASSERT
(assert (and (and ?bool14 (and (or ?bool15 ?bool15 ?bool14))) ?bool13 (and (or (or ?bool15)) (and (or ?bool15 ?bool15) ?bool12 (or ?bool13)))))
(check-sat)


-- iteration 253 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RNE ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float5 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ((_ to_fp 5 11) RTN ?float6) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 11 53) RTP ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RNE ?float10) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RTN ?float3) ?float9)))
; FINAL ASSERT
(assert (and ?bool14 ?bool11 ?bool11))
(check-sat)


-- iteration 254 --
(declare-fun f0 (Float32 Float128 Float16) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float9 ((_ to_fp 15 113) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RTP ?float7) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float7) ?float8)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool15 (and ?bool15) (or ?bool11))))
(check-sat)


-- iteration 255 --
(declare-fun f0 (Float128 Float32 Float64) Float128)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and (or (or ?bool15 (and ?bool12 ?bool11 ?bool12)) (or ?bool14 (or ?bool15 ?bool14) ?bool12) (or (and ?bool14 ?bool11 ?bool14) (or ?bool13)))))
(check-sat)


-- iteration 256 --
(declare-fun f0 (Float64 Float16 Float16) Float128)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTN ?float4) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTZ ?float10) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 8 24) RTN ?float2))))
; FINAL ASSERT
(assert (or (and (or (or ?bool15 ?bool13)))))
(check-sat)


-- iteration 257 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float3 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float7 ((_ to_fp 15 113) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 258 --
(declare-fun f0 (Float64 Float128 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110110001010101 #b1101101111111110110010110110110111000101000001110001111011111001001011000010110110010111010110010001001000011011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6) ?float4 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float7) ?float6 ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float8)))
; FINAL ASSERT
(assert (or (and (and (or ?bool13 ?bool14) (or ?bool13) ?bool14) ?bool11) (and (and (or ?bool12 ?bool12 ?bool14)) (or (or ?bool11) ?bool15) (or ?bool13 (and ?bool14 ?bool11)))))
(check-sat)


-- iteration 259 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000010 #b11001010000100110111010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 5 11) RNE ?float8) ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 8 24) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ((_ to_fp 8 24) RTP ?float5) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTP ?float9) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float4)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 260 --
(declare-fun f0 (Float64 Float64 Float16) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10100 #b0011000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float2 ((_ to_fp 5 11) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float5) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float3)))
; FINAL ASSERT
(assert (and (or ?bool13 (and ?bool15 ?bool13))))
(check-sat)


-- iteration 261 --
(declare-fun f0 (Float16 Float128) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float5) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 5 11) RNE ?float7))))
; FINAL ASSERT
(assert (or (or ?bool11 (and (and ?bool11) ?bool12 ?bool13)) ?bool14 ?bool14))
(check-sat)


-- iteration 262 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ((_ to_fp 15 113) RTZ ?float8))))
; FINAL ASSERT
(assert (or (and ?bool12) ?bool11 (or (and (and ?bool15 ?bool11 ?bool15) (or ?bool11 ?bool11)) (or ?bool12 (or ?bool11)))))
(check-sat)


-- iteration 263 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100111000110101 #b1101010011111110001101010010101001100100110000001000100110101000101111000010110101001001000011000011011010100100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float4 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float6) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool12 ?bool11)))
(check-sat)


-- iteration 264 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float4 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ?float8 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool13 ?bool14) (or ?bool12 ?bool13 ?bool11)))
(check-sat)


-- iteration 265 --
(declare-fun f0 (Float128 Float128 Float16) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000100 #b11101000011010000111111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ?float5 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float9) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RNE ?float10) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool13 ?bool11) (and ?bool14 ?bool15)))
(check-sat)


-- iteration 266 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ((_ to_fp 8 24) RTZ ?float6) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ?float3 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 8 24) RTZ ?float9) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RTP ?float8) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float10) ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13 ?bool11))
(check-sat)


-- iteration 267 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 5 11) RTN ?float3) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float6 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTN ?float2) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ?float5)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool15) ?bool11))
(check-sat)


-- iteration 268 --
(declare-fun f0 (Float128 Float64 Float128) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTZ ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ?float6 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool15 ?bool11)))
(check-sat)


-- iteration 269 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ?float4 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float3))))
; FINAL ASSERT
(assert (or (or (or (and ?bool15 ?bool12) ?bool14)) ?bool12 (and (and ?bool13) ?bool12)))
(check-sat)


-- iteration 270 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float2 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 15 113) RTN ?float6) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float5 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 271 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 11 53) RNE ?float7))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 272 --
(declare-fun f0 (Float16 Float16 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float4 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float6) ?float7 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTP ?float7) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RTP ?float3) ?float9)))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool12 (and ?bool13)) ?bool12))
(check-sat)


-- iteration 273 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float4 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ((_ to_fp 11 53) RTN ?float6))))
; FINAL ASSERT
(assert (and (or ?bool12)))
(check-sat)


-- iteration 274 --
(declare-fun f0 (Float32 Float32 Float16) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or (and (and (and ?bool13 ?bool15 ?bool14) (and ?bool13) ?bool15)) ?bool12))
(check-sat)


-- iteration 275 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01011000 #b01100001110110101101000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ?float4 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float8) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (or (or (and (or ?bool12 ?bool14)) ?bool12 (or (or ?bool11 ?bool12) ?bool14)) ?bool11))
(check-sat)


-- iteration 276 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10001000 #b11100100101111100101101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTZ ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ((_ to_fp 15 113) RTZ ?float4) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RNE ?float8) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float3) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RNE ?float7) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or ?bool13 ?bool12 (and ?bool12 ?bool12 ?bool13)))
(check-sat)


-- iteration 277 --
(declare-fun f0 (Float32 Float64 Float16) Float128)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float4) ?float5 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RTP ?float3) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RNE ?float7) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTN ?float2) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15 ?bool15))
(check-sat)


-- iteration 278 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float2 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float9 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (or (and (and ?bool12)) (and (or ?bool11 ?bool13) (and ?bool15) ?bool13) ?bool15)))
(check-sat)


-- iteration 279 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ((_ to_fp 11 53) RTP ?float4) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 15 113) RNE ?float7) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float4 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ((_ to_fp 8 24) RNE ?float9))))
; FINAL ASSERT
(assert (or (or ?bool14 (or ?bool13 (and ?bool12 ?bool13) ?bool15)) (or ?bool15) ?bool15))
(check-sat)


-- iteration 280 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float4 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 8 24) RTN ?float2) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (or ?bool13 (or (or ?bool12) ?bool11 ?bool13) ?bool12)))
(check-sat)


-- iteration 281 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10101010 #b01100011001111111110110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float3 ((_ to_fp 5 11) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RNE ?float2) ?float3)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool11)))
(check-sat)


-- iteration 282 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01110101011 #b1111100110100111011110111110100111010101101110001001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ?float7 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 ?bool14))
(check-sat)


-- iteration 283 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00001111011 #b1100100100000011010101000000110101001001100111101001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float3 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float3 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float4 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float8) ?float2)))
; FINAL ASSERT
(assert (and (or ?bool13) (or ?bool12 ?bool15 ?bool11) (and (and (and ?bool13 ?bool15 ?bool12)) ?bool15 (and (or ?bool12 ?bool14 ?bool13)))))
(check-sat)


-- iteration 284 --
(declare-fun f0 (Float64 Float32 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float5 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float3 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float7 ((_ to_fp 8 24) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RTZ ?float4) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or ?bool12 (or (and ?bool12) (and ?bool13 ?bool14) (or ?bool11 ?bool13 ?bool15))))
(check-sat)


-- iteration 285 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (or ?bool12 ?bool15))
(check-sat)


-- iteration 286 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTN ?float4) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float9)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool13 ?bool14) (and ?bool15 ?bool14) (or ?bool13)))
(check-sat)


-- iteration 287 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11110111110 #b1100111100010100011010110100100000111101111011100001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTN ?float6) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 15 113) RTZ ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 15 113) RNE ?float3))))
; FINAL ASSERT
(assert (and ?bool14 ?bool11 ?bool11))
(check-sat)


-- iteration 288 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float2) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTZ ?float5) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTZ ?float5) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ((_ to_fp 5 11) RTP ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool11 (and (and ?bool12))))
(check-sat)


-- iteration 289 --
(declare-fun f0 (Float32 Float16 Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float2 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTP ?float2) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 290 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ((_ to_fp 8 24) RTN ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 15 113) RTN ?float6) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTN ?float5) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float10) ?float4 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (or ?bool11 ?bool12))
(check-sat)


-- iteration 291 --
(declare-fun f0 (Float64 Float16 Float128) Float64)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11001 #b1110101001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01100111 #b00110101100000101110111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float5 ((_ to_fp 8 24) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float10) ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool13 ?bool13 (and ?bool12 (and ?bool12 ?bool15))))
(check-sat)


-- iteration 292 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float4 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RTN ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ((_ to_fp 8 24) RTN ?float4) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RTN ?float4) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and (or (or (and ?bool14) ?bool13 (and ?bool11 ?bool11)) (and (or ?bool11) (or ?bool15 ?bool14 ?bool11) (or ?bool13 ?bool15 ?bool14))) ?bool12 (and ?bool13)))
(check-sat)


-- iteration 293 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100111110110101 #b1101101111001101000011001101110100000110000001101001111010000011100011001111011000101000010001001100011001000110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ?float3 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float5 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RNE ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float8))))
; FINAL ASSERT
(assert (or ?bool15 ?bool15 (and ?bool14 (or (or ?bool12 ?bool14)) (and ?bool14 (and ?bool11 ?bool11) ?bool12))))
(check-sat)


-- iteration 294 --
(declare-fun f0 (Float128 Float32 Float32) Float32)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float5) ?float3 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float3) ?float3 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 5 11) RTZ ?float4) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ((_ to_fp 5 11) RTZ ?float10))))
; FINAL ASSERT
(assert (and (or ?bool13) (or ?bool12 ?bool14 (and ?bool11 ?bool13 ?bool14)) (and (and ?bool11 ?bool11))))
(check-sat)


-- iteration 295 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float2 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float5 ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTN ?float10) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float3)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 296 --
(declare-fun f0 (Float16 Float64 Float128) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 11 53) RTN ?float8) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 11 53) RTP ?float5))))
; FINAL ASSERT
(assert (and ?bool11 ?bool11))
(check-sat)


-- iteration 297 --
(declare-fun f0 (Float32 Float16 Float16) Float32)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01011 #b0111000101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float3 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTZ ?float6) ?float2)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool13 (and (and ?bool14) ?bool15 ?bool15)) ?bool13 (and (or ?bool15 (and ?bool11 ?bool11 ?bool11) (and ?bool14)) ?bool14)))
(check-sat)


-- iteration 298 --
(declare-fun f0 (Float128 Float32 Float32) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 8 24) RTN ?float7) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float8) ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float5) ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 8 24) RTP ?float4))))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool14 (or (or ?bool15 ?bool13 ?bool13)) ?bool15)))
(check-sat)


-- iteration 299 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11100100 #b11111111000100000010100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 8 24) RTZ ?float5) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 11 53) RTZ ?float3))))
; FINAL ASSERT
(assert (or (or (and ?bool12) ?bool15 ?bool14) ?bool14 ?bool11))
(check-sat)


-- iteration 300 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b1000010000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float4) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ((_ to_fp 5 11) RTN ?float4) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (or (and (and ?bool11 ?bool14 (or ?bool13)) ?bool15) ?bool12 ?bool15))
(check-sat)


-- iteration 301 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00101 #b1001000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float5 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 15 113) RTP ?float6) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ((_ to_fp 11 53) RNE ?float3) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float8) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTN ?float5) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and ?bool11 (or (and ?bool15 (or ?bool13 ?bool12 ?bool12)))))
(check-sat)


-- iteration 302 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RTZ ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ?float5 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ?float5 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 303 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float8 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (and (or (or (or ?bool14 ?bool15) (and ?bool14) (or ?bool13 ?bool13)) (or (and ?bool12)) (and (and ?bool15))) ?bool13 (or ?bool13)))
(check-sat)


-- iteration 304 --
(declare-fun f0 (Float128 Float128 Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float8) ?float6 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RTZ ?float4) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or (and (or (or ?bool15 ?bool13 ?bool12) (or ?bool15)) ?bool15) (or (and ?bool11 (or ?bool15)) ?bool13) (or (and (or ?bool15) ?bool15) ?bool12 (or ?bool11 ?bool12))))
(check-sat)


-- iteration 305 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00111001 #b11100111100100100101111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ?float4 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float7))))
; FINAL ASSERT
(assert (and ?bool15 ?bool11 ?bool13))
(check-sat)


-- iteration 306 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ?float2 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 5 11) RNE ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ?float7 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RNE ?float5) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 307 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float7 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ?float6 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float5 ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float6) ?float3 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (or (or (or ?bool11))))
(check-sat)


-- iteration 308 --
(declare-fun f0 (Float64 Float16 Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 5 11) RNE ?float6) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float5 ((_ to_fp 11 53) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTP ?float9) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 309 --
(declare-fun f0 (Float128 Float128 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float3 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float6 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ?float4 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float8))))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool11 ?bool11)))
(check-sat)


-- iteration 310 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01111010000 #b1110000100100010010001010010111100100011010100110110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float6 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float9 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 5 11) RTZ ?float3) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 5 11) RTZ ?float4) ?float3)))
; FINAL ASSERT
(assert (and (and ?bool14) (and (or ?bool13) ?bool13 ?bool13)))
(check-sat)


-- iteration 311 --
(declare-fun f0 (Float16 Float32 Float64) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 11 53) RTN ?float4) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float7) ?float7 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ((_ to_fp 11 53) RTN ?float5) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 15 113) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (or (and ?bool14 (and ?bool12 ?bool12)) ?bool12))
(check-sat)


-- iteration 312 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b011000111001011 #b1110000110011101101010011001110100010110100100001000110111001000010101101100011111110111101101011000011010001000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float6 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ?float8 ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ?float10 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool14 (and (or (and ?bool11 ?bool14) ?bool13 ?bool14)) (and ?bool14)))
(check-sat)


-- iteration 313 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float5) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float6 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float6) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTP ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float4 ?float4)))
; FINAL ASSERT
(assert (or (and (or ?bool15 ?bool11) ?bool11)))
(check-sat)


-- iteration 314 --
(declare-fun f0 (Float128 Float32 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5) ?float4 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float4 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 8 24) RNE ?float5) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 5 11) RNE ?float8) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ((_ to_fp 11 53) RTN ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float10)))
; FINAL ASSERT
(assert (or (or (or (and ?bool13 ?bool14 ?bool11)))))
(check-sat)


-- iteration 315 --
(declare-fun f0 (Float16 Float16 Float16) Float32)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTP ?float5) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (and (and ?bool14)))
(check-sat)


-- iteration 316 --
(declare-fun f0 (Float16 Float32 Float64) Float64)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000101001 #b1000111000010011110100010100011011000011000111001111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ?float7 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 8 24) RTN ?float8) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 8 24) RTN ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ((_ to_fp 15 113) RTP ?float7) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and (or ?bool11)))
(check-sat)


-- iteration 317 --
(declare-fun f0 (Float64 Float32 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float7 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float2) ?float6 ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 (and (and (or ?bool14) (and ?bool12 ?bool15 ?bool12)))))
(check-sat)


-- iteration 318 --
(declare-fun f0 (Float128 Float16 Float16) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTZ ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTP ?float7) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RTP ?float6) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and (or ?bool13 (or (and ?bool11 ?bool12 ?bool14)))))
(check-sat)


-- iteration 319 --
(declare-fun f0 (Float32 Float16 Float128) Float32)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float7) ?float7 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTP ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7 ?float6 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ((_ to_fp 8 24) RTP ?float10))))
; FINAL ASSERT
(assert (or (or (and (and ?bool15 ?bool15) ?bool13 ?bool12) ?bool14 (or ?bool13 (and ?bool14 ?bool13 ?bool11))) ?bool12 ?bool12))
(check-sat)


-- iteration 320 --
(declare-fun f0 (Float128 Float32 Float128) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01101001010 #b1000000100010111101010100000010011100000010101000101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 8 24) RTZ ?float6) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ?float7 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool14 ?bool13 ?bool11) (and (and (and ?bool12 ?bool14) ?bool13 ?bool13))))
(check-sat)


-- iteration 321 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10001 #b1110001011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float5) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float3 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float4 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 8 24) RTN ?float5))))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 322 --
(declare-fun f0 (Float128 Float32 Float32) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01001 #b0100010011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTP ?float2) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float5 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ?float5 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 8 24) RTZ ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool12 ?bool15) (or (or ?bool14 ?bool12)) (and ?bool12)))
(check-sat)


-- iteration 323 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10110111 #b10100000111001001101010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 8 24) RTN ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float2 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float2 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float4 ((_ to_fp 8 24) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and (or ?bool13)))
(check-sat)


-- iteration 324 --
(declare-fun f0 (Float64 Float16 Float64) Float16)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float4) ?float4 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 5 11) RTP ?float2) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTP ?float2) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ?float7 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float10)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool15 (or (and ?bool15 ?bool15 ?bool15))) (and ?bool12 ?bool12) ?bool13))
(check-sat)


-- iteration 325 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01100 #b1111001000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b001000101110101 #b0010001111000100101011101000011010010110101100000000100101100001100110111001010010001101000001001000101110001011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float6 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTN ?float4 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ?float6)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 326 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool11 (or ?bool12 (and ?bool15) ?bool11))))
(check-sat)


-- iteration 327 --
(declare-fun f0 (Float64 Float128 Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float4 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and (and (or (or ?bool12 ?bool12) (or ?bool15 ?bool13 ?bool11) ?bool15)) (or (or ?bool13) ?bool13 ?bool15)))
(check-sat)


-- iteration 328 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ((_ to_fp 5 11) RTZ ?float2))))
; FINAL ASSERT
(assert (and (or (and ?bool15) (or ?bool14)) (or (or ?bool12) (and (or ?bool11))) ?bool11))
(check-sat)


-- iteration 329 --
(declare-fun f0 (Float128 Float128 Float64) Float32)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 8 24) RTN ?float4) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 11 53) RTZ ?float3) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float9 ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 15 113) RTP ?float6) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float8)))
; FINAL ASSERT
(assert (or (and ?bool13) (and (or (or ?bool15 ?bool15 ?bool12) (and ?bool12 ?bool13)) ?bool13 ?bool11) ?bool11))
(check-sat)


-- iteration 330 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ((_ to_fp 5 11) RTP ?float2) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float7 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 11 53) RNE ?float3) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float3)))
; FINAL ASSERT
(assert (or ?bool11 (and (and (and ?bool12))) (and (and ?bool12 ?bool15) (and (or ?bool14 ?bool12) (and ?bool14)))))
(check-sat)


-- iteration 331 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01011000000 #b1000010000000011100111110000100101100101110011110000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ((_ to_fp 11 53) RTN ?float6) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float5 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ((_ to_fp 5 11) RTZ ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float5 ((_ to_fp 11 53) RNE ?float6))))
; FINAL ASSERT
(assert (and (or ?bool12 (and (and ?bool12 ?bool12) (and ?bool11) (and ?bool15 ?bool13)) ?bool13) (or ?bool12 ?bool11) ?bool15))
(check-sat)


-- iteration 332 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float5 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ((_ to_fp 11 53) RTZ ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ((_ to_fp 8 24) RNE ?float5) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float7) ?float3 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool14 ?bool15)))
(check-sat)


-- iteration 333 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float4 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and ?bool14 (or (or (and ?bool12 ?bool15) ?bool14))))
(check-sat)


-- iteration 334 --
(declare-fun f0 (Float64 Float64 Float128) Float32)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b011110011111100 #b0000111011010100010101101001110100100010000011010100101100011101101010010011110011010111001111111100111010111011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 11 53) RTP ?float5) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTZ ?float2) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ((_ to_fp 15 113) RTN ?float7) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float6) ?float10 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool15)))
(check-sat)


-- iteration 335 --
(declare-fun f0 (Float128 Float16 Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 15 113) RNE ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 8 24) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float4))))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool11 (or ?bool11 (and ?bool12 ?bool11 ?bool14))) ?bool12))
(check-sat)


-- iteration 336 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b111011101011101 #b0001100000111100100111110011110011110011110110011101100101001010100001111110011111110110010110010011100001011101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float4 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float5)))
; FINAL ASSERT
(assert (and (or ?bool15) (and (and ?bool13 ?bool14 ?bool11) ?bool11 ?bool14) (or ?bool12 ?bool12 (or (and ?bool13 ?bool11 ?bool15)))))
(check-sat)


-- iteration 337 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float7 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float7 ((_ to_fp 5 11) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTZ ?float5) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8)))
; FINAL ASSERT
(assert (and (and ?bool15) ?bool15))
(check-sat)


-- iteration 338 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float6 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RNE ?float9) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float2 ?float5)))
; FINAL ASSERT
(assert (and (and ?bool13 (and (or ?bool14) ?bool14 ?bool13)) ?bool11 ?bool15))
(check-sat)


-- iteration 339 --
(declare-fun f0 (Float32 Float16 Float64) Float64)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 5 11) RTP ?float7) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTN ?float2) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and (and (and (and ?bool14 ?bool15 ?bool15) (and ?bool14 ?bool13 ?bool12) (or ?bool15)) ?bool15)))
(check-sat)


-- iteration 340 --
(declare-fun f0 (Float64 Float128 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11010000111 #b0111110001011000101001010000001110010101110010101001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 5 11) RNE ?float3) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RNE ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float8))))
; FINAL ASSERT
(assert (or ?bool14 (or (and ?bool11 (and ?bool11 ?bool12 ?bool14) (and ?bool14 ?bool11)) ?bool15 ?bool13)))
(check-sat)


-- iteration 341 --
(declare-fun f0 (Float128 Float32 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 11 53) RTN ?float6) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 8 24) RNE ?float6) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ?float3 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12 (or (or (and ?bool15 ?bool11 ?bool13) ?bool11 (or ?bool15 ?bool13 ?bool15)) (and ?bool12))))
(check-sat)


-- iteration 342 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float7 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float10)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 343 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTZ ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float2 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float8 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 11 53) RNE ?float9) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ?float9)))
; FINAL ASSERT
(assert (or ?bool12 ?bool12 (and (or (and ?bool12 ?bool11)) (and (or ?bool12) ?bool13 (or ?bool12)))))
(check-sat)


-- iteration 344 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 11 53) RNE ?float2) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float6 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ((_ to_fp 11 53) RTN ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ((_ to_fp 15 113) RTP ?float8))))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 345 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float5 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float8 ((_ to_fp 11 53) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTP ?float9) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTP ?float7) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15 (and ?bool11 ?bool13 ?bool13)))
(check-sat)


-- iteration 346 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11101110 #b10100011011111110010101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10000 #b0100110000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTN ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float2 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTZ ?float2) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 5 11) RNE ?float7) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or (or (or (or ?bool14 ?bool11 ?bool14) (or ?bool11 ?bool14 ?bool13)) (and (or ?bool12) (or ?bool14 ?bool13 ?bool13)) ?bool12) (or (and (or ?bool15) (and ?bool13 ?bool15)) (or (or ?bool15 ?bool12 ?bool11)) ?bool13) ?bool12))
(check-sat)


-- iteration 347 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RTZ ?float8) ?float3)))
; FINAL ASSERT
(assert (or (or ?bool11) (and ?bool11 (and ?bool15)) (and (and ?bool14 (and ?bool13) ?bool12) ?bool13)))
(check-sat)


-- iteration 348 --
(declare-fun f0 (Float64 Float128) Float32)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11101 #b1100100010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ?float3 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float8) ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float8) ?float6 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTZ ?float6) ?float2)))
; FINAL ASSERT
(assert (and ?bool14 ?bool12))
(check-sat)


-- iteration 349 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float3 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 11 53) RNE ?float3) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool12 ?bool13))
(check-sat)


-- iteration 350 --
(declare-fun f0 (Float128 Float32 Float64) Float16)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTN ?float6) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTP ?float9) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool13)))
(check-sat)


-- iteration 351 --
(declare-fun f0 (Float128 Float64 Float16) Float128)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101110100101101 #b1101110011100011110000010101100110100010101001101101110110011000101011001110010000101011111011010111011111001111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 5 11) RTP ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 15 113) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RTP ?float10) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool13 (and ?bool15 ?bool15 ?bool14)) ?bool13))
(check-sat)


-- iteration 352 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ((_ to_fp 5 11) RTN ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float5 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float10)))
; FINAL ASSERT
(assert (and ?bool12 (and (or (and ?bool14 ?bool13 ?bool13) ?bool12 ?bool11) (or (and ?bool11 ?bool13) ?bool14)) ?bool13))
(check-sat)


-- iteration 353 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01111 #b1100000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float4 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float2 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RNE ?float6) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTZ ?float8) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 8 24) RTZ ?float7))))
; FINAL ASSERT
(assert (and ?bool11 (or (and ?bool14) ?bool12) ?bool13))
(check-sat)


-- iteration 354 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float5 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTZ ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float6) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float4 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or ?bool12 (and (or (and ?bool11 ?bool15 ?bool11) (and ?bool14 ?bool11)) (or ?bool13 ?bool15)) ?bool12))
(check-sat)


-- iteration 355 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ?float4 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTN ?float5) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float4 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RTP ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 356 --
(declare-fun f0 (Float64 Float16 Float128) Float128)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11100 #b1110100001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float5) ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float5 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float7) ?float5 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 15 113) RTZ ?float4) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3 ?float5 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and (or (or (or ?bool13 ?bool15 ?bool13) ?bool11 ?bool13) (or (or ?bool12 ?bool11 ?bool13)) ?bool11)))
(check-sat)


-- iteration 357 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01011011011 #b1001000110000001011000111101011000110101100110010111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000101000 #b1000000100101101111111110100010100001101100101001001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float6 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 358 --
(declare-fun f0 (Float64 Float128 Float128) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11000010 #b11000110110011110001111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11110100011 #b1001100010011101011101111011110100100011011001010101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTZ ?float5 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool14 (and (or ?bool12 (and ?bool14 ?bool15) ?bool11) ?bool13) (and (and ?bool13 (and ?bool12 ?bool12) (and ?bool13 ?bool14 ?bool12)) ?bool11)))
(check-sat)


-- iteration 359 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10011010 #b00011001101111101011001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float2 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float4) ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (or (or (or (and ?bool14)))))
(check-sat)


-- iteration 360 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RNE ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RNE ?float5) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 15 113) RTP ?float7) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float9) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ?float8)))
; FINAL ASSERT
(assert (or (or (and (and ?bool14 ?bool15 ?bool11)) ?bool15) ?bool14))
(check-sat)


-- iteration 361 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float4 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTN ((_ to_fp 11 53) RTZ ?float3) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ?float7 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (or (or (or (or ?bool14 ?bool13))) ?bool15))
(check-sat)


-- iteration 362 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float2 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ((_ to_fp 8 24) RNE ?float6) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float4)))
; FINAL ASSERT
(assert (and (or ?bool13) (or (or (or ?bool13 ?bool11) (or ?bool12 ?bool12 ?bool11))) (or (or ?bool13 ?bool13) ?bool15 (and (and ?bool13 ?bool11)))))
(check-sat)


-- iteration 363 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b101101010010100 #b0101110101011001011010010001110010000111000100100011010110010011101000101100000000000110000110001110000001111010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or (and ?bool12) (or ?bool12 ?bool15 (or ?bool13)) ?bool12))
(check-sat)


-- iteration 364 --
(declare-fun f0 (Float128 Float16 Float32) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 365 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float5 ?float4 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float6 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float7 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float6) ?float7 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 8 24) RNE ?float5))))
; FINAL ASSERT
(assert (or (or ?bool13 (or ?bool12 (and ?bool11 ?bool13 ?bool14)))))
(check-sat)


-- iteration 366 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b111011101101100 #b0111110000101000100110010111100101001101111010001100110111011100010000111001011111011011011110110100001011010011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ?float4 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float5 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 15 113) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool11) (or ?bool13)))
(check-sat)


-- iteration 367 --
(declare-fun f0 (Float64 Float32 Float16) Float32)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float3 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float5 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ?float4 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float6 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float8) ?float7 ((_ to_fp 5 11) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 11 53) RTN ?float8) ?float5)))
; FINAL ASSERT
(assert (and ?bool13 (or (or ?bool14) ?bool14 ?bool13)))
(check-sat)


-- iteration 368 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 369 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01111011000 #b1100010010111010100110000011001000011101111010111100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float5 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTN ?float2) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and ?bool13 ?bool12))
(check-sat)


-- iteration 370 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ((_ to_fp 8 24) RNE ?float3) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float4 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float3 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RNE ?float2) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float10))))
; FINAL ASSERT
(assert (or ?bool12 ?bool13))
(check-sat)


-- iteration 371 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01110010 #b10011110111100100011010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool12 ?bool11)))
(check-sat)


-- iteration 372 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float7))))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool11 (or (and ?bool11) ?bool14)) (or ?bool12 ?bool12 ?bool12)))
(check-sat)


-- iteration 373 --
(declare-fun f0 (Float32 Float64 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float4) ?float2 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTN ?float3) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float4))))
; FINAL ASSERT
(assert (or ?bool11 (or (and (and ?bool12 ?bool15) (and ?bool15)) ?bool14 (or ?bool13 (or ?bool11)))))
(check-sat)


-- iteration 374 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float6 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float3 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float10) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float9) ?float7 ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (or ?bool13 (or (or (or ?bool13 ?bool15 ?bool15)) (or (and ?bool14) ?bool15) ?bool14)))
(check-sat)


-- iteration 375 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float5 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float6 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or (or (or (or ?bool13 ?bool13) (and ?bool13 ?bool15 ?bool15)) ?bool13 (and ?bool14 ?bool13 (or ?bool15 ?bool13)))))
(check-sat)


-- iteration 376 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01110 #b0001110010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float2 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float3 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ?float5 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float4) ?float5 ?float4)))
; FINAL ASSERT
(assert (and (and (or (and ?bool11) (and ?bool13 ?bool12) ?bool13) (and (or ?bool13)) (or ?bool12 (or ?bool15 ?bool12) ?bool12))))
(check-sat)


-- iteration 377 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float4 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float6) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ?float6 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTP ?float7) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTZ ?float8) ?float4)))
; FINAL ASSERT
(assert (or (or ?bool11) (and ?bool14) ?bool13))
(check-sat)


-- iteration 378 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float3 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RNE ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float6) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RNE ?float8) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or ?bool12 (or (or ?bool14 (or ?bool15 ?bool11 ?bool14)) ?bool11 ?bool13)))
(check-sat)


-- iteration 379 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float3 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float7 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float8) ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float9) ((_ to_fp 11 53) RNE ?float6) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float9)))
; FINAL ASSERT
(assert (or (and ?bool15) ?bool13))
(check-sat)


-- iteration 380 --
(declare-fun f0 (Float16 Float128 Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10111100101 #b1101000001110111000101011000101010101000001010110010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float5) ?float2 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ?float5 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 381 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RNE ?float4) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 8 24) RTZ ?float4) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 5 11) RTZ ?float6))))
; FINAL ASSERT
(assert (or ?bool11 (or (and ?bool15 (and ?bool12 ?bool11) (or ?bool14)) (or ?bool12) ?bool13) (and ?bool14)))
(check-sat)


-- iteration 382 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float4 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 5 11) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (and ?bool12 (or (and (and ?bool12 ?bool12) (or ?bool12 ?bool15) (or ?bool13 ?bool11)) ?bool14)))
(check-sat)


-- iteration 383 --
(declare-fun f0 (Float32 Float128 Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float2 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float8 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTN ?float9) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float10)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 384 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float3 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float4)))
; FINAL ASSERT
(assert (and (or ?bool15 (and ?bool15) (and ?bool12 (or ?bool14) ?bool14)) ?bool14))
(check-sat)


-- iteration 385 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float64 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000100 #b11001011111111000100111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float4 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float6 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (and (or (or ?bool15 ?bool14) ?bool14) (and (and ?bool11 ?bool13) (or ?bool12 ?bool11 ?bool14))) ?bool14 (or ?bool14)))
(check-sat)


-- iteration 386 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 15 113) RTP ?float5) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTN ?float7) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RNE ?float4) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ((_ to_fp 15 113) RTP ?float9))))
; FINAL ASSERT
(assert (or ?bool12 (and ?bool12 (or ?bool15) ?bool11)))
(check-sat)


-- iteration 387 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTP ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 11 53) RTZ ?float4) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float4 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 5 11) RTP ?float5) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and (and ?bool12 (or (and ?bool15 ?bool13 ?bool12) ?bool14)) (and (and ?bool14 ?bool14 (and ?bool12 ?bool12 ?bool11))) (or ?bool15 (or ?bool11 (or ?bool14)) ?bool13)))
(check-sat)


-- iteration 388 --
(declare-fun f0 (Float128 Float128 Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ?float2 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float3 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 8 24) RTZ ?float9) ?float4)))
; FINAL ASSERT
(assert (and (and (and ?bool11)) (or ?bool14 (and ?bool13)) (and ?bool12 ?bool15)))
(check-sat)


-- iteration 389 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float5 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ((_ to_fp 8 24) RTZ ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float9)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 390 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float5) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 15 113) RNE ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RNE ?float4) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (or (or ?bool13 ?bool15 (or ?bool11 ?bool12)) (or (and ?bool12 ?bool13) ?bool11 (or ?bool13)))))
(check-sat)


-- iteration 391 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010100010100100 #b1111101110000001100001110010001101000011100110011000000011100001110101111000011011011010111111011010011110010001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ?float4 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float4 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 8 24) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ?float3 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTN ?float5) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and (or ?bool12) (and ?bool14) ?bool15))
(check-sat)


-- iteration 392 --
(declare-fun f0 (Float16 Float64 Float64) Float16)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float4 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool15)))
(check-sat)


-- iteration 393 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float2 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float8 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 15 113) RNE ?float3) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float4) ?float5 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float6)))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool14 (or (or ?bool15 ?bool12 ?bool14) ?bool14 (and ?bool13 ?bool13)))))
(check-sat)


-- iteration 394 --
(declare-fun f0 (Float16 Float64 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2) ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float4 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTZ ?float9) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and (and (and ?bool11 ?bool15 ?bool13)) (and (and (and ?bool14 ?bool13 ?bool11)) (or ?bool13 ?bool12)) ?bool14))
(check-sat)


-- iteration 395 --
(declare-fun f0 (Float16 Float128 Float32) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ?float7 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 8 24) RTN ?float7))))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool15 ?bool13 ?bool11) (and ?bool13 ?bool11 (and ?bool12 ?bool15 (and ?bool12 ?bool14)))))
(check-sat)


-- iteration 396 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float3 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (or (and ?bool14 (or (and ?bool13) ?bool12)) ?bool11))
(check-sat)


-- iteration 397 --
(declare-fun f0 (Float128 Float64 Float32) Float64)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ((_ to_fp 8 24) RTP ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float6 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 11 53) RTN ?float2) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ((_ to_fp 15 113) RTP ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 398 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 11 53) RNE ?float2))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 399 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ?float3 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 8 24) RNE ?float7) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool15 (and ?bool11 (or ?bool12 ?bool13)) (and (or ?bool15))) (or ?bool14)))
(check-sat)


-- iteration 400 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010111000101000 #b0001100101100100101110100101001100100100001010110011010000111101110010111011110100101001000100111010000001011001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 15 113) RTZ ?float4) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ((_ to_fp 11 53) RNE ?float5) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float7 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ((_ to_fp 5 11) RTN ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (or (or ?bool11) (or ?bool12 ?bool13 (and ?bool11 ?bool13))) ?bool15))
(check-sat)


-- iteration 401 --
(declare-fun f0 (Float64 Float32 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 8 24) RNE ?float3) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTP ?float3) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float4 ((_ to_fp 8 24) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 11 53) RTZ ?float2) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and (and ?bool12) (or (or ?bool14) (and ?bool14 ?bool12 ?bool13))))
(check-sat)


-- iteration 402 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11001010 #b01010011101111101011000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTP ?float5) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTZ ?float10) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float10))))
; FINAL ASSERT
(assert (or (or ?bool14 (and (or ?bool12) ?bool13) ?bool12) (and (and ?bool11 ?bool13 ?bool15)) (or (or (and ?bool13) (and ?bool11 ?bool13 ?bool11)))))
(check-sat)


-- iteration 403 --
(declare-fun f0 (Float64 Float128 Float128) Float32)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float6 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float5) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 15 113) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ?float5 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float7 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RTP ?float8))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 404 --
(declare-fun f0 (Float16 Float128 Float64) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float3 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTP ?float3) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool12 (and (and ?bool13) (or ?bool15))))
(check-sat)


-- iteration 405 --
(declare-fun f0 (Float64 Float32 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11110 #b1101001010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float4) ?float2 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float2 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float7) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float3 ?float2 ((_ to_fp 15 113) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float10))))
; FINAL ASSERT
(assert (and (and (and ?bool11 (or ?bool14)) ?bool15) (or (and (and ?bool13 ?bool12)) ?bool11) ?bool15))
(check-sat)


-- iteration 406 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float7 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float7 ((_ to_fp 15 113) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 5 11) RTP ?float10) ?float2)))
; FINAL ASSERT
(assert (and (and (and (or ?bool12 ?bool12 ?bool14) (and ?bool13 ?bool14 ?bool14)))))
(check-sat)


-- iteration 407 --
(declare-fun f0 (Float32 Float64 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float3 ?float4 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 11 53) RTP ?float8) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTN ?float2) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ?float7)))
; FINAL ASSERT
(assert (and ?bool12 (or (and (or ?bool12) ?bool13 (and ?bool15)) ?bool14) (or ?bool15)))
(check-sat)


-- iteration 408 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00011 #b0110001100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ((_ to_fp 5 11) RTN ?float2) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float6 ((_ to_fp 11 53) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ((_ to_fp 5 11) RTZ ?float2))))
; FINAL ASSERT
(assert (and ?bool15 ?bool12))
(check-sat)


-- iteration 409 --
(declare-fun f0 (Float16 Float32 Float64) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float5) ?float6 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTZ ?float5) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float6) ?float6 ((_ to_fp 11 53) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RNE ?float10) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool14 ?bool14) (or ?bool15 (or (or ?bool13 ?bool15 ?bool15)) (and ?bool13 (or ?bool15))) ?bool15))
(check-sat)


-- iteration 410 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100010111000110 #b1110010000111110010010110101110010110110010100001010101010111000010100100111011110000010010111110100001110000101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float6 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float10) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool11) (and ?bool15 (and (and ?bool13)) ?bool12) ?bool15))
(check-sat)


-- iteration 411 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float5 ((_ to_fp 11 53) RTN ?float6))))
; FINAL ASSERT
(assert (or (and (and ?bool15 (and ?bool15 ?bool15) ?bool11) (or ?bool14 ?bool11) (or (and ?bool11 ?bool12) ?bool12)) (or ?bool12) (and (and (or ?bool15) (or ?bool13 ?bool15 ?bool15)))))
(check-sat)


-- iteration 412 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11101 #b1011111000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11100 #b0011111111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float4 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float7)))
; FINAL ASSERT
(assert (and ?bool15 ?bool13 ?bool12))
(check-sat)


-- iteration 413 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10011 #b1001001000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 5 11) RTP ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float2) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float5 ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RNE ?float10) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ((_ to_fp 8 24) RTN ?float2))))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 414 --
(declare-fun f0 (Float128 Float64 Float64) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float5 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 15 113) RNE ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float7 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float10) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and (or (or ?bool12 (or ?bool15 ?bool11 ?bool11))) ?bool15 (or (or (and ?bool13) (or ?bool13) (and ?bool15 ?bool15)))))
(check-sat)


-- iteration 415 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float3 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float6 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (or (or ?bool12 (and ?bool13 (and ?bool12) ?bool11)) ?bool11))
(check-sat)


-- iteration 416 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101110001100111 #b0000111011111010011100000000010000101100110010011001010010101001111011010011101001101111110111110100101011001111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ((_ to_fp 5 11) RTZ ?float3) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float2) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float2) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and (or ?bool12 (and ?bool15 ?bool12 ?bool12)) (or ?bool13 (or (or ?bool11)) ?bool14) (and ?bool14 ?bool15)))
(check-sat)


-- iteration 417 --
(declare-fun f0 (Float32 Float64 Float128) Float64)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b111101100111011 #b1011010110000011110001110110100001110001000011010010001011100100000001001010011101001100100001110010111001011100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 5 11) RNE ?float3) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float5) ?float7 ((_ to_fp 15 113) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTZ ?float7) ?float6)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14))
(check-sat)


-- iteration 418 --
(declare-fun f0 (Float64 Float32 Float16) Float32)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float5 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ((_ to_fp 15 113) RNE ?float5) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float7 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 11 53) RTZ ?float10) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (or (or ?bool11)))
(check-sat)


-- iteration 419 --
(declare-fun f0 (Float64 Float32 Float128) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float6 ((_ to_fp 15 113) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float9) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTP ?float10) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RNE ?float10) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float3) ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12 (or (and ?bool12) (and ?bool13 ?bool12)) ?bool11) (or ?bool15 (and ?bool12 (or ?bool12 ?bool13) ?bool11))))
(check-sat)


-- iteration 420 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float5 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 5 11) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float5) ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ((_ to_fp 8 24) RTZ ?float7))))
; FINAL ASSERT
(assert (or ?bool11 ?bool13 (and ?bool11 (and ?bool15))))
(check-sat)


-- iteration 421 --
(declare-fun f0 (Float16 Float128 Float128) Float128)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 15 113) RTP ?float5) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float3 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RTP ?float5) ?float9)))
; FINAL ASSERT
(assert (and (or (or (and ?bool14 ?bool11 ?bool15)) (and (or ?bool12) (and ?bool13 ?bool13 ?bool12) (and ?bool15)) (or ?bool15))))
(check-sat)


-- iteration 422 --
(declare-fun f0 (Float128 Float64 Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011011101011000 #b0111110011011011010000000000010100010011100000011100001011110010000010000110000100010111000010000100100000110001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ?float2 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 11 53) RTZ ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RNE ?float4) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool11) (or ?bool13) (and ?bool14)))
(check-sat)


-- iteration 423 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10010010 #b10011010010010101011111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float5 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTZ ?float4) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTN ?float3) ?float8)))
; FINAL ASSERT
(assert (or (and (or ?bool12 (or ?bool13 ?bool13)) (and (and ?bool13) ?bool11)) (or (and ?bool14 (and ?bool12))) (and ?bool13)))
(check-sat)


-- iteration 424 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float7 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 15 113) RTZ ?float5) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float9 ((_ to_fp 5 11) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTN ?float4) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool13) ?bool15))
(check-sat)


-- iteration 425 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0001000010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTN ?float7) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (and (and (or ?bool11 ?bool15) ?bool11)))
(check-sat)


-- iteration 426 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float6) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ((_ to_fp 5 11) RTZ ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTZ ?float4 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 5 11) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float9)))
; FINAL ASSERT
(assert (or (and (and (or ?bool13 ?bool11))) ?bool15))
(check-sat)


-- iteration 427 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b001001010001100 #b1000001010101011110100100011110001011011110010100100010111001100110011001000110111111111000101110011011010011010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTN ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float3 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float2 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float8)))
; FINAL ASSERT
(assert (or (or (or (or ?bool14 ?bool13 ?bool11) (and ?bool13 ?bool14) ?bool12) (and (or ?bool12 ?bool12)) (and ?bool12))))
(check-sat)


-- iteration 428 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTZ ?float3) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ((_ to_fp 8 24) RTZ ?float7) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ((_ to_fp 11 53) RTZ ?float9) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float8) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RTN ?float7) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or ?bool12 ?bool11 (and ?bool13 ?bool14)))
(check-sat)


-- iteration 429 --
(declare-fun f0 (Float64 Float16 Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float3 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RNE ?float8) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTZ ?float8) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 430 --
(declare-fun f0 (Float64 Float64 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 11 53) RTN ?float6) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 11 53) RTP ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool12)))
(check-sat)


-- iteration 431 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000111100010111 #b0111010110001101011110100110000000001100110011001110100110010101100100001100111101001010011011000001100101000010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01101110101 #b0011011100110010000001000110001010001111100111001001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float7 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ((_ to_fp 11 53) RTN ?float6))))
; FINAL ASSERT
(assert (or (or ?bool11 (and (and ?bool13) ?bool11 (or ?bool11)) (or ?bool15 (or ?bool14) ?bool11)) (and ?bool14 (or ?bool14)) ?bool12))
(check-sat)


-- iteration 432 --
(declare-fun f0 (Float64 Float128 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float6 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float3) ?float2 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float9 ((_ to_fp 11 53) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTP ?float3) ?float6)))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool14) ?bool11 (or ?bool15)))
(check-sat)


-- iteration 433 --
(declare-fun f0 (Float16 Float16 Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float2 ((_ to_fp 11 53) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float10)))
; FINAL ASSERT
(assert (and (and ?bool14)))
(check-sat)


-- iteration 434 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float64 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11001 #b0110100100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTP ((_ to_fp 11 53) RNE ?float6) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float4 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTP ?float2) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 8 24) RTZ ?float5))))
; FINAL ASSERT
(assert (and ?bool15 ?bool15))
(check-sat)


-- iteration 435 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ((_ to_fp 11 53) RTP ?float2) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool12 (or (and ?bool14) ?bool14 ?bool15))))
(check-sat)


-- iteration 436 --
(declare-fun f0 (Float128 Float16 Float64) Float64)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float2 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float4 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float7 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTN ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float4) ?float9 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or (and ?bool14) (and (and (and ?bool14 ?bool14 ?bool14) (or ?bool14 ?bool15 ?bool15) (or ?bool12 ?bool14)) (or (or ?bool15 ?bool12))) (and (or ?bool14 (or ?bool15 ?bool14 ?bool13)) ?bool13 ?bool13)))
(check-sat)


-- iteration 437 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10010111001 #b0001010101001111111010100110101001100001111010100110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RTZ ?float7) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or (and (or ?bool11 ?bool15 (and ?bool15 ?bool12 ?bool12))) ?bool12))
(check-sat)


-- iteration 438 --
(declare-fun f0 (Float64 Float16 Float16) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b010011101010100 #b1100100101010010001110111011110010110101000011110010111101000101000111010001100010011101010001010111111010101100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float2 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTZ ?float6) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float7) ?float4)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool15 ?bool11 ?bool11) ?bool12))
(check-sat)


-- iteration 439 --
(declare-fun f0 (Float16 Float64 Float16) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 11 53) RTP ?float2) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float3 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 5 11) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ?float7)))
; FINAL ASSERT
(assert (or (and (or ?bool14 ?bool13 ?bool14) ?bool14)))
(check-sat)


-- iteration 440 --
(declare-fun f0 (Float64 Float32 Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 8 24) RTP ?float3) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float9 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (or (and ?bool13) (and (or ?bool11 ?bool12 (or ?bool12)) ?bool13)))
(check-sat)


-- iteration 441 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110110010011000 #b1100000010001100101110010000101010001111000111100111011000011001011100011110110100000110110110111110100001000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ((_ to_fp 15 113) RTN ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RTN ?float4) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (or (or (or (or ?bool13 ?bool13) ?bool13 ?bool12) (and (and ?bool11 ?bool15 ?bool15)) ?bool11)))
(check-sat)


-- iteration 442 --
(declare-fun f0 (Float64 Float16 Float128) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01100011 #b01000010000011101110000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float4 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 11 53) RNE ?float10))))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool15 ?bool14) ?bool11 ?bool15))
(check-sat)


-- iteration 443 --
(declare-fun f0 (Float128 Float32 Float32) Float16)
(declare-fun p0 (Float64 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000001000100011 #b1000111100110011100000100111001001101001111100101010100011000110111010111010110111111101000010110001100101010011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float7 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float4 ((_ to_fp 8 24) RNE ?float9) ((_ to_fp 8 24) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float10) ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ((_ to_fp 15 113) RTN ?float2))))
; FINAL ASSERT
(assert (or (and (or ?bool14 ?bool14) ?bool11) (and ?bool12) (or ?bool11 (and ?bool11 (or ?bool13 ?bool12 ?bool13) ?bool13) ?bool14)))
(check-sat)


-- iteration 444 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RTN ?float5) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 445 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11000110101 #b1010111011001101110010001110101111010001011010000110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float6 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float6 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool12 (and ?bool11) ?bool15))
(check-sat)


-- iteration 446 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTN ?float2) ?float9)))
; FINAL ASSERT
(assert (and (and (and ?bool15 (or ?bool12 ?bool13 ?bool11)) ?bool15 (or ?bool15 (or ?bool13 ?bool12 ?bool13) (and ?bool13))) (and (or (and ?bool13) (and ?bool12 ?bool14 ?bool14) ?bool12) (or ?bool14 (or ?bool13 ?bool11)) ?bool15) (and ?bool12 ?bool14 (and ?bool12))))
(check-sat)


-- iteration 447 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10111 #b1100011110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTZ ?float6) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or (or ?bool15) ?bool14))
(check-sat)


-- iteration 448 --
(declare-fun f0 (Float16 Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11011011 #b00100110100010000101101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ?float6 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float9 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ((_ to_fp 8 24) RNE ?float3))))
; FINAL ASSERT
(assert (and ?bool11 ?bool12))
(check-sat)


-- iteration 449 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float3 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ?float10)))
; FINAL ASSERT
(assert (and (or (and (and ?bool13 ?bool15 ?bool15) ?bool15 (or ?bool13)) (and (or ?bool14 ?bool11) (and ?bool14 ?bool11 ?bool13))) (and (and ?bool13 ?bool12 (and ?bool14 ?bool15)))))
(check-sat)


-- iteration 450 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 11 53) RNE ?float4) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool14) (and (or (and ?bool12 ?bool13) ?bool12 (and ?bool15)) ?bool15)))
(check-sat)


-- iteration 451 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b010010101111110 #b0000101100011101010111001011111111010001001100110111010010000010001101001001100100101010000011110111100000101011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float2 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float8 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTN ?float6) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float8)))
; FINAL ASSERT
(assert (or (and (or (and ?bool13)) (and (or ?bool12) (and ?bool14 ?bool13) ?bool15) (or ?bool11 ?bool14 ?bool15))))
(check-sat)


-- iteration 452 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b111010110101111 #b0100000011010001100011000100111010000110110011011101011000111001100011011001000100000010011010011110111100101011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10001100 #b01000011010111000001111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RNE ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14 ?bool11))
(check-sat)


-- iteration 453 --
(declare-fun f0 (Float128 Float16 Float128) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ((_ to_fp 15 113) RTN ?float7) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ((_ to_fp 11 53) RNE ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTN ?float7) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTN ?float5) ?float10)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13 ?bool12))
(check-sat)


-- iteration 454 --
(declare-fun f0 (Float32 Float16 Float64) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTN ?float5) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTP ?float2) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float9)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool13)))
(check-sat)


-- iteration 455 --
(declare-fun f0 (Float16 Float64 Float32) Float64)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ?float4 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool12 (and ?bool11 ?bool15)))
(check-sat)


-- iteration 456 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float6 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float2 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RTN ?float5))))
; FINAL ASSERT
(assert (and (or (and (or ?bool14 ?bool13) ?bool14 (and ?bool15 ?bool14))) (and ?bool11 ?bool11 (or ?bool14 ?bool12 (or ?bool13 ?bool15 ?bool11))) ?bool14))
(check-sat)


-- iteration 457 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ((_ to_fp 8 24) RNE ?float3) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ?float7 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and (or ?bool11 (or (and ?bool13) (and ?bool14 ?bool12 ?bool12))) ?bool15 (and ?bool11)))
(check-sat)


-- iteration 458 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10101110000 #b1111100111101010000001111011000111110110010110001000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float9 ((_ to_fp 8 24) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ((_ to_fp 11 53) RTN ?float10))))
; FINAL ASSERT
(assert (and ?bool13 (and (or ?bool15) ?bool14)))
(check-sat)


-- iteration 459 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or (and ?bool11 (or (or ?bool11 ?bool15 ?bool13)) ?bool14) (and (or (and ?bool15 ?bool12 ?bool15) (or ?bool13 ?bool11))) ?bool12))
(check-sat)


-- iteration 460 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RTN ?float6) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTN ?float3) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool15 ?bool12 (or (and (and ?bool11 ?bool12 ?bool15)) ?bool11)))
(check-sat)


-- iteration 461 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float7) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RTZ ?float5) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (or (and (and (or ?bool13 ?bool11) (or ?bool15)))))
(check-sat)


-- iteration 462 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RNE ?float4) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (or (or (and (or ?bool12) (and ?bool11 ?bool13)) ?bool14 (or ?bool11)) ?bool14 ?bool13))
(check-sat)


-- iteration 463 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTP ?float5) ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (or (and (and ?bool15) ?bool15) (or (or ?bool15 ?bool12 ?bool14)))))
(check-sat)


-- iteration 464 --
(declare-fun f0 (Float16 Float16 Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01010111011 #b1010001000000001101110110100100110111000101111111001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float7 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ((_ to_fp 11 53) RTN ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (and (or (and ?bool12 ?bool13) (and ?bool12 ?bool13 ?bool13)))))
(check-sat)


-- iteration 465 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ?float6 ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float2))))
; FINAL ASSERT
(assert (and (or ?bool14 (or ?bool11 ?bool11)) (or ?bool12 (or (or ?bool12 ?bool12 ?bool13) (and ?bool14)))))
(check-sat)


-- iteration 466 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float4 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTP ?float9) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or (or ?bool15 (or (and ?bool15 ?bool11) (or ?bool11) (and ?bool13 ?bool14 ?bool12))) (and ?bool15)))
(check-sat)


-- iteration 467 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 8 24) RTN ?float4) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float2 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ?float6 ((_ to_fp 15 113) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTZ ?float5) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ((_ to_fp 15 113) RTP ?float4))))
; FINAL ASSERT
(assert (or (and (and (and ?bool12 ?bool14) (and ?bool11 ?bool12 ?bool12) (and ?bool14)) (and ?bool11 ?bool12 ?bool11)) ?bool15))
(check-sat)


-- iteration 468 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float5 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 11 53) RTZ ?float8) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float4))))
; FINAL ASSERT
(assert (and ?bool11 ?bool13 ?bool15))
(check-sat)


-- iteration 469 --
(declare-fun f0 (Float64 Float128 Float16) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10001 #b0111010010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float4 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTZ ?float4 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 5 11) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RNE ?float7) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float6)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 470 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10101110 #b10000001001000001101101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float6 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RTP ?float4) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ?float10)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 ?bool12))
(check-sat)


-- iteration 471 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float2 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float4) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float6)))
; FINAL ASSERT
(assert (or (and (and (and ?bool13 ?bool13 ?bool14)) ?bool11 ?bool11) (or (and (or ?bool13 ?bool15 ?bool12) ?bool12) (and ?bool12 ?bool14) (and ?bool15))))
(check-sat)


-- iteration 472 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float5 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float6 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float9) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 5 11) RTP ?float7) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool15)))
(check-sat)


-- iteration 473 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 11 53) RTN ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and (and (or ?bool15 ?bool15) ?bool14) ?bool14))
(check-sat)


-- iteration 474 --
(declare-fun f0 (Float16 Float16 Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float3 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTP ?float3 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and ?bool15 (or (or ?bool11 ?bool14) (and ?bool14 (or ?bool13 ?bool11)))))
(check-sat)


-- iteration 475 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RNE ?float8 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float4 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 476 --
(declare-fun f0 (Float64 Float32 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00111101000 #b1011111100011101111000110001011100001010101111011010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ?float7 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float3 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or (or (or (or ?bool13 ?bool14 ?bool13) (and ?bool13 ?bool15)) ?bool13 (and ?bool14 (or ?bool14)))))
(check-sat)


-- iteration 477 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTN ?float9) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 478 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00110111001 #b0011100000001110101000000101001011010111100101111111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ?float4 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float3 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float4 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float4 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool12 (or ?bool11 ?bool12 (or ?bool15))) ?bool11))
(check-sat)


-- iteration 479 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11010110 #b00101001010101100101011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ((_ to_fp 15 113) RNE ?float2) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float6 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (and (and (or ?bool14 ?bool12))))
(check-sat)


-- iteration 480 --
(declare-fun f0 (Float32 Float16 Float32) Float64)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00010000 #b10110111001001011111011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float7 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float8 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float9 ((_ to_fp 5 11) RTP ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and (or ?bool12)))
(check-sat)


-- iteration 481 --
(declare-fun f0 (Float64 Float32 Float128) Float64)
(declare-fun p0 (Float64 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float6 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float10) ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RNE ?float2))))
; FINAL ASSERT
(assert (and (and ?bool14) (and (and (and ?bool15)) ?bool12) (or ?bool11 ?bool12)))
(check-sat)


-- iteration 482 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float3 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float8)))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool13)))
(check-sat)


-- iteration 483 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ((_ to_fp 8 24) RTN ?float3) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ?float10)))
; FINAL ASSERT
(assert (or ?bool13 (and (and (and ?bool11 ?bool12 ?bool13)) ?bool13 (or (or ?bool14 ?bool11 ?bool14))) (and ?bool11 ?bool13 (or ?bool11))))
(check-sat)


-- iteration 484 --
(declare-fun f0 (Float64 Float128 Float32) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011000110000010 #b0011100010010110110000011110000001110101100001010101000110000000001101001011101100111110110100110100100101010000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01010100101 #b1100111100010011101111000000001011001111001010101001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RTP ?float10) ?float4)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool13)))
(check-sat)


-- iteration 485 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b10110 #b0001101010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RNE ?float4) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 15 113) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RTP ?float6) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float3)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool14 (and (and ?bool14 ?bool14) (and ?bool11) (or ?bool13)))))
(check-sat)


-- iteration 486 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float4 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float4 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ?float4 ((_ to_fp 11 53) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 8 24) RTN ?float8) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or ?bool11 ?bool12 ?bool12))
(check-sat)


-- iteration 487 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00110 #b1111000101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float6 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float5 ((_ to_fp 5 11) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 5 11) RTZ ?float3) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (or ?bool13 (and (or ?bool12 (or ?bool12 ?bool13 ?bool12)))))
(check-sat)


-- iteration 488 --
(declare-fun f0 (Float64 Float128 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float2) ?float6 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ?float5 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTZ ?float7) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 489 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11110010 #b01010000000110011101000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11110 #b0011101111)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 8 24) RTN ?float5) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8 ((_ to_fp 5 11) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float7) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 8 24) RTZ ?float5) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 490 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float6 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float2 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 11 53) RNE ?float5) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (and ?bool15 (and (and (or ?bool11)) ?bool13 ?bool12)))
(check-sat)


-- iteration 491 --
(declare-fun f0 (Float32 Float64 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTN ?float6) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool13 ?bool12) (and ?bool15 ?bool13)))
(check-sat)


-- iteration 492 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float6 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float3 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float5 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float7 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13 (or ?bool13)))
(check-sat)


-- iteration 493 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float4 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RTZ ?float7) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float2)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 494 --
(declare-fun f0 (Float128 Float32 Float32) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b1011111101101011011011000001110100100100011101011110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01101101 #b11001100110010010010011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RNE ?float3) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 5 11) RTZ ?float2) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float5) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RTN ?float6) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 11 53) RTP ?float8))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 495 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float2 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float6 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 11 53) RNE ?float8) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14 (and (and ?bool12 ?bool15 ?bool13) ?bool12 (and (and ?bool11 ?bool12) (or ?bool14) (or ?bool12 ?bool15)))))
(check-sat)


-- iteration 496 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ((_ to_fp 8 24) RTP ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RNE ?float5) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ((_ to_fp 8 24) RTN ?float5))))
; FINAL ASSERT
(assert (or (and (or ?bool11) ?bool11) (or ?bool11)))
(check-sat)


-- iteration 497 --
(declare-fun f0 (Float64 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01100010111 #b0010100010100001011011100101001111011100010101001001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float2 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float5 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8 ((_ to_fp 15 113) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 498 --
(declare-fun f0 (Float32 Float16 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float3 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float8)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool11 ?bool15 (and (or ?bool14 ?bool12))) (and (or (and ?bool12 ?bool14) ?bool11) (and (and ?bool15 ?bool14 ?bool15) ?bool13))))
(check-sat)


-- iteration 499 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float2 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float5 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float7 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float10) ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool11 ?bool15) ?bool13 ?bool13))
(check-sat)


-- iteration 500 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float6 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ?float6 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool15 ?bool11 (or (and (and ?bool13 ?bool11 ?bool14) (or ?bool11 ?bool11 ?bool14)) (or (or ?bool11 ?bool14 ?bool11) (or ?bool15 ?bool12 ?bool11) (or ?bool14 ?bool11 ?bool11)) ?bool13)))
(check-sat)


-- iteration 501 --
(declare-fun f0 (Float16 Float64 Float32) Float16)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float5 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float6 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float2) ?float3 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float8) ?float3 ((_ to_fp 8 24) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float2) ?float8 ((_ to_fp 8 24) RTP ?float10))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 502 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00001101100 #b0001010100011110100011011010111001011111100111100001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float7) ?float10 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 503 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11110 #b1010100010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float2) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ((_ to_fp 11 53) RTZ ?float5) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float7 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float2))))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool12)))
(check-sat)


-- iteration 504 --
(declare-fun f0 (Float128 Float128 Float128) Float128)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 15 113) RNE ?float6) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTZ ?float2) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14))
(check-sat)


-- iteration 505 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float6 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float4 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 5 11) RNE ?float5) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14))
(check-sat)


-- iteration 506 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 8 24) RNE ?float2) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTP ?float2) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or ?bool12 ?bool12 (or ?bool13)))
(check-sat)


-- iteration 507 --
(declare-fun f0 (Float128 Float32 Float64) Float128)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float2) ?float4 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float4 ((_ to_fp 8 24) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float7 ?float5)))
; FINAL ASSERT
(assert (and (or (or ?bool13 (or ?bool14 ?bool14 ?bool12) (or ?bool12 ?bool13)) ?bool12 (or (or ?bool12 ?bool14))) (or (or (and ?bool15 ?bool15 ?bool15)))))
(check-sat)


-- iteration 508 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01010 #b0101100111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float3 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float6 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float4 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 11 53) RTZ ?float6))))
; FINAL ASSERT
(assert (or ?bool14 (and (or (and ?bool12 ?bool13) (or ?bool12 ?bool12 ?bool13)) (or (or ?bool15 ?bool14) ?bool15) ?bool13)))
(check-sat)


-- iteration 509 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float2 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RTN ?float6) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTN ?float8) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 8 24) RNE ?float3) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ((_ to_fp 8 24) RNE ?float5))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 510 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b100100110010010 #b1010100000110010010110011100100000111110000010010100011101001010100111101100111011000100001001100111100100101110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00110 #b0111000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ((_ to_fp 15 113) RTP ?float6) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ?float8 ((_ to_fp 15 113) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 11 53) RTZ ?float8))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 511 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RNE ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float6 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 15 113) RTN ?float10) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTZ ?float10))))
; FINAL ASSERT
(assert (and ?bool15 ?bool13))
(check-sat)


-- iteration 512 --
(declare-fun f0 (Float16 Float32 Float64) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ((_ to_fp 15 113) RTP ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float3 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float4 ((_ to_fp 15 113) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float10) ?float5)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 513 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float3 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ((_ to_fp 5 11) RNE ?float5) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ?float3 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTN ?float8) ?float2)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 514 --
(declare-fun f0 (Float128 Float128 Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10101010110 #b0100110110111100000001001111110011110011001101101010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 5 11) RTZ ?float3) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ((_ to_fp 5 11) RTN ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 515 --
(declare-fun f0 (Float32 Float16 Float32) Float16)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float5) ?float5 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or (or ?bool13 (and ?bool13) (and ?bool13)) ?bool11 (and (or ?bool15) ?bool14 ?bool12)))
(check-sat)


-- iteration 516 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float2) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 (and (or (and ?bool15 ?bool11) (or ?bool13)) ?bool12)))
(check-sat)


-- iteration 517 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 11 53) RTZ ?float3) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RNE ?float8) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTZ ?float7) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ((_ to_fp 11 53) RTN ?float9))))
; FINAL ASSERT
(assert (or (and ?bool13 (and (or ?bool12 ?bool15) ?bool14) ?bool13)))
(check-sat)


-- iteration 518 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 15 113) RTN ?float8) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTZ ?float3) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTZ ?float8) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and (and (or (or ?bool15 ?bool14 ?bool13))) ?bool15 (and ?bool15 (and (and ?bool13 ?bool13) (and ?bool11 ?bool15) (or ?bool13)))))
(check-sat)


-- iteration 519 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00100111 #b00100011011100101001110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float3 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ((_ to_fp 8 24) RNE ?float7) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ?float7 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTN ?float8) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (and (and ?bool15) ?bool11 ?bool11)))
(check-sat)


-- iteration 520 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ?float5 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float2) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float7 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float6 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float7) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool13 ?bool13) (or ?bool12)))
(check-sat)


-- iteration 521 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ?float5 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float3 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ?float2 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float4 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12 (and (or ?bool11) (or ?bool12 ?bool13 ?bool15)) ?bool14) ?bool11 (and ?bool13 ?bool13 (and (and ?bool13 ?bool12 ?bool15)))))
(check-sat)


-- iteration 522 --
(declare-fun f0 (Float64 Float64 Float16) Float32)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float4 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float5 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RTZ ?float9) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 523 --
(declare-fun f0 (Float32 Float16 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110110001101110 #b0101101110011111001000110000011010001001111011000101111110110010011001101101110100000001101100100011100011011110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ?float7 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ?float4 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8)))
; FINAL ASSERT
(assert (and ?bool14 (and ?bool12 ?bool14 (and ?bool15)) (or (or ?bool12 (or ?bool14 ?bool13 ?bool12)) ?bool15 ?bool12)))
(check-sat)


-- iteration 524 --
(declare-fun f0 (Float64 Float64 Float64) Float16)
(declare-fun p0 (Float16 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 15 113) RTP ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RTP ?float6) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool15 (and ?bool15 ?bool15))))
(check-sat)


-- iteration 525 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RTN ?float5) ?float2)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14))
(check-sat)


-- iteration 526 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ((_ to_fp 11 53) RTN ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and (and (and ?bool12 (or ?bool11 ?bool14 ?bool14) ?bool12) (and ?bool13 ?bool11 (or ?bool14))) (or (and ?bool11 ?bool12) (or (and ?bool12 ?bool14 ?bool13)))))
(check-sat)


-- iteration 527 --
(declare-fun f0 (Float16 Float64 Float64) Float32)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100100101010000 #b1001000100101011111001100110101100011011111111000010000100101001010101001111110100000011101100100100100110100001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 11 53) RTZ ?float4) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTN ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float4) ?float3 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (or (or ?bool12)))
(check-sat)


-- iteration 528 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float6 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float4 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float4 ((_ to_fp 11 53) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float8)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 529 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 11 53) RTZ ?float6) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RNE ?float7) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float4 ((_ to_fp 5 11) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RTP ?float7) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or (or ?bool12) (or (and ?bool15 ?bool11 ?bool11) ?bool14)))
(check-sat)


-- iteration 530 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10010111001 #b0101010110011011110011011101011110101001101110000011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01100110 #b11010000111101111100001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float4 ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RNE ?float3) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTP ?float4) ?float6)))
; FINAL ASSERT
(assert (and (and (or ?bool12 (and ?bool14)) (and ?bool14 ?bool14 ?bool14) (and ?bool12)) ?bool13))
(check-sat)


-- iteration 531 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ((_ to_fp 5 11) RTZ ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (or ?bool13 ?bool13 ?bool12))
(check-sat)


-- iteration 532 --
(declare-fun f0 (Float32 Float16 Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 11 53) RTZ ?float4) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RNE ?float9) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float8)))
; FINAL ASSERT
(assert (or ?bool11 ?bool13 ?bool13))
(check-sat)


-- iteration 533 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTN ?float3 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float8) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RTN ?float5) ?float4)))
; FINAL ASSERT
(assert (and (or (and (and ?bool13 ?bool14) ?bool11)) (and ?bool15 ?bool11)))
(check-sat)


-- iteration 534 --
(declare-fun f0 (Float32 Float64 Float16) Float64)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01010101111 #b0111101101000011010111010100010011101111001000011110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10010000 #b01110110101001100010011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float4 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float6) ?float6 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 8 24) RTN ?float6) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 8 24) RTP ?float6) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 535 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00100010101 #b1011010111111100001101000111010101110101100011100000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float4 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 11 53) RNE ?float7) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float3 ((_ to_fp 5 11) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 11 53) RTN ?float3))))
; FINAL ASSERT
(assert (and ?bool14 (and (and (and ?bool12 ?bool12)) (or (or ?bool14 ?bool14) ?bool13 ?bool14) (and (or ?bool15) (or ?bool11 ?bool14) (or ?bool11 ?bool12 ?bool15)))))
(check-sat)


-- iteration 536 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float4 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float6 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float7) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 8 24) RTN ?float6))))
; FINAL ASSERT
(assert (and (or ?bool12 (or (and ?bool11) ?bool11 (and ?bool11 ?bool13)) (or ?bool14 (and ?bool12))) ?bool12 ?bool13))
(check-sat)


-- iteration 537 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10001100 #b00111101110100011011101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float3 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ?float3 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RTN ?float6) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float7 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 538 --
(declare-fun f0 (Float32 Float64 Float128) Float16)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01101011 #b11110111000000000011110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTZ ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float4 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float4 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float10) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (and ?bool15 (and ?bool11))))
(check-sat)


-- iteration 539 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5 ?float10 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or (and (and ?bool14 (or ?bool11) (or ?bool15 ?bool13))) ?bool13))
(check-sat)


-- iteration 540 --
(declare-fun f0 (Float64 Float16 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11110011001 #b1001110100100111000011010101000111110001000010001100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 5 11) RTZ ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8))))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool15)))
(check-sat)


-- iteration 541 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10111000 #b01111110111101101100010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTN ?float5 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 15 113) RNE ?float2) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTZ ?float7))))
; FINAL ASSERT
(assert (or (or ?bool15 (and (and ?bool12 ?bool14) (or ?bool13 ?bool14 ?bool12) (or ?bool15 ?bool13)) ?bool14) (or ?bool14 ?bool11 (or (and ?bool14))) ?bool11))
(check-sat)


-- iteration 542 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01001110 #b01000110001111101010000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4 ?float5 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ?float7 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float9 ?float3 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 543 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b11000 #b1110111001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and ?bool12 ?bool12))
(check-sat)


-- iteration 544 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01000 #b1110011101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float4 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTN ?float8) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and ?bool14 (and (or ?bool15) ?bool14) (or ?bool13)))
(check-sat)


-- iteration 545 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTP ?float2) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ((_ to_fp 11 53) RNE ?float8))))
; FINAL ASSERT
(assert (and (or ?bool13 (and ?bool15 (and ?bool11) (or ?bool11)) ?bool14) ?bool14))
(check-sat)


-- iteration 546 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01111010100 #b0011011111101000101010010011111111100100101101010110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float4 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or (or (and (or ?bool11) (and ?bool12 ?bool12) ?bool12)) ?bool12 (or (and ?bool12 ?bool13) ?bool14)))
(check-sat)


-- iteration 547 --
(declare-fun f0 (Float16 Float16 Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ?float4 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool12 (or ?bool14 (and ?bool14 ?bool11)) ?bool12)))
(check-sat)


-- iteration 548 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001100100001111 #b1111111110011100101111011000101010011000100100001100111101110000010011000100011011110110000000000000110110000111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float6 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ?float3 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RTP ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and ?bool15 ?bool13))
(check-sat)


-- iteration 549 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00100110111 #b0111110011101100101000010100000011100011111011110101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00110 #b0001011000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ?float6 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTN ?float8) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13))
(check-sat)


-- iteration 550 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float2 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RNE ?float2) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 15 113) RTP ?float4) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 551 --
(declare-fun f0 (Float16 Float32 Float32) Float128)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10110111 #b10111101010111101010110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 8 24) RTN ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ?float8 ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RNE ?float3) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ((_ to_fp 11 53) RNE ?float6))))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 552 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float3 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float6 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 11 53) RTN ?float2) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14 (or ?bool15 ?bool13)))
(check-sat)


-- iteration 553 --
(declare-fun f0 (Float32 Float32 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and (or ?bool14) ?bool15 (or (and (and ?bool14 ?bool12 ?bool11)) ?bool15 ?bool13)))
(check-sat)


-- iteration 554 --
(declare-fun f0 (Float64 Float64 Float32) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float2 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RNE ?float8) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ((_ to_fp 5 11) RTP ?float6))))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool15)))
(check-sat)


-- iteration 555 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 15 113) RTN ?float2) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float6) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float4 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float8) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float9) ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTP ?float10) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ((_ to_fp 15 113) RNE ?float4))))
; FINAL ASSERT
(assert (or (or (or (and ?bool12) (and ?bool11 ?bool12 ?bool15) (and ?bool14)) (or (or ?bool12 ?bool13 ?bool13) ?bool13) (or (or ?bool15 ?bool15 ?bool14) ?bool13)) ?bool13 ?bool13))
(check-sat)


-- iteration 556 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float3 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float2 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ?float4 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float7 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 15 113) RTZ ?float3))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 557 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float4 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ?float7 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float8 ((_ to_fp 8 24) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float5)))
; FINAL ASSERT
(assert (and (and ?bool12 (or ?bool12 (or ?bool12 ?bool13 ?bool14)))))
(check-sat)


-- iteration 558 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 8 24) RTP ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float3 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float6 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ?float6 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ((_ to_fp 8 24) RNE ?float5) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTN ?float5) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTN ?float3) ?float4)))
; FINAL ASSERT
(assert (and (or (and (and ?bool11 ?bool12) ?bool11 (or ?bool14))) (and ?bool11 (or (and ?bool13 ?bool11)) (and (and ?bool13) ?bool14 ?bool13)) (and (and (and ?bool12 ?bool11)))))
(check-sat)


-- iteration 559 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RNE ?float6 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float6 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RTN ?float7) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float10) ?float4)))
; FINAL ASSERT
(assert (and (or ?bool14) ?bool13))
(check-sat)


-- iteration 560 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RNE ?float4) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float7 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float8 ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and (and ?bool14 (or ?bool13 ?bool14)) ?bool15 (and ?bool11)))
(check-sat)


-- iteration 561 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011111010111111 #b0101111001001110001001110000101001010010011000011001011000100010000010100011000111100110100010110100101001101010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float3 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ((_ to_fp 11 53) RTZ ?float5) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float2 ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float5 ((_ to_fp 5 11) RTZ ?float8) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 562 --
(declare-fun f0 (Float16 Float128 Float128) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ?float2 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 563 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ?float5 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float7 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float9 ((_ to_fp 8 24) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float9)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool12 ?bool12 (or (or ?bool12))) ?bool15))
(check-sat)


-- iteration 564 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ((_ to_fp 8 24) RNE ?float6) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float8))))
; FINAL ASSERT
(assert (and ?bool11 ?bool11))
(check-sat)


-- iteration 565 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 15 113) RTZ ?float7) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float9 ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and (or ?bool11 (or ?bool11 (or ?bool13)) ?bool14) ?bool15))
(check-sat)


-- iteration 566 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float4) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float6 ((_ to_fp 8 24) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RNE ?float6) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTN ?float5) ?float10)))
; FINAL ASSERT
(assert (or (or (and (and ?bool12 ?bool13) (or ?bool12 ?bool14) ?bool11) ?bool12 (or (and ?bool12) (and ?bool11 ?bool14 ?bool11))) ?bool13 (and (and ?bool14 ?bool11) (and (or ?bool11 ?bool11 ?bool11) (and ?bool15 ?bool13) ?bool11) (and ?bool11 ?bool13))))
(check-sat)


-- iteration 567 --
(declare-fun f0 (Float16 Float16 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ((_ to_fp 5 11) RTZ ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float5) ?float6 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float7) ?float6 ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTZ ?float2) ?float5)))
; FINAL ASSERT
(assert (and (or ?bool13 (and (or ?bool11 ?bool12 ?bool13)))))
(check-sat)


-- iteration 568 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float6 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ((_ to_fp 11 53) RNE ?float4) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float7)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool13 ?bool15 ?bool12) ?bool15))
(check-sat)


-- iteration 569 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ((_ to_fp 8 24) RTZ ?float2) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float6 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float5)))
; FINAL ASSERT
(assert (and (and (and (or ?bool14) (and ?bool15)) (and (or ?bool12 ?bool13 ?bool13)) (and ?bool14))))
(check-sat)


-- iteration 570 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float6 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14))
(check-sat)


-- iteration 571 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11000110010 #b0110001100111110111000001110010100010110001011110011)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11100 #b0010100110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTN ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float4 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTN ?float4) ?float5)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15))
(check-sat)


-- iteration 572 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101010000011101 #b0101010000000101100010101101001011000001110000110111000101010101011001001111111000011000010011011011000100110110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 15 113) RTZ ?float3))))
; FINAL ASSERT
(assert (and (and (or (and ?bool14)))))
(check-sat)


-- iteration 573 --
(declare-fun f0 (Float16 Float16 Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float2 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 5 11) RNE ?float5) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTN ?float3) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10)))
; FINAL ASSERT
(assert (or ?bool14 (and (and (and ?bool12) (and ?bool12 ?bool13)))))
(check-sat)


-- iteration 574 --
(declare-fun f0 (Float16 Float16 Float64) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110101011001100 #b1001011000011001011001111111100101101110101001010100111000111011010101001111000010101010110001010101011011100111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RNE ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float2 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool11) ?bool15))
(check-sat)


-- iteration 575 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ((_ to_fp 5 11) RTZ ?float5) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 576 --
(declare-fun f0 (Float16 Float64 Float16) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ((_ to_fp 5 11) RNE ?float3) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float8 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float9 ((_ to_fp 8 24) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RTN ?float5) ?float4)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15 (and ?bool11 (or (or ?bool11 ?bool14 ?bool14) ?bool12) ?bool13)))
(check-sat)


-- iteration 577 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ((_ to_fp 5 11) RTZ ?float5) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 (and (and ?bool12) ?bool11 (and (and ?bool13) (and ?bool12 ?bool13 ?bool11)))))
(check-sat)


-- iteration 578 --
(declare-fun f0 (Float128 Float128 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01011 #b1011010100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float4 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ?float6 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float8)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool14)))
(check-sat)


-- iteration 579 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float2 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float4 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool12 ?bool15)))
(check-sat)


-- iteration 580 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float6 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 5 11) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 15 113) RTP ?float10) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 15 113) RNE ?float8))))
; FINAL ASSERT
(assert (and (or (or (and ?bool13 ?bool11) ?bool12) (and ?bool12 ?bool14 (or ?bool11)) (or (and ?bool14 ?bool11)))))
(check-sat)


-- iteration 581 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6 ((_ to_fp 5 11) RNE ?float4))))
; FINAL ASSERT
(assert (and (or (and ?bool13) (or ?bool12 ?bool14)) (and (or (or ?bool14 ?bool15 ?bool11) ?bool13) ?bool11 ?bool14)))
(check-sat)


-- iteration 582 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float4 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float8 ((_ to_fp 8 24) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTN ?float6) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and (and (and ?bool13 ?bool14)) ?bool13))
(check-sat)


-- iteration 583 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011111001011110 #b0010101101000110010011111100001111010001011001001100101101101101110100001011000101101111101110011001100110000010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float3 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 15 113) RTZ ?float5) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float5 ((_ to_fp 8 24) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 8 24) RTP ?float4) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool15 ?bool11)))
(check-sat)


-- iteration 584 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float4 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RNE ?float3) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float8 ((_ to_fp 8 24) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float10)))
; FINAL ASSERT
(assert (and ?bool15 (and (or ?bool12))))
(check-sat)


-- iteration 585 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float2 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 11 53) RTN ?float6) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float6 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ((_ to_fp 5 11) RNE ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RTZ ?float4) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 15 113) RTZ ?float6))))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool11)))
(check-sat)


-- iteration 586 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float6 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool15 (and (and (and ?bool15 ?bool13) (and ?bool13) (or ?bool13)) ?bool12 ?bool11) (or (and (or ?bool13 ?bool11 ?bool11)) (or (and ?bool11) (or ?bool11 ?bool12 ?bool11)))))
(check-sat)


-- iteration 587 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11101 #b1001000010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float9 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool11) (or ?bool13 (and (or ?bool12) (and ?bool11 ?bool11 ?bool12)) ?bool14)))
(check-sat)


-- iteration 588 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float4 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float8) ?float2 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and (or (or (or ?bool15)) (or (and ?bool12) (and ?bool14))) ?bool14))
(check-sat)


-- iteration 589 --
(declare-fun f0 (Float32 Float16 Float128) Float16)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTP ?float2 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float3 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 11 53) RTP ?float9) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (and (and ?bool13) (or (or (and ?bool13) (and ?bool12 ?bool15 ?bool11) (or ?bool12 ?bool12 ?bool15)) ?bool15) (or ?bool13 (or (or ?bool12) (and ?bool14 ?bool13 ?bool13) ?bool12) (and (or ?bool11) (or ?bool13 ?bool12 ?bool12)))))
(check-sat)


-- iteration 590 --
(declare-fun f0 (Float128 Float64 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 8 24) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or (or (or (and ?bool14) (or ?bool11 ?bool12 ?bool11))) ?bool13))
(check-sat)


-- iteration 591 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 8 24) RTN ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTZ ?float9) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 592 --
(declare-fun f0 (Float16 Float32 Float128) Float16)
(declare-fun p0 (Float16 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTZ ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ?float5 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 15 113) RNE ?float5))))
; FINAL ASSERT
(assert (and (or ?bool13 (or ?bool12 (or ?bool14 ?bool14) ?bool13) (or ?bool15 (and ?bool15 ?bool12) (or ?bool13))) (and (or ?bool14 ?bool12) (and ?bool13 ?bool12))))
(check-sat)


-- iteration 593 --
(declare-fun f0 (Float64 Float32 Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01001101001 #b0110100101111001100010101011000111001010001000011010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RNE ?float6) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float4)))
; FINAL ASSERT
(assert (or ?bool14 (or (or (or ?bool11 ?bool15 ?bool13) ?bool14) (or (and ?bool14) (or ?bool11 ?bool15 ?bool13)) (or (and ?bool13))) (and ?bool11 (or (or ?bool11 ?bool15 ?bool11) ?bool13 ?bool14))))
(check-sat)


-- iteration 594 --
(declare-fun f0 (Float64 Float64 Float32) Float128)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00110000111 #b0000111001101101011001010010000000111010001110010111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float2) ?float5 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 11 53) RNE ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float3 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float7 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RTZ ?float7) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTZ ?float6) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 5 11) RTP ?float10) ?float7)))
; FINAL ASSERT
(assert (and (or (and ?bool11) ?bool14 ?bool12) ?bool15))
(check-sat)


-- iteration 595 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float6 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 596 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float5 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float2 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 11 53) RTP ?float9) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float10)))
; FINAL ASSERT
(assert (and ?bool13 ?bool12 (or (and ?bool14 ?bool13))))
(check-sat)


-- iteration 597 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float3 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float6 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTP ?float9) ?float8)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool13 (or ?bool12 (and ?bool14 ?bool14) ?bool12)) (or (and ?bool14) (and ?bool14) (or (and ?bool12 ?bool15 ?bool15) (and ?bool14 ?bool12 ?bool14))) ?bool13))
(check-sat)


-- iteration 598 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00101 #b0111000101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float8 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 15 113) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or ?bool14 (and (and (and ?bool11)) (and ?bool14 ?bool15) (and ?bool12)) (or (or ?bool12 ?bool11) (and (and ?bool12) (or ?bool15) (and ?bool11)))))
(check-sat)


-- iteration 599 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000101010101111 #b0001101101101011101001100101100101100000111101000110110100001011010110011001110010110111011001001110110001011111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RTP ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (or (or (or ?bool12 (and ?bool11) (or ?bool14 ?bool13)) ?bool13 (or ?bool11 ?bool14 (and ?bool15 ?bool14))) ?bool13 (and ?bool13 (and ?bool12 ?bool11 ?bool12) (and (and ?bool14)))))
(check-sat)


-- iteration 600 --
(declare-fun f0 (Float16 Float16 Float64) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11010011 #b01001001001110101100101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTZ ?float2) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float9 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RNE ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTN ?float8) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float2) ?float4)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 601 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011100011001111 #b1100111010100001011110000111001001100101010001010101000111011011001000100000101101110010001000001000011001111101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float5 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float4 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float5 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RNE ?float5) ?float3)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 602 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11101001111 #b1111011111000111100111000010001100110000101000010001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ?float7 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6)))
; FINAL ASSERT
(assert (or ?bool13 (or (or ?bool13 (or ?bool13 ?bool13 ?bool13) (and ?bool14)) ?bool13) (and ?bool13)))
(check-sat)


-- iteration 603 --
(declare-fun f0 (Float64 Float64 Float128) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RTZ ?float4) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTZ ?float6) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTP ?float3 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RTZ ?float10) ?float7)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 604 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float6 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RNE ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (and ?bool15 ?bool11 ?bool15))
(check-sat)


-- iteration 605 --
(declare-fun f0 (Float64 Float16 Float64) Float64)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110001001100111 #b0110001000100100101110100011010011010101100000111011111100001000100110110001010010011111010100101010101001011000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float5 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float2 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float5 ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float10) ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float5) ?float4)))
; FINAL ASSERT
(assert (and (and ?bool13 (or (and ?bool12 ?bool15) ?bool11) (and (and ?bool14) (or ?bool12 ?bool11 ?bool14)))))
(check-sat)


-- iteration 606 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float8 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float3 ((_ to_fp 15 113) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float6) ?float8)))
; FINAL ASSERT
(assert (and (or ?bool14 ?bool15 (and (and ?bool14 ?bool11 ?bool14) ?bool14 (and ?bool14 ?bool12 ?bool11))) (and ?bool11 (or ?bool11 ?bool14 ?bool12))))
(check-sat)


-- iteration 607 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float3 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTP ?float4 ((_ to_fp 5 11) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10 ?float2 ((_ to_fp 11 53) RNE ?float4))))
; FINAL ASSERT
(assert (or (or (and ?bool12 ?bool14 ?bool11)) ?bool12 ?bool14))
(check-sat)


-- iteration 608 --
(declare-fun f0 (Float64 Float16 Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10011001 #b01010110011100011101110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float5) ?float2 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 8 24) RTN ?float6) ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ((_ to_fp 5 11) RTP ?float6) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float9) ?float2 ((_ to_fp 8 24) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RNE ?float9) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11))
(check-sat)


-- iteration 609 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RNE ?float8) ?float2)))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool11 ?bool12) (and (and ?bool13 (and ?bool13 ?bool15) ?bool12) ?bool13 (or (and ?bool14 ?bool15) (or ?bool11 ?bool15 ?bool12))) ?bool15))
(check-sat)


-- iteration 610 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float7 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTN ?float7) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float3))))
; FINAL ASSERT
(assert (and (and ?bool12 (and (or ?bool11 ?bool15) (and ?bool15)))))
(check-sat)


-- iteration 611 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTN ?float4) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RNE ?float6) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ?float6 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 15 113) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RNE ?float4) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTP ?float6) ?float8)))
; FINAL ASSERT
(assert (and (or ?bool14) (and ?bool11 ?bool14)))
(check-sat)


-- iteration 612 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float4 ((_ to_fp 15 113) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTN ?float6) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and ?bool14 ?bool11 ?bool13))
(check-sat)


-- iteration 613 --
(declare-fun f0 (Float16 Float128 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0111000110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 11 53) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RTZ ?float3) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool14 ?bool14 ?bool13))
(check-sat)


-- iteration 614 --
(declare-fun f0 (Float128 Float16 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00100010010 #b0011111010010110101000000111101100100000011101100100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 11 53) RTZ ?float2) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float9))))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool11) (or ?bool12 (or ?bool14 ?bool11) ?bool13) (and ?bool11 (and (and ?bool11 ?bool13 ?bool15) (and ?bool14) (and ?bool13 ?bool12 ?bool14)))))
(check-sat)


-- iteration 615 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RTZ ?float5) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTN ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (and ?bool15 ?bool11 (or (or ?bool13) (or (or ?bool12)) (and ?bool12 ?bool12 ?bool15))))
(check-sat)


-- iteration 616 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 5 11) RTN ?float4) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (or (and ?bool15 ?bool11 ?bool13) ?bool11)))
(check-sat)


-- iteration 617 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ?float2 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float2 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 618 --
(declare-fun f0 (Float64 Float16 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float6 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTZ ?float5) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTZ ?float7) ?float2)))
; FINAL ASSERT
(assert (and (and (or (and ?bool14) ?bool11) ?bool13 ?bool12) ?bool14))
(check-sat)


-- iteration 619 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00010001001 #b1101111111001111010000110010101110000010011000101100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 620 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float2 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ?float4 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float5 ((_ to_fp 5 11) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float3) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RNE ?float2) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float6)))
; FINAL ASSERT
(assert (and ?bool11 ?bool15 (and (or ?bool12 ?bool11) (or (or ?bool12 ?bool12)) ?bool15)))
(check-sat)


-- iteration 621 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100000001101100 #b0001100000000011011000000001011000011011001001101001101111001100011110011101011000010100010111010001010110111011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float4 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or (and (or (and ?bool15 ?bool15) (or ?bool11) (or ?bool15))) (or ?bool12 ?bool11 (or ?bool15 ?bool14)) ?bool12))
(check-sat)


-- iteration 622 --
(declare-fun f0 (Float128 Float128 Float16) Float32)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 8 24) RNE ?float5) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float3) ?float2 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 623 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float2 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float2) ?float8 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13))
(check-sat)


-- iteration 624 --
(declare-fun f0 (Float16 Float128 Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001111010100100 #b1000110001101001101100000000000001010110100110110100110001000000110111011010101001011000011101010011111011001100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float3 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RNE ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float8 ((_ to_fp 8 24) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 (and ?bool13 (or (and ?bool14 ?bool13)) ?bool15)))
(check-sat)


-- iteration 625 --
(declare-fun f0 (Float32 Float32 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10110 #b0101101111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float2 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float7 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RNE ?float2) ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (and (and (and (and ?bool13 ?bool15) ?bool11)) ?bool13 (or (or ?bool12) ?bool14 ?bool14)))
(check-sat)


-- iteration 626 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float5 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 11 53) RTP ?float7) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTP ?float2) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 ?bool11))
(check-sat)


-- iteration 627 --
(declare-fun f0 (Float32 Float16 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 628 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ((_ to_fp 5 11) RNE ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float6 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 629 --
(declare-fun f0 (Float64 Float128 Float128) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float6 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float6 ((_ to_fp 11 53) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 630 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float2 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTN ?float6) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float3 ((_ to_fp 15 113) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RTN ?float5) ?float9)))
; FINAL ASSERT
(assert (and (or ?bool14 (or (and ?bool11 ?bool11 ?bool12) (or ?bool14 ?bool12) (and ?bool14 ?bool14)) ?bool15) ?bool15 ?bool11))
(check-sat)


-- iteration 631 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 8 24) RNE ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ((_ to_fp 8 24) RTP ?float2) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float5 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ((_ to_fp 8 24) RNE ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float6) ?float3 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 5 11) RNE ?float5) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 5 11) RTZ ?float8) ((_ to_fp 5 11) RTZ ?float9))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 632 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11110011110 #b0001010111010110110101010011101101110101110000101110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTP ?float6 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTZ ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float10))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 633 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float2) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ?float3 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RTZ ?float9) ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 5 11) RTZ ?float8))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 634 --
(declare-fun f0 (Float32 Float16 Float32) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100011100001010 #b1101010100001010011010110000010111001101111010000111001101100001000101001011011011000011100000100100101010011010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RNE ?float6) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 15 113) RTN ?float5) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RNE ?float7) ?float9)))
; FINAL ASSERT
(assert (and (or (and (and ?bool13) (or ?bool15)) (and ?bool12 ?bool14) (and (or ?bool11 ?bool13 ?bool14) (or ?bool13))) ?bool12 ?bool11))
(check-sat)


-- iteration 635 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 8 24) RTN ?float4) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 15 113) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6)))
; FINAL ASSERT
(assert (and (or (or (and ?bool14) (or ?bool14)) (or (or ?bool14 ?bool15)) (or (and ?bool15 ?bool15 ?bool11) (or ?bool14 ?bool12) (or ?bool11 ?bool12 ?bool15)))))
(check-sat)


-- iteration 636 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00010101 #b01111101100000001101111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float8) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool12 (or ?bool14))))
(check-sat)


-- iteration 637 --
(declare-fun f0 (Float32 Float128 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 5 11) RTP ?float3) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float8) ?float3 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RNE ?float8) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and (and (or ?bool14 ?bool13 (or ?bool14))) ?bool12))
(check-sat)


-- iteration 638 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float7 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 15 113) RNE ?float7) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float3 ((_ to_fp 11 53) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool15 ?bool11))
(check-sat)


-- iteration 639 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTP ((_ to_fp 15 113) RTZ ?float4) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (or (or ?bool13 ?bool11 ?bool11)) (and (or (and ?bool14 ?bool11 ?bool12) (or ?bool12 ?bool11)) ?bool15 (and ?bool13 ?bool11 ?bool15))))
(check-sat)


-- iteration 640 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 15 113) RNE ?float8) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or (and ?bool12) ?bool15))
(check-sat)


-- iteration 641 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110111101110011 #b0001001011100001001101110111111111100011101101110010011101111000100111111011001001111111100100000011111000100110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTZ ?float3 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ?float9)))
; FINAL ASSERT
(assert (and (or ?bool13) (or ?bool14)))
(check-sat)


-- iteration 642 --
(declare-fun f0 (Float16 Float64 Float16) Float32)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 11 53) RTN ?float4) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float3) ?float2 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 5 11) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTN ?float3) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ((_ to_fp 11 53) RTZ ?float9) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTP ?float6) ?float5)))
; FINAL ASSERT
(assert (and (and (and (and ?bool11)))))
(check-sat)


-- iteration 643 --
(declare-fun f0 (Float128 Float128 Float128) Float32)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100110000000010 #b1010001111100110100111101010110000010011111000011000011101101111011010000011111001100110010000110100100101100011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 5 11) RNE ?float3) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float7 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RTN ?float7) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (or (and (and ?bool12 (or ?bool14) (or ?bool13 ?bool14)) (or ?bool15 (or ?bool15))) ?bool12))
(check-sat)


-- iteration 644 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01011001 #b00011110000101011100001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 11 53) RTP ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RTP ?float9) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (and (and (and ?bool15) ?bool14 ?bool15) (or ?bool12 ?bool11)) ?bool13))
(check-sat)


-- iteration 645 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00001011001 #b1110100001101010110010110000010111100001100001110000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float6 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 646 --
(declare-fun f0 (Float128 Float16 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ?float3 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float10 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTZ ?float4) ?float10)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 647 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float3 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float6 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float4)))
; FINAL ASSERT
(assert (or (or ?bool11 ?bool13) (and ?bool11 ?bool13) ?bool15))
(check-sat)


-- iteration 648 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11000011010 #b1101011100000100110011011111100110001110011101101110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 11 53) RTZ ?float7))))
; FINAL ASSERT
(assert (and ?bool15 ?bool11))
(check-sat)


-- iteration 649 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 8 24) RNE ?float5) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float6 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float2 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float9 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool15)))
(check-sat)


-- iteration 650 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ?float4 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTN ?float2 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RTZ ?float3) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float10))))
; FINAL ASSERT
(assert (and ?bool11 ?bool13 ?bool14))
(check-sat)


-- iteration 651 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 5 11) RNE ?float6) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (and (or ?bool13) ?bool11 ?bool11))
(check-sat)


-- iteration 652 --
(declare-fun f0 (Float16 Float64 Float32) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11011000010 #b1111010111010010010101010000010101111000111010011001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 5 11) RTN ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RTZ ?float7) ?float8)))
; FINAL ASSERT
(assert (or ?bool11 ?bool11 ?bool14))
(check-sat)


-- iteration 653 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float2 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ?float2 ((_ to_fp 8 24) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RNE ?float4) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool14 (or ?bool15 ?bool11) (or ?bool12 (or ?bool14))) ?bool12))
(check-sat)


-- iteration 654 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float4 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ?float7 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float4 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 655 --
(declare-fun f0 (Float128 Float128 Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011101101010110 #b0111010010001000111000111111011111011001101010110001100100110111101100111111010001110110010111100100000110001100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float2 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float4 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 15 113) RTN ?float2) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ?float6 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ((_ to_fp 8 24) RTZ ?float8))))
; FINAL ASSERT
(assert (or ?bool12 (or (and (or ?bool13 ?bool14 ?bool11)) (and ?bool15 (and ?bool12) (or ?bool15 ?bool12))) (and ?bool13 ?bool13 (and ?bool12))))
(check-sat)


-- iteration 656 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float2 ((_ to_fp 5 11) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RTZ ?float7) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RNE ?float9) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 5 11) RTP ?float9))))
; FINAL ASSERT
(assert (or (or ?bool13 (or ?bool13))))
(check-sat)


-- iteration 657 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RNE ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float7))))
; FINAL ASSERT
(assert (and ?bool11 ?bool13 ?bool13))
(check-sat)


-- iteration 658 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RTZ ?float9) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10 ((_ to_fp 11 53) RTP ?float5) ?float3)))
; FINAL ASSERT
(assert (and (or ?bool11) ?bool13))
(check-sat)


-- iteration 659 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float2)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 660 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float3 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTN ?float4) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float4 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 661 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110101000100100 #b0101100010011010110101001101000111110010011111111110000010111111000001001000111111111101101100010100101111101110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 5 11) RNE ?float9))))
; FINAL ASSERT
(assert (and (or ?bool13 (and (and ?bool12) ?bool11) (and ?bool11)) (and ?bool13 ?bool13 ?bool13)))
(check-sat)


-- iteration 662 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ?float4 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTP ?float6) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RNE ?float10) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and (or ?bool13 (or (or ?bool13 ?bool14) (and ?bool12 ?bool13 ?bool12) ?bool12) ?bool14) ?bool12))
(check-sat)


-- iteration 663 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ?float2 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float6 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ((_ to_fp 15 113) RTP ?float8))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 664 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ((_ to_fp 5 11) RTP ?float2) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 15 113) RTN ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float10))))
; FINAL ASSERT
(assert (or ?bool15 ?bool11 ?bool11))
(check-sat)


-- iteration 665 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 5 11) RTP ?float2) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float6 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ?float2 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTN ?float8) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float7 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ?float2)))
; FINAL ASSERT
(assert (or (or (and (or ?bool15 ?bool11))) (or (or (or ?bool11)) ?bool11) ?bool15))
(check-sat)


-- iteration 666 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10010001 #b01101010110111011101001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110101111101101 #b1001100110111110010010101101000110011110001010101001101001110110010010110000000101110010110110110100011000011001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 11 53) RTZ ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 5 11) RTZ ?float6) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ((_ to_fp 11 53) RTZ ?float7) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float9) ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (and (or (and ?bool14 ?bool11) (or ?bool15 ?bool12 ?bool14) ?bool12) (or ?bool11 (and ?bool13 ?bool13 ?bool13) (and ?bool12 ?bool11 ?bool15)))))
(check-sat)


-- iteration 667 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ((_ to_fp 8 24) RTN ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ?float6 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float9))))
; FINAL ASSERT
(assert (or ?bool11 (or (and ?bool13) (and (or ?bool12 ?bool12 ?bool13) (or ?bool13)) (and (or ?bool13) (or ?bool14 ?bool14)))))
(check-sat)


-- iteration 668 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float32 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float8 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float3)))
; FINAL ASSERT
(assert (or (or (and (or ?bool13 ?bool12))) (or (or ?bool14 (and ?bool15 ?bool12))) (and ?bool15)))
(check-sat)


-- iteration 669 --
(declare-fun f0 (Float32 Float64 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float4) ?float4 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float9 ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool15) (or ?bool14 (and ?bool12 (and ?bool14)) (or ?bool13))))
(check-sat)


-- iteration 670 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float4 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 671 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ?float5 ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or (or (and ?bool13)) (and ?bool15)))
(check-sat)


-- iteration 672 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00010000 #b01110100111011100001101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RTP ?float10) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool12 ?bool15)))
(check-sat)


-- iteration 673 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00111010 #b00000100011101001110110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float6 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ((_ to_fp 11 53) RTN ?float6) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 15 113) RTZ ?float4))))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool12 (and (or ?bool14) (and ?bool13 ?bool12))) (or (and ?bool13 (or ?bool13) ?bool12) ?bool13) (or (and (and ?bool11 ?bool12 ?bool12) (and ?bool13 ?bool11)) (and (and ?bool11 ?bool12 ?bool12) ?bool12) (or (and ?bool14) (and ?bool13 ?bool12 ?bool14) (or ?bool13)))))
(check-sat)


-- iteration 674 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RNE ?float5 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTN ((_ to_fp 15 113) RTN ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RTN ?float4) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and ?bool13 (and ?bool11 (and (and ?bool15) ?bool11 (or ?bool14 ?bool15 ?bool15)) (or (and ?bool12 ?bool14 ?bool14) (or ?bool12 ?bool15) (or ?bool11 ?bool14)))))
(check-sat)


-- iteration 675 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01000 #b0011011101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10001101 #b11010111101110000101000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 5 11) RNE ?float5) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float4 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ((_ to_fp 11 53) RTN ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 15 113) RTN ?float6) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RTN ?float10) ?float5)))
; FINAL ASSERT
(assert (or (or (or (or ?bool11 ?bool12 ?bool15)) (or ?bool15 ?bool15) (or (or ?bool14 ?bool12))) (and ?bool13 ?bool15 (or (and ?bool13) (and ?bool11 ?bool11 ?bool12))) (or ?bool12 ?bool11 (or (and ?bool15 ?bool14 ?bool14)))))
(check-sat)


-- iteration 676 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01111110 #b10000011100011111101100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and (and (or ?bool12 ?bool15) ?bool14)))
(check-sat)


-- iteration 677 --
(declare-fun f0 (Float128 Float128 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float6) ?float3 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float10)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool15 ?bool11)))
(check-sat)


-- iteration 678 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTP ?float5 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTP ?float2 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ?float4 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float7 ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float9)))
; FINAL ASSERT
(assert (and (and (and ?bool15) (and (and ?bool12 ?bool13 ?bool13) (or ?bool14 ?bool12 ?bool13) (and ?bool11))) (or ?bool14 ?bool15) ?bool14))
(check-sat)


-- iteration 679 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ?float7 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RNE ?float6) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ?float6 ((_ to_fp 5 11) RTP ?float4))))
; FINAL ASSERT
(assert (or (or ?bool14) ?bool11))
(check-sat)


-- iteration 680 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RTZ ?float4) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and (and (and ?bool14 ?bool12)) (or (and ?bool14) (and ?bool11 ?bool11 ?bool13) ?bool14)))
(check-sat)


-- iteration 681 --
(declare-fun f0 (Float64 Float16 Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float4 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTP ?float3) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float5) ?float4 ((_ to_fp 8 24) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTZ ?float10) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float8)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 682 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001100111111010 #b1101011101011110100010011110011110110010101011011100000000001000100111110001010111000010010100000101010010111101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10100 #b0001010101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float4 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ?float9 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTZ ?float4) ?float3)))
; FINAL ASSERT
(assert (and (and ?bool13 (and ?bool13 (or ?bool12 ?bool14))) (or (and ?bool12 (and ?bool11 ?bool11 ?bool13)) (and (and ?bool14 ?bool12) (and ?bool14 ?bool12))) ?bool13))
(check-sat)


-- iteration 683 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float5 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15))
(check-sat)


-- iteration 684 --
(declare-fun f0 (Float128 Float16 Float128) Float16)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 5 11) RTN ?float5) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 5 11) RNE ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float3 ?float4 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RTP ?float10) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RTP ?float8) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (and (and (or ?bool14) (or ?bool15 ?bool14 (or ?bool13)) (or (and ?bool12 ?bool13) (and ?bool15 ?bool12 ?bool12))) (or (or (or ?bool15) (or ?bool14)) (and (and ?bool12))) (or ?bool12 (and ?bool15 ?bool13 (or ?bool15)))))
(check-sat)


-- iteration 685 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RNE ?float6) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ?float4 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and (and ?bool15 ?bool14) (and (or (and ?bool12) (or ?bool12 ?bool12) (and ?bool12 ?bool13))) ?bool14))
(check-sat)


-- iteration 686 --
(declare-fun f0 (Float64 Float16 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11110111110 #b1111011111101110110000000111011111010110100011010001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ?float2 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float7 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ((_ to_fp 5 11) RTZ ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RNE ?float4) ?float9)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 687 --
(declare-fun f0 (Float16 Float16 Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTP ?float2 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RTZ ?float2) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 5 11) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTP ?float5) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (and (and ?bool11) ?bool14))
(check-sat)


-- iteration 688 --
(declare-fun f0 (Float16 Float128) Float128)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11010 #b1000110000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float7 ((_ to_fp 15 113) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTP ?float5) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float2) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or (and (or (or ?bool12 ?bool15 ?bool14)) (and (and ?bool11 ?bool15)) (and ?bool14 (and ?bool15 ?bool14) ?bool15)) ?bool13 ?bool13))
(check-sat)


-- iteration 689 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10100001000 #b0011100000010001010110001111000101011000100010111010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ?float5 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float4 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float4)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 690 --
(declare-fun f0 (Float16 Float64 Float16) Float16)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTZ ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTN ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 11 53) RTZ ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RNE ?float4 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float6) ?float2 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float10) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 15 113) RTP ?float10) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 11 53) RTP ?float7))))
; FINAL ASSERT
(assert (or ?bool14 (and ?bool14 (and ?bool13)) ?bool15))
(check-sat)


-- iteration 691 --
(declare-fun f0 (Float64 Float16 Float64) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RNE ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float2 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float5)))
; FINAL ASSERT
(assert (and (and (and (and ?bool11 ?bool11) (and ?bool12) ?bool15)) (or ?bool15 (or ?bool11 (and ?bool13) ?bool11) ?bool14)))
(check-sat)


-- iteration 692 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01100 #b0001000101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ?float4 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float4 ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RTN ?float8) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float6)))
; FINAL ASSERT
(assert (and (or ?bool11 (or (or ?bool13)))))
(check-sat)


-- iteration 693 --
(declare-fun f0 (Float64 Float128 Float128) Float32)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11000 #b1100010000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float4) ?float7 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 8 24) RTP ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 11 53) RTZ ?float5) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ((_ to_fp 11 53) RTP ?float2) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (or ?bool11) (or ?bool14) (and (and ?bool14 ?bool13 ?bool13) ?bool14)))
(check-sat)


-- iteration 694 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ?float2 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float5) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTP ?float3) ?float5)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 (and (and ?bool11 ?bool15) ?bool13)))
(check-sat)


-- iteration 695 --
(declare-fun f0 (Float128 Float64 Float32) Float16)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ?float6 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RTP ?float2) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 5 11) RTP ?float10))))
; FINAL ASSERT
(assert (or (or ?bool11) ?bool12 ?bool13))
(check-sat)


-- iteration 696 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11111101000 #b1100000000010101001000100001001101011110001110101000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ?float7 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool11 ?bool12 (and (and ?bool15 ?bool12) (and (or ?bool14 ?bool12) (and ?bool13 ?bool12 ?bool14)))))
(check-sat)


-- iteration 697 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 15 113) RTP ?float2) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RTP ?float5) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool14 ?bool11 (or ?bool15 ?bool14 (or ?bool11))) ?bool12))
(check-sat)


-- iteration 698 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10010 #b0010101111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 11 53) RTP ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ?float6 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float7))))
; FINAL ASSERT
(assert (or ?bool12 ?bool12 ?bool15))
(check-sat)


-- iteration 699 --
(declare-fun f0 (Float128 Float16 Float64) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01010 #b0111110001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 5 11) RNE ?float2) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ((_ to_fp 5 11) RNE ?float2) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float2 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and ?bool13 ?bool12))
(check-sat)


-- iteration 700 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10101101 #b10101001111010001011010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float2 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float3)))
; FINAL ASSERT
(assert (or (and (and (and ?bool12 ?bool12 ?bool13) (and ?bool12) ?bool15) ?bool14)))
(check-sat)


-- iteration 701 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float6 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RNE ?float6) ?float9)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool12 (or ?bool11))))
(check-sat)


-- iteration 702 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float3 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool12) ?bool13 ?bool12))
(check-sat)


-- iteration 703 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100111110111111 #b0001100000001100010110000000101111111010000000001100000001101110101111011101010000001111010000011101101101010000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 11 53) RTZ ?float4) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float10 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and (or ?bool14 (or ?bool11 (and ?bool13))) ?bool14))
(check-sat)


-- iteration 704 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float32 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ((_ to_fp 11 53) RNE ?float5))))
; FINAL ASSERT
(assert (and (or (or (and ?bool14) ?bool11 ?bool13) ?bool15)))
(check-sat)


-- iteration 705 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00011 #b0100101100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ((_ to_fp 8 24) RNE ?float7) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 11 53) RTN ?float7) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RTZ ?float5) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 15 113) RNE ?float6) ?float3)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 706 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float7 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ?float8 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RTN ?float6) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 707 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10011000101 #b0110111001001000000101111100010011000011111101111110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float2 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float5 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ((_ to_fp 8 24) RTN ?float7))))
; FINAL ASSERT
(assert (and ?bool11 (or ?bool14)))
(check-sat)


-- iteration 708 --
(declare-fun f0 (Float128 Float64 Float128) Float16)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float3) ?float4 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float2) ?float4 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float10) ?float7 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float10) ?float10 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14 ?bool13))
(check-sat)


-- iteration 709 --
(declare-fun f0 (Float32 Float16 Float128) Float64)
(declare-fun p0 (Float16 Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 15 113) RNE ?float2) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float7 ((_ to_fp 11 53) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTP ?float2) ?float8)))
; FINAL ASSERT
(assert (and (and ?bool13) ?bool15 (or ?bool14 ?bool14)))
(check-sat)


-- iteration 710 --
(declare-fun f0 (Float128 Float16 Float16) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTN ?float3) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and (and (or ?bool14 (and ?bool11 ?bool14)) (or (or ?bool13 ?bool14 ?bool11)) ?bool13) ?bool12 ?bool13))
(check-sat)


-- iteration 711 --
(declare-fun f0 (Float64 Float64 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10010000110 #b1100000110001010001111111110001110110001101101110110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float4 ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ((_ to_fp 8 24) RTN ?float5) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13))
(check-sat)


-- iteration 712 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTP ?float2) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 8 24) RTP ?float7) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 5 11) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RNE ?float4) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (and (and ?bool13 ?bool14 ?bool11) ?bool15))
(check-sat)


-- iteration 713 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 8 24) RTP ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTZ ?float7) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RNE ?float6) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float3 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ((_ to_fp 11 53) RNE ?float6))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 714 --
(declare-fun f0 (Float64 Float32 Float16) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01111 #b1100000011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ((_ to_fp 5 11) RNE ?float7) ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float2 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 715 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ((_ to_fp 8 24) RTZ ?float3) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float7)))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool12 (or (and ?bool15 ?bool15 ?bool13) ?bool12 (and ?bool11 ?bool13 ?bool13)) (or (and ?bool11))) ?bool14))
(check-sat)


-- iteration 716 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11100110 #b01001100011011010001001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float3 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTP ((_ to_fp 8 24) RTP ?float8) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTN ?float3) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTN ?float10) ?float10 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float5) ?float6 ((_ to_fp 15 113) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool14 ?bool13))
(check-sat)


-- iteration 717 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float4 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (or (and (or ?bool11)) ?bool15))
(check-sat)


-- iteration 718 --
(declare-fun f0 (Float32 Float32 Float32) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ((_ to_fp 5 11) RTN ?float8) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or ?bool11 ?bool15))
(check-sat)


-- iteration 719 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10110010111 #b0000010011101011010100110101010000100010000000110101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ((_ to_fp 11 53) RTN ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float5 ((_ to_fp 11 53) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (or ?bool15 (and (and (and ?bool13 ?bool13 ?bool11) (or ?bool11 ?bool14)) ?bool14) (or (and ?bool13) (and (or ?bool11) ?bool11 (or ?bool11 ?bool11)) (or (or ?bool11 ?bool14)))))
(check-sat)


-- iteration 720 --
(declare-fun f0 (Float16 Float32 Float64) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float5 ?float4 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTZ ?float4) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool14 (and (or ?bool11 ?bool15 ?bool12) ?bool11) (or (and ?bool14) (or ?bool14 ?bool14 ?bool14)))))
(check-sat)


-- iteration 721 --
(declare-fun f0 (Float128 Float64 Float64) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RNE ?float3 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTN ?float3) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float3 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ?float7)))
; FINAL ASSERT
(assert (or (and ?bool12) ?bool12 ?bool14))
(check-sat)


-- iteration 722 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float6 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ?float3 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float6 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6) ?float6 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 723 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float6 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float5) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RTP ?float9) ?float3)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 724 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00010010 #b11010011000101111001011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ?float6 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float2 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float3 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13 (or ?bool13)))
(check-sat)


-- iteration 725 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float2 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTP ?float3) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ?float4 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 11 53) RNE ?float6) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (and ?bool11 (or ?bool15)))
(check-sat)


-- iteration 726 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01011 #b1011111010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTP ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ((_ to_fp 5 11) RTP ?float5) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTZ ?float5) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTP ?float5) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and (or ?bool13 (and ?bool15 (and ?bool14 ?bool13 ?bool14))) (and ?bool15 ?bool11 (or (and ?bool14 ?bool11 ?bool12) ?bool12)) ?bool13))
(check-sat)


-- iteration 727 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ((_ to_fp 8 24) RTP ?float2) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTN ?float6) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 11 53) RTZ ?float9))))
; FINAL ASSERT
(assert (and (or ?bool15)))
(check-sat)


-- iteration 728 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTN ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ((_ to_fp 8 24) RTN ?float6) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float2 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ?float8 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float3) ?float9 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12 ?bool12))
(check-sat)


-- iteration 729 --
(declare-fun f0 (Float16 Float128) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11011001110 #b1101011000101010111000100110110101100111001101010000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float3 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (or (and ?bool14 (or (or ?bool11)) ?bool13)))
(check-sat)


-- iteration 730 --
(declare-fun f0 (Float16 Float32 Float32) Float64)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01001001100 #b0011000100010010000110000001010010001100010010111110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ((_ to_fp 11 53) RTZ ?float3) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float5 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RNE ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float3 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ((_ to_fp 11 53) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool14 (and (or ?bool15 ?bool13) ?bool13 ?bool14) (and (and ?bool15) ?bool14)))
(check-sat)


-- iteration 731 --
(declare-fun f0 (Float128 Float16 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float4 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float5 ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 15 113) RTP ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 732 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float3 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float6 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float9)))
; FINAL ASSERT
(assert (and (and ?bool11)))
(check-sat)


-- iteration 733 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101010001110001 #b0110111100111001100101100011101111101101010101011011000110101100100000001111100111011000001000010111110110111001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ((_ to_fp 8 24) RNE ?float3) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float6 ((_ to_fp 5 11) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 15 113) RTP ?float2))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 734 --
(declare-fun f0 (Float64 Float16 Float32) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float7 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ((_ to_fp 11 53) RNE ?float2))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 735 --
(declare-fun f0 (Float32 Float64 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RNE ?float3 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float8 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 8 24) RTZ ?float10) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTN ?float6) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 11 53) RTP ?float5))))
; FINAL ASSERT
(assert (or (or (and (and ?bool12) ?bool14) ?bool14) (and ?bool12 ?bool13)))
(check-sat)


-- iteration 736 --
(declare-fun f0 (Float64 Float64 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTZ ?float5 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float6) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float8) ?float6 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 11 53) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTN ?float6) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float4)))
; FINAL ASSERT
(assert (or ?bool15 ?bool14 (or ?bool13 ?bool14)))
(check-sat)


-- iteration 737 --
(declare-fun f0 (Float16 Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTP ?float4 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 5 11) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ((_ to_fp 8 24) RTN ?float10))))
; FINAL ASSERT
(assert (or ?bool14 ?bool12 ?bool15))
(check-sat)


-- iteration 738 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RTN ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float2 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ?float8 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ?float6)))
; FINAL ASSERT
(assert (and (or ?bool11 (and (or ?bool15 ?bool14)) ?bool14) (or ?bool15)))
(check-sat)


-- iteration 739 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool11)))
(check-sat)


-- iteration 740 --
(declare-fun f0 (Float64 Float16 Float64) Float64)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float4 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float6 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float2 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ((_ to_fp 15 113) RTN ?float4) ?float7)))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool12) (and (and ?bool15 (or ?bool11 ?bool11) (or ?bool13 ?bool14))) (and (or ?bool11) ?bool15)))
(check-sat)


-- iteration 741 --
(declare-fun f0 (Float128 Float32 Float128) Float16)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float6 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 15 113) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float8 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float7) ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 742 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101010101000111 #b0101100001001011000111001101101101110011011010000000110010100011101111011111110101100101011010101101101000001001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float7 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14 (and (or (and ?bool15 ?bool13)) ?bool14 ?bool15)))
(check-sat)


-- iteration 743 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float6 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ((_ to_fp 5 11) RNE ?float3) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float6)))
; FINAL ASSERT
(assert (or (and (or ?bool11) (and (or ?bool13) (and ?bool14) (or ?bool11 ?bool15)) ?bool12) (and (and (and ?bool15 ?bool15 ?bool14) (and ?bool14 ?bool13 ?bool11) ?bool12) (and ?bool13)) (and ?bool15 (or ?bool12 ?bool15 (and ?bool11)))))
(check-sat)


-- iteration 744 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b010111100111100 #b0111001011011011100100101100101111111111000001001101100001000000000010111100011100101000011101111011010000111110)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110111000110100 #b1010001101000111101111010001100100111101110010101111110010010010000011000101001010000000100011011111101111000100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float7 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float9 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ?float5)))
; FINAL ASSERT
(assert (and (or ?bool13 (or ?bool14))))
(check-sat)


-- iteration 745 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTP ?float8 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float4 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float2) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 5 11) RTZ ?float8) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (or (and ?bool15 (and ?bool15 ?bool12) ?bool11) (and (and (or ?bool14 ?bool14 ?bool14) (or ?bool13 ?bool13 ?bool15) (and ?bool11 ?bool13)) (or ?bool15 (or ?bool12 ?bool11)))))
(check-sat)


-- iteration 746 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10000011111 #b1100101100101011101010111111011011101111011110110111)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 5 11) RTN ?float4) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float6 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float8 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float10))))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool12) (and ?bool12 ?bool12)))
(check-sat)


-- iteration 747 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTZ ?float6 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float4 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float4))))
; FINAL ASSERT
(assert (and (and ?bool12)))
(check-sat)


-- iteration 748 --
(declare-fun f0 (Float32 Float16 Float16) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ((_ to_fp 11 53) RTP ?float5) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float7 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 749 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 8 24) RNE ?float3) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ?float2 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTN ?float6 ((_ to_fp 8 24) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or ?bool15 ?bool12 (or ?bool15 ?bool11)))
(check-sat)


-- iteration 750 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000010100 #b0010010010000100010101110111110111101000000011110100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTP ?float2 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float2 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RNE ?float7 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float3)))
; FINAL ASSERT
(assert (and (and ?bool13)))
(check-sat)


-- iteration 751 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ?float2 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTZ ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RNE ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float2) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTZ ?float9) ?float4)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool13) (or (or (and ?bool14 ?bool14 ?bool14)) (and ?bool11 ?bool14 ?bool13)) ?bool15))
(check-sat)


-- iteration 752 --
(declare-fun f0 (Float64 Float64 Float32) Float16)
(declare-fun p0 (Float32 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float7 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ?float3 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float2 ((_ to_fp 15 113) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float10) ?float8 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 5 11) RNE ?float5))))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool12)))
(check-sat)


-- iteration 753 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00010111100 #b0001111111101101011001100011011100000001000001010001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float4 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ?float8 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (or (or (or ?bool11) ?bool14 (or ?bool14)) ?bool12 (and ?bool14 (or ?bool15 ?bool12 ?bool15))) ?bool15))
(check-sat)


-- iteration 754 --
(declare-fun f0 (Float16 Float32 Float32) Float128)
(declare-fun p0 (Float32 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11101 #b0111100001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10111011 #b01000011101100010111101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float8) ?float2 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float4 ((_ to_fp 5 11) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RNE ?float9) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RTP ?float4) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13))
(check-sat)


-- iteration 755 --
(declare-fun f0 (Float16 Float32 Float128) Float32)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTN ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float6 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 8 24) RTZ ?float3) ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float6) ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float9) ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float10)))
; FINAL ASSERT
(assert (or (and ?bool12 (and (and ?bool11)) ?bool14)))
(check-sat)


-- iteration 756 --
(declare-fun f0 (Float64 Float16 Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11110000 #b11010111100001111010110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 5 11) RNE ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float3 ?float2 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RNE ?float4) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float2 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float8))))
; FINAL ASSERT
(assert (or ?bool11 (or (or ?bool11) ?bool14) ?bool13))
(check-sat)


-- iteration 757 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 5 11) RTP ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float4 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ?float2 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float7 ((_ to_fp 5 11) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or (and ?bool11 (or (or ?bool15 ?bool11) ?bool15))))
(check-sat)


-- iteration 758 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ?float4 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 5 11) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float9) ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float10) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RTP ?float2))))
; FINAL ASSERT
(assert (or ?bool15 (and (or (or ?bool15) (or ?bool15 ?bool11 ?bool13)) ?bool14)))
(check-sat)


-- iteration 759 --
(declare-fun f0 (Float64 Float64 Float32) Float64)
(declare-fun p0 (Float64 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000010 #b00110011011001100011010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTP ?float4 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float5 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float8 ((_ to_fp 11 53) RTN ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 760 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01100101 #b01110110111000101010101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 11 53) RTP ?float2) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ?float2 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float2) ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float10)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 761 --
(declare-fun f0 (Float128 Float32 Float64) Float16)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00001000 #b11111111010011101110001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10001010 #b11011101011001111010010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ((_ to_fp 15 113) RTZ ?float2) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTN ?float5 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float8 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float2) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float8) ?float10 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and (and (and ?bool15 (and ?bool13 ?bool14 ?bool14)) ?bool12 (and (or ?bool11))) ?bool15))
(check-sat)


-- iteration 762 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RNE ?float3 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float4 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 5 11) RNE ?float6))))
; FINAL ASSERT
(assert (and (or (or (and ?bool14 ?bool15) (and ?bool11 ?bool14) (and ?bool11 ?bool11 ?bool14))) (or (or ?bool15) (or ?bool11 (or ?bool11 ?bool13) ?bool13)) (and ?bool14)))
(check-sat)


-- iteration 763 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float6 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float6) ?float6 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 5 11) RTN ?float3) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float7 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12))
(check-sat)


-- iteration 764 --
(declare-fun f0 (Float64 Float32 Float16) Float64)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10101 #b0010110111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10001100001 #b0001010000100010101001010100101001101010011110100000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float6 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ((_ to_fp 5 11) RTP ?float10) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RNE ?float4) ?float5)))
; FINAL ASSERT
(assert (or (and (or (or ?bool14 ?bool12)) ?bool11) ?bool13 (or (and ?bool15) ?bool15)))
(check-sat)


-- iteration 765 --
(declare-fun f0 (Float32 Float16 Float16) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float4 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float7 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 5 11) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RNE ?float3) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool13 ?bool12)))
(check-sat)


-- iteration 766 --
(declare-fun f0 (Float128 Float16 Float128) Float32)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTN ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ((_ to_fp 11 53) RNE ?float4) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 5 11) RTP ?float2) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float5 ((_ to_fp 11 53) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12))
(check-sat)


-- iteration 767 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10000010 #b01011100001001011110101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01100100 #b11111010011001010110000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float2) ?float5)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 768 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b111111111110011 #b1110100100000001010110101010011001000000100000110010010000100100001111101001100011101100001110101001100010000010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTZ ?float9) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15 (or (and ?bool11 ?bool11) ?bool12)))
(check-sat)


-- iteration 769 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01011000 #b11100011101100010000010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float5))))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool14 ?bool14 ?bool14) (or (or ?bool15 (and ?bool15 ?bool13) (or ?bool15 ?bool11 ?bool15)) (or (and ?bool11) (and ?bool15 ?bool15) ?bool13))))
(check-sat)


-- iteration 770 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float6 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool12 (and ?bool14 (or ?bool13) (or ?bool12 ?bool13))) ?bool13))
(check-sat)


-- iteration 771 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float4 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTN ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool14 (and ?bool11 (and ?bool15 ?bool12)) (and ?bool14 (or (and ?bool14 ?bool15) ?bool14 (or ?bool12 ?bool15 ?bool13)))))
(check-sat)


-- iteration 772 --
(declare-fun f0 (Float16 Float128 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10011 #b0110000110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTP ((_ to_fp 5 11) RTN ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float7))))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 773 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01010000 #b01011011010100011110010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTZ ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 8 24) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 774 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ?float5 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float7 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float3) ?float8)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 775 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float4) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float6) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 8 24) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float6) ?float2)))
; FINAL ASSERT
(assert (or ?bool11 ?bool11))
(check-sat)


-- iteration 776 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000001100111101 #b1000101100100110110111011111000101111010000100110010111001001110000011010000101001111011110011010000010111011011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float3 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ((_ to_fp 11 53) RTZ ?float7) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ((_ to_fp 11 53) RTN ?float5) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float10 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ((_ to_fp 15 113) RTZ ?float4))))
; FINAL ASSERT
(assert (or (or ?bool15 (or ?bool12) ?bool14) (and (and ?bool14) (and (or ?bool11 ?bool13 ?bool14))) ?bool11))
(check-sat)


-- iteration 777 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float8) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and (or ?bool14)))
(check-sat)


-- iteration 778 --
(declare-fun f0 (Float64 Float16 Float128) Float32)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RNE ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 11 53) RTZ ?float3) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float2) ?float6 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTN ?float9 ((_ to_fp 8 24) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or (and ?bool13 (and (and ?bool15 ?bool13 ?bool13) ?bool12) ?bool11) ?bool14))
(check-sat)


-- iteration 779 --
(declare-fun f0 (Float16 Float32 Float16) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and (and (and ?bool15 (and ?bool13 ?bool14 ?bool13)) ?bool13 ?bool15)))
(check-sat)


-- iteration 780 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10110001000 #b1001010001010001100111101111101001111011010000010011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float5 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float8) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (and ?bool15)))
(check-sat)


-- iteration 781 --
(declare-fun f0 (Float16 Float128 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float4 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 11 53) RTP ?float2) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 15 113) RTZ ?float2) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float7 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool15 ?bool15)))
(check-sat)


-- iteration 782 --
(declare-fun f0 (Float128 Float64 Float64) Float64)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float4 ((_ to_fp 11 53) RTZ ?float4) ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float8 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 8 24) RTN ?float7) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and (and ?bool15 ?bool12 (and (or ?bool11)))))
(check-sat)


-- iteration 783 --
(declare-fun f0 (Float128 Float32 Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float6) ?float5 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ?float4)))
; FINAL ASSERT
(assert (and ?bool14 ?bool15 (and ?bool14)))
(check-sat)


-- iteration 784 --
(declare-fun f0 (Float32 Float32 Float64) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01111010101 #b0100011001001110001111111110110100000101001000000100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 15 113) RTN ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float7 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 8 24) RTZ ?float2) ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTN ?float6) ?float7)))
; FINAL ASSERT
(assert (or (and (and ?bool14 ?bool12) (or (and ?bool12 ?bool15))) ?bool13 (or ?bool14 ?bool12 ?bool11)))
(check-sat)


-- iteration 785 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float4) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 11 53) RTN ?float6) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 786 --
(declare-fun f0 (Float32 Float64 Float32) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 8 24) RNE ?float2) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTZ ?float2 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float3 ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 8 24) RTZ ?float2) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RTZ ?float9) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float4)))
; FINAL ASSERT
(assert (or ?bool15 (or (and ?bool13) (and ?bool11 (and ?bool13 ?bool13 ?bool15))) (or (and (and ?bool13 ?bool15) (and ?bool15 ?bool14)) (and (and ?bool15 ?bool11 ?bool13) ?bool15 ?bool12))))
(check-sat)


-- iteration 787 --
(declare-fun f0 (Float64 Float32 Float16) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float4 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ?float6 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float6) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float6) ?float4 ((_ to_fp 5 11) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RNE ?float7) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 8 24) RTN ?float5))))
; FINAL ASSERT
(assert (or ?bool15 (and (or ?bool12 ?bool11))))
(check-sat)


-- iteration 788 --
(declare-fun f0 (Float64 Float128 Float16) Float32)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b011110110010011 #b0001011111001010111011010110101000010110000001110000010001110011010110010100100000111111001101000101010011101101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float4 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float5 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RNE ?float7 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float2 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ((_ to_fp 11 53) RTN ?float9))))
; FINAL ASSERT
(assert (and (and ?bool13 (and (and ?bool13 ?bool11))) (or ?bool11 (or ?bool11 ?bool13 ?bool14)) ?bool15))
(check-sat)


-- iteration 789 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float3 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RNE ?float4) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RNE ?float10) ?float9)))
; FINAL ASSERT
(assert (and ?bool15 ?bool13))
(check-sat)


-- iteration 790 --
(declare-fun f0 (Float128 Float32 Float32) Float64)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RNE ?float5) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 15 113) RNE ?float7) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float4 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ?float4)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14 ?bool12))
(check-sat)


-- iteration 791 --
(declare-fun f0 (Float32 Float32 Float64) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01101 #b1110110100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTP ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTN ?float8) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float6)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool14 (and ?bool13)) ?bool11 (and ?bool12 ?bool12)))
(check-sat)


-- iteration 792 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 5 11) RNE ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float10) ((_ to_fp 5 11) RTN ?float2))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 793 --
(declare-fun f0 (Float64 Float128) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ((_ to_fp 11 53) RTN ?float4) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float6 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTP ?float4 ((_ to_fp 15 113) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float9))))
; FINAL ASSERT
(assert (or (and (or ?bool15 ?bool14 ?bool13) (or (or ?bool11 ?bool13 ?bool11) (or ?bool11 ?bool11 ?bool13)) (or (and ?bool15) ?bool13 ?bool15))))
(check-sat)


-- iteration 794 --
(declare-fun f0 (Float64 Float128 Float32) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float6 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 11 53) RTP ?float4) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float6 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 8 24) RTP ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float9 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float6) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 11 53) RTP ?float4))))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool12) ?bool11))
(check-sat)


-- iteration 795 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float3 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RTP ?float8) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or ?bool13 (or (or ?bool14 ?bool13)) ?bool14))
(check-sat)


-- iteration 796 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float128 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ((_ to_fp 11 53) RTN ?float3) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float6 ((_ to_fp 8 24) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or ?bool13 ?bool14))
(check-sat)


-- iteration 797 --
(declare-fun f0 (Float64 Float16 Float32) Float16)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10111110101 #b1010001000000101110010011011100000111101010001001101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ((_ to_fp 15 113) RTZ ?float8) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float6 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 11 53) RTN ?float4) ?float5)))
; FINAL ASSERT
(assert (and (or ?bool15) (or ?bool13 (and ?bool15 (and ?bool11 ?bool12 ?bool11)))))
(check-sat)


-- iteration 798 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float6 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float7 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (and ?bool11 (and (or (and ?bool15 ?bool15)))))
(check-sat)


-- iteration 799 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float5 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RNE ?float6) ?float2)))
; FINAL ASSERT
(assert (or ?bool12 (and (and (or ?bool12) (and ?bool15 ?bool14)) (or (and ?bool14 ?bool13 ?bool11))) ?bool14))
(check-sat)


-- iteration 800 --
(declare-fun f0 (Float32 Float16 Float16) Float128)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01010010 #b00111000011010000100010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float5 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RTZ ?float3) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ((_ to_fp 11 53) RTP ?float7) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float4 ((_ to_fp 8 24) RNE ?float2))))
; FINAL ASSERT
(assert (or ?bool13 (or ?bool12 ?bool14)))
(check-sat)


-- iteration 801 --
(declare-fun f0 (Float32 Float16 Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float2 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RTZ ?float5) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float6 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool11 ?bool11))
(check-sat)


-- iteration 802 --
(declare-fun f0 (Float32 Float16) Float16)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ?float4 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTP ?float6 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float4 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float3) ?float6 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ?float5 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (and ?bool12 ?bool11))
(check-sat)


-- iteration 803 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12 ?bool15))
(check-sat)


-- iteration 804 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTN ?float5 ((_ to_fp 5 11) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTZ ?float5) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (or ?bool13)))
(check-sat)


-- iteration 805 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float4 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float8) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float6) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (or (or (and (or ?bool15) (and ?bool12)) ?bool11 (or ?bool13)) ?bool13 ?bool13))
(check-sat)


-- iteration 806 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ((_ to_fp 5 11) RTZ ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float3 ((_ to_fp 5 11) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTZ ?float2) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float7 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11))
(check-sat)


-- iteration 807 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ?float5 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTP ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTP ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTP ?float3) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float9) ?float8)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 808 --
(declare-fun f0 (Float128 Float128 Float32) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTN ?float2) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTP ?float6))))
; FINAL ASSERT
(assert (or (and ?bool14 (and ?bool12)) ?bool14))
(check-sat)


-- iteration 809 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float16 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float4 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float3 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ?float7 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float9 ((_ to_fp 8 24) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9) ?float10 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float2) ?float4 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 5 11) RTZ ?float7))))
; FINAL ASSERT
(assert (or (or ?bool11)))
(check-sat)


-- iteration 810 --
(declare-fun f0 (Float32 Float32 Float128) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b001001010011001 #b1110110011101011001100010100101111110011001101000110111110000000100000111110110100001111110011010101101110010111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 15 113) RTP ?float2) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ?float4 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RTZ ?float9) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 8 24) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTZ ?float4) ?float2)))
; FINAL ASSERT
(assert (and (or ?bool11) ?bool15))
(check-sat)


-- iteration 811 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00100 #b1100110110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float6 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float2 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float10)))
; FINAL ASSERT
(assert (and ?bool14 (and ?bool12 (and ?bool15 ?bool11) (and ?bool14))))
(check-sat)


-- iteration 812 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float5) ?float6 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTN ?float4) ?float7)))
; FINAL ASSERT
(assert (and (and (and (or ?bool12 ?bool11 ?bool13)) (or ?bool14 ?bool15 ?bool15) ?bool12)))
(check-sat)


-- iteration 813 --
(declare-fun f0 (Float64 Float64 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 5 11) RTZ ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 15 113) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTP ?float10) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTZ ?float7) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float5))))
; FINAL ASSERT
(assert (and (and (or (or ?bool11) (and ?bool15 ?bool15)) (and (or ?bool13 ?bool13 ?bool13))) ?bool14 (or (and (and ?bool15) (or ?bool11 ?bool14) (and ?bool14 ?bool15)) ?bool11)))
(check-sat)


-- iteration 814 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01010 #b1110011011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float5) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float8 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTP ?float9) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RNE ?float2) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ((_ to_fp 15 113) RTP ?float5))))
; FINAL ASSERT
(assert (and (and ?bool11) (and ?bool13 ?bool11 ?bool14)))
(check-sat)


-- iteration 815 --
(declare-fun f0 (Float16 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float5) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float4 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float4 ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTP ?float3) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and ?bool13 ?bool13))
(check-sat)


-- iteration 816 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ((_ to_fp 5 11) RTN ?float6) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float6) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float9 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 8 24) RTP ?float7) ?float6)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 817 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11001 #b1111101010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float2 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ?float3 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ?float3 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTN ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float9) ?float7 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 15 113) RTP ?float9) ?float4)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 818 --
(declare-fun f0 (Float32 Float128 Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RTP ?float3) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float7 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTN ?float7 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ((_ to_fp 5 11) RTN ?float5) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ?float6)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool13) ?bool15))
(check-sat)


-- iteration 819 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTN ?float3) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float6) ?float2 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ((_ to_fp 8 24) RNE ?float7))))
; FINAL ASSERT
(assert (or ?bool13 ?bool14))
(check-sat)


-- iteration 820 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTN ?float3) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 11 53) RTP ?float8) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 15 113) RTZ ?float5) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or ?bool11 (and (and ?bool11 ?bool15 ?bool12) (and ?bool11 (or ?bool11 ?bool13 ?bool15) (and ?bool13 ?bool15))) ?bool14))
(check-sat)


-- iteration 821 --
(declare-fun f0 (Float16 Float32 Float64) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01110101 #b01000100010100001000101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01100010 #b11010001010011000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float3 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float6 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 8 24) RTZ ?float2) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (and ?bool15 ?bool11 (or (or (and ?bool11) ?bool13 ?bool13) ?bool12)))
(check-sat)


-- iteration 822 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTZ ?float6) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float4 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float8) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or (or ?bool13 (and ?bool15 (or ?bool12 ?bool15 ?bool14) (and ?bool15 ?bool13 ?bool12)))))
(check-sat)


-- iteration 823 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RNE ?float5) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ?float5 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float6 ((_ to_fp 5 11) RTP ?float9))))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool12 (and ?bool13)) ?bool11))
(check-sat)


-- iteration 824 --
(declare-fun f0 (Float32 Float16 Float128) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100000011000110 #b0110010001010110010011101100010111101010011101010001000100010111000011101011100100010101011110110000100010101100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float7 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 15 113) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 15 113) RTP ?float5) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and (and (or ?bool15))))
(check-sat)


-- iteration 825 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ?float5 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ?float9 ((_ to_fp 15 113) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float4 ((_ to_fp 11 53) RTP ?float9) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or (or (or ?bool11 (or ?bool13 ?bool14 ?bool13)) ?bool12 ?bool11) ?bool12 ?bool12))
(check-sat)


-- iteration 826 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10001011 #b01011101010000011011111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float5) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float3 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 8 24) RTP ?float7) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 15 113) RTN ?float10) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float8)))
; FINAL ASSERT
(assert (or ?bool12 ?bool11))
(check-sat)


-- iteration 827 --
(declare-fun f0 (Float32 Float32) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ?float3 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTN ((_ to_fp 15 113) RTZ ?float3) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTP ?float10) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 11 53) RTP ?float7) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float5) ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and ?bool11 (and (or ?bool11 (and ?bool13 ?bool13 ?bool14)) ?bool12 (and ?bool14 (or ?bool13))) (or (and ?bool11 (or ?bool13 ?bool12) (or ?bool11 ?bool14)) ?bool11 ?bool12)))
(check-sat)


-- iteration 828 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTN ?float2 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ((_ to_fp 15 113) RTP ?float5))))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool14 (or (or ?bool15 ?bool15 ?bool15) (or ?bool11)))))
(check-sat)


-- iteration 829 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ?float3 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float3 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float3 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float10)))
; FINAL ASSERT
(assert (or (or ?bool13) (or ?bool11 (or (or ?bool14 ?bool11 ?bool12) ?bool13))))
(check-sat)


-- iteration 830 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00101000 #b11111101011101001010000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 8 24) RNE ?float6))))
; FINAL ASSERT
(assert (or (and (or (and ?bool12 ?bool15 ?bool12)) ?bool11 (and ?bool12 (and ?bool12 ?bool11) ?bool14)) (and ?bool15) ?bool12))
(check-sat)


-- iteration 831 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00101100010 #b0000000000000110011001110000000101100110000001100101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float3 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 5 11) RTP ?float2) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ((_ to_fp 5 11) RTP ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float6)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool13 ?bool14)))
(check-sat)


-- iteration 832 --
(declare-fun f0 (Float16 Float128 Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTP ?float4) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float5 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float8 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RNE ?float2) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool11)))
(check-sat)


-- iteration 833 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b111000110000011 #b1001000010100001101110101010010101110001110110110010010001000011011001010011111011110111101110101011011101111101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float6 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTN ?float3 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float3 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float2 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 834 --
(declare-fun f0 (Float32 Float64 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01111 #b0000011011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2) ?float6 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 11 53) RTN ?float7) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float5)))
; FINAL ASSERT
(assert (and ?bool14 ?bool13))
(check-sat)


-- iteration 835 --
(declare-fun f0 (Float32 Float128 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000100110000000 #b1011000011000001001111101100011111111001100000100101110000001101010111010010101110000001000011101001100101110101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 11 53) RTN ?float4) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RNE ?float4) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool14 ?bool12)))
(check-sat)


-- iteration 836 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101001101001000 #b0000011110011100110000011111001101001101100001101101101000011110110101011011011000001111100011000000011010110000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 15 113) RNE ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ((_ to_fp 15 113) RTN ?float3) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ?float9 ((_ to_fp 11 53) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RTN ?float6) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and (and ?bool13)))
(check-sat)


-- iteration 837 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000110000110110 #b1100011011110010011110010001101000010000101000110011100101111110011000011110010010101111100000000100010010101110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ((_ to_fp 11 53) RTN ?float6) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool15 (and ?bool12)))
(check-sat)


-- iteration 838 --
(declare-fun f0 (Float128 Float16 Float32) Float16)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RTP ?float4) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float5 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 5 11) RNE ?float7) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float5) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RNE ?float2) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (or ?bool12 (and ?bool13 (and ?bool12 ?bool14 ?bool13) (or ?bool12)) (or ?bool12 (or ?bool15 ?bool13)))))
(check-sat)


-- iteration 839 --
(declare-fun f0 (Float16 Float16 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float3 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float9))))
; FINAL ASSERT
(assert (and (and ?bool15 (or (and ?bool13 ?bool12)))))
(check-sat)


-- iteration 840 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b111111001001100 #b0010101000011001100110101011011000110011111101111101110001110100001000100111111101001100100001100110111010010011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float3 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float5 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (and (and ?bool12)))
(check-sat)


-- iteration 841 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 11 53) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ?float9)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 842 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float6 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float5 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTP ?float3) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ?float10)))
; FINAL ASSERT
(assert (or ?bool13 (and (or ?bool14 ?bool15) (and ?bool15))))
(check-sat)


-- iteration 843 --
(declare-fun f0 (Float128 Float128) Float32)
(declare-fun p0 (Float16 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 5 11) RTN ?float5) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 15 113) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 11 53) RTZ ?float4) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTZ ?float5) ?float3)))
; FINAL ASSERT
(assert (and (and ?bool11) ?bool14))
(check-sat)


-- iteration 844 --
(declare-fun f0 (Float32 Float32 Float16) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float2 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTZ ?float3 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 8 24) RTN ?float2))))
; FINAL ASSERT
(assert (and (or ?bool12 (or ?bool14 (or ?bool13))) ?bool12 (and ?bool15 (and (and ?bool12 ?bool13) ?bool14))))
(check-sat)


-- iteration 845 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10111110101 #b0000111001010000110000100010101110110101100101000111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ?float2 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float9) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool15 (or (and (and ?bool12) ?bool14))))
(check-sat)


-- iteration 846 --
(declare-fun f0 (Float64 Float128 Float16) Float32)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b01111 #b1010001001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ?float3 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ((_ to_fp 11 53) RTN ?float8) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float3) ?float7 ((_ to_fp 5 11) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 11 53) RTZ ?float6) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool14) ?bool11 ?bool11))
(check-sat)


-- iteration 847 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float2 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RTP ?float10) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 848 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01110000001 #b0110111010100111110000100100010010000110001101001001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ?float6 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float4 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (and (and (and (or ?bool13 ?bool15) ?bool11)) ?bool11))
(check-sat)


-- iteration 849 --
(declare-fun f0 (Float32 Float16 Float64) Float16)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11011111111 #b1000000010110000101110001100100011111110110000011011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RTP ?float2) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTN ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RTN ?float6) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 15 113) RTZ ?float8) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTN ?float6) ?float9)))
; FINAL ASSERT
(assert (and (or (and ?bool12 ?bool13)) ?bool13 ?bool13))
(check-sat)


-- iteration 850 --
(declare-fun f0 (Float32 Float16 Float128) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ?float5 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 11 53) RTP ?float8) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RTZ ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float9 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (and ?bool12 ?bool15 (and ?bool14)))
(check-sat)


-- iteration 851 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 15 113) RTZ ?float4) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTN ?float3 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ((_ to_fp 8 24) RTP ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and (or (or ?bool15 (and ?bool12 ?bool12))) (or (or ?bool14 ?bool11) ?bool11) (or (and ?bool12 ?bool14 ?bool14))))
(check-sat)


-- iteration 852 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTP ?float4 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float2 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float3 ?float4)))
; FINAL ASSERT
(assert (or (or ?bool11 (and ?bool12) (and ?bool14 ?bool14)) (or (or (and ?bool12 ?bool12 ?bool15) ?bool12) (and ?bool13)) ?bool14))
(check-sat)


-- iteration 853 --
(declare-fun f0 (Float128 Float32 Float16) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11101100101 #b1100011000000011011110000110011101001111101100110100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTN ?float8 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ?float2)))
; FINAL ASSERT
(assert (or (or (or ?bool12 (or ?bool15 ?bool12 ?bool15) (or ?bool11 ?bool13)) ?bool15)))
(check-sat)


-- iteration 854 --
(declare-fun f0 (Float128 Float32 Float64) Float128)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ?float6 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 8 24) RTP ?float5))))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool11)))
(check-sat)


-- iteration 855 --
(declare-fun f0 (Float32 Float64 Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b100110100100110 #b0110101010011101001111001101100101110110101011001011100010010101110100000110001101101100110010111111101101101110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 11 53) RTZ ?float3) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float5 ((_ to_fp 15 113) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool11 ?bool14) ?bool12))
(check-sat)


-- iteration 856 --
(declare-fun f0 (Float16 Float128 Float16) Float128)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTP ?float3 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (or ?bool11 ?bool15 ?bool13))
(check-sat)


-- iteration 857 --
(declare-fun f0 (Float16 Float64 Float32) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RTZ ?float5) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ((_ to_fp 11 53) RNE ?float2) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 8 24) RTN ?float4) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or ?bool15 (and (or (or ?bool14 ?bool12 ?bool15) ?bool12 ?bool12) ?bool11 ?bool15) (and ?bool12)))
(check-sat)


-- iteration 858 --
(declare-fun f0 (Float64 Float128 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float2 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float2 ((_ to_fp 5 11) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float4))))
; FINAL ASSERT
(assert (and (and (or ?bool15 ?bool15 ?bool13) (or (and ?bool13 ?bool14 ?bool13) (and ?bool14 ?bool15))) (or (or ?bool12 (and ?bool13 ?bool11 ?bool12))) ?bool11))
(check-sat)


-- iteration 859 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float2 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float7) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTN ?float3 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 11 53) RTP ?float8) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool14) (and ?bool11 ?bool14 ?bool13)))
(check-sat)


-- iteration 860 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float4 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float3 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTP ?float5) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float7)))
; FINAL ASSERT
(assert (or (and (and ?bool13) ?bool12) ?bool15 ?bool13))
(check-sat)


-- iteration 861 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b10001001 #b01101110010101000001000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ((_ to_fp 15 113) RTN ?float5) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTN ?float4 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float8 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTZ ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float2 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and (and (and (and ?bool15) (or ?bool15 ?bool13 ?bool15) (or ?bool11 ?bool12)))))
(check-sat)


-- iteration 862 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00110101000 #b0001110010001111111100100010100011000011000100100010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float5 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTN ?float6 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ((_ to_fp 15 113) RTN ?float3) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 5 11) RTZ ?float8))))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 (or (or (or ?bool13)))))
(check-sat)


-- iteration 863 --
(declare-fun f0 (Float64 Float32 Float128) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ((_ to_fp 11 53) RTZ ?float5) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float4 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float6 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float9 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float2 ((_ to_fp 11 53) RTP ?float10))))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool12 (or ?bool14 ?bool13 ?bool15) ?bool15) ?bool15))
(check-sat)


-- iteration 864 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11110010 #b11011010100010000110001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RNE ?float3 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float5 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float7 ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float8 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 11 53) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float3 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RTZ ?float10) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 8 24) RTP ?float2) ?float9)))
; FINAL ASSERT
(assert (or (or (or ?bool11 ?bool13 (or ?bool12 ?bool12)) ?bool14 ?bool14) ?bool14 (or (or ?bool11 (or ?bool15 ?bool12)))))
(check-sat)


-- iteration 865 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00110011110 #b0111100011001011111010011011011111100101110010101000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 11 53) RTN ?float6) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float8 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 8 24) RTP ?float8) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ((_ to_fp 11 53) RTP ?float10))))
; FINAL ASSERT
(assert (or (and (or ?bool13) (and ?bool12 (or ?bool13 ?bool11 ?bool12) (and ?bool12))) ?bool12 (or (and ?bool12 (or ?bool11)) ?bool15 (or (or ?bool11 ?bool15 ?bool12)))))
(check-sat)


-- iteration 866 --
(declare-fun f0 (Float16 Float16 Float16) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float2 ((_ to_fp 5 11) RTP ?float3) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and (and ?bool15 (and ?bool15))))
(check-sat)


-- iteration 867 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10001001 #b10110010100110011001011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01001101 #b10011110101111110011101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float4) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float2) ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float3) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ?float2 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and ?bool13 ?bool12))
(check-sat)


-- iteration 868 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float5 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float6 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ?float7 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ((_ to_fp 5 11) RTZ ?float2) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float4)))
; FINAL ASSERT
(assert (or ?bool15 ?bool12))
(check-sat)


-- iteration 869 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RNE ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float5 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ((_ to_fp 11 53) RTN ?float4))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 870 --
(declare-fun f0 (Float16 Float64 Float64) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float5 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 11 53) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RTP ?float7) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or (and (and (or ?bool15 ?bool12) (and ?bool12 ?bool11 ?bool11) ?bool15)) (or (and ?bool13) ?bool15) ?bool11))
(check-sat)


-- iteration 871 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float6 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTZ ?float4) ?float6)))
; FINAL ASSERT
(assert (and (and (or (or ?bool12)) ?bool14) (or (and ?bool14 ?bool13)) ?bool13))
(check-sat)


-- iteration 872 --
(declare-fun f0 (Float128 Float64 Float128) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b010011001100000 #b1000110110011010001001110100111011010100100101000010011100000111000100111110011101001111001001100100010101000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float6) ?float4 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ?float2 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 873 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11011010100 #b0010000111001000110010100110011011101100100000000110)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float3 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RTP ?float10))))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool11)))
(check-sat)


-- iteration 874 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10110001011 #b0000010111110011100110101100110010011010110110111001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ((_ to_fp 5 11) RTN ?float7) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float4 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float4 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (or (and (or ?bool11) ?bool15 ?bool11) (and ?bool14 (or ?bool12 (and ?bool13 ?bool11 ?bool15) ?bool11)) ?bool13))
(check-sat)


-- iteration 875 --
(declare-fun f0 (Float32 Float128) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00100011 #b11000010011000111011110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RNE ((_ to_fp 15 113) RTN ?float2) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float6 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float4) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or (or (or (or ?bool12 ?bool15) (and ?bool15) ?bool12) ?bool11) (or (or ?bool11 (or ?bool14 ?bool11)) (and ?bool12 (and ?bool14 ?bool14) (or ?bool11 ?bool12 ?bool12))) (and (or (and ?bool15) ?bool12))))
(check-sat)


-- iteration 876 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 8 24) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float6 ?float6)))
; FINAL ASSERT
(assert (or ?bool12 ?bool14 ?bool13))
(check-sat)


-- iteration 877 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ((_ to_fp 15 113) RNE ?float4) ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float3 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTP ?float4) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float10 ?float7)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 878 --
(declare-fun f0 (Float16 Float128 Float16) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b001001111001110 #b1111011001000110111101100010100101001011010001011100001111000010001100110111100000010010000100001111101100010000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float5 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RNE ?float8) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 8 24) RTN ?float5) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 15 113) RTZ ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float8 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float6)))
; FINAL ASSERT
(assert (or ?bool15 (and ?bool15) ?bool13))
(check-sat)


-- iteration 879 --
(declare-fun f0 (Float64 Float64 Float64) Float32)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b011110110110101 #b0101111000111110111011010010000100010100111101101100110110100011101000001000101011101100101011110001001011110001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float6 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTZ ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ?float6 ((_ to_fp 15 113) RTP ?float3))))
; FINAL ASSERT
(assert (and (and (and (and ?bool11 ?bool12) ?bool14) ?bool13) ?bool11 ?bool11))
(check-sat)


-- iteration 880 --
(declare-fun f0 (Float32 Float128) Float64)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00010 #b1110010110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float2 ((_ to_fp 5 11) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 8 24) RTN ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float6 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ?float5)))
; FINAL ASSERT
(assert (or (and ?bool14 ?bool14) ?bool13 ?bool12))
(check-sat)


-- iteration 881 --
(declare-fun f0 (Float128 Float16 Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTN ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float3 ?float5 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 5 11) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RNE ?float8) ?float10)))
; FINAL ASSERT
(assert (and (or (or ?bool13 ?bool15) (or ?bool14) (or (and ?bool14) (and ?bool14)))))
(check-sat)


-- iteration 882 --
(declare-fun f0 (Float16 Float128) Float32)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float4 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ?float6 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float9) ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 8 24) RTN ?float4))))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 ?bool12))
(check-sat)


-- iteration 883 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTZ ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float3 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 15 113) RTZ ?float2) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float2 ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTN ?float2) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ((_ to_fp 5 11) RTN ?float5))))
; FINAL ASSERT
(assert (and (or (and ?bool11 (and ?bool11 ?bool14 ?bool15))) (and (or ?bool12 (and ?bool14) ?bool11) ?bool14 ?bool11)))
(check-sat)


-- iteration 884 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11001 #b0010000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 11 53) RNE ?float5) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTP ?float8) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float3)))
; FINAL ASSERT
(assert (and (and ?bool12 (and ?bool13 (and ?bool11 ?bool13 ?bool14))) ?bool11))
(check-sat)


-- iteration 885 --
(declare-fun f0 (Float16 Float64 Float16) Float16)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float6 ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float2 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 15 113) RTP ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float9) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float10) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and (or ?bool13) (and (or (or ?bool12)) (and (or ?bool12 ?bool15 ?bool11) (and ?bool15) ?bool11) (and ?bool13))))
(check-sat)


-- iteration 886 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00010101 #b00111010010011001001110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float6 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float3 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 5 11) RTZ ?float6) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTZ ?float4) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float2)))
; FINAL ASSERT
(assert (or ?bool12 ?bool13))
(check-sat)


-- iteration 887 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RNE ?float5) ?float4)))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool11 ?bool12 (or ?bool15))))
(check-sat)


-- iteration 888 --
(declare-fun f0 (Float32 Float32 Float128) Float64)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTN ?float4 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2) ?float4 ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTP ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTZ ?float4) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float10) ((_ to_fp 15 113) RNE ?float10) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (or ?bool13 ?bool14 ?bool14))
(check-sat)


-- iteration 889 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110100000101000 #b0100111001101101111111011111000000110111100001110000000110110110101111001101110111011100001111101100111011000111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RNE ?float5) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RNE ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTP ?float3 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (or (or ?bool14) ?bool11))
(check-sat)


-- iteration 890 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float3 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RNE ?float2 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float10 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 11 53) RNE ?float8))))
; FINAL ASSERT
(assert (and ?bool11 ?bool12 ?bool14))
(check-sat)


-- iteration 891 --
(declare-fun f0 (Float64 Float128) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10100111011 #b0011110000111101110010101011000011100111000011111101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 5 11) RTP ?float3) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ((_ to_fp 11 53) RTN ?float5) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 5 11) RTZ ?float5) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float5 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTZ ?float9) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool15 (or (or ?bool12 ?bool14 ?bool12) ?bool11 ?bool12)) (or (and ?bool12) ?bool14 ?bool15)))
(check-sat)


-- iteration 892 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ((_ to_fp 11 53) RTP ?float6) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTP ((_ to_fp 8 24) RNE ?float4) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float8 ((_ to_fp 8 24) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float10 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (or (and (or ?bool13) ?bool12 ?bool12))))
(check-sat)


-- iteration 893 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float6 ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float7 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RNE ?float4 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 11 53) RTN ?float8) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 8 24) RNE ?float6) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float5)))
; FINAL ASSERT
(assert (and (or (and (and ?bool15) (and ?bool15) ?bool15) (and ?bool12 (and ?bool12 ?bool13 ?bool14)) (and (or ?bool14) (or ?bool14 ?bool13) (or ?bool14))) (or (and (or ?bool14 ?bool11) (and ?bool12) ?bool12))))
(check-sat)


-- iteration 894 --
(declare-fun f0 (Float64 Float64 Float128) Float128)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RNE ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float5 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float7 ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float5)))
; FINAL ASSERT
(assert (or (or (and ?bool13 ?bool15 (and ?bool12 ?bool13))) (or (or ?bool14 ?bool14 (and ?bool13))) ?bool12))
(check-sat)


-- iteration 895 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float2 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTP ?float2 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float4 ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float7 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float4) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float4)))
; FINAL ASSERT
(assert (or (or ?bool11 (and ?bool11 (and ?bool12 ?bool15) ?bool12) ?bool11) (or ?bool15 ?bool11 ?bool14) (and (and ?bool14))))
(check-sat)


-- iteration 896 --
(declare-fun f0 (Float32 Float64 Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 11 53) RNE ?float3) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RNE ?float6) ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ((_ to_fp 5 11) RNE ?float6) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (and ?bool11 ?bool13))
(check-sat)


-- iteration 897 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10001 #b0100101100)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTZ ?float4) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 5 11) RNE ?float7) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTP ?float6) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and (and ?bool15) (and (and (and ?bool13)) (or (or ?bool13 ?bool11) (or ?bool14)) (or (and ?bool14)))))
(check-sat)


-- iteration 898 --
(declare-fun f0 (Float128 Float16 Float128) Float32)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float2 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTP ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float3 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float4 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float7)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 899 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01111 #b0010101000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ((_ to_fp 15 113) RTZ ?float3) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float4 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RNE ?float5) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RTP ?float3 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float2 ((_ to_fp 8 24) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ((_ to_fp 11 53) RTZ ?float2))))
; FINAL ASSERT
(assert (or (or (or (and ?bool15)) (and ?bool13))))
(check-sat)


-- iteration 900 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTP ?float3 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float7 ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3 ((_ to_fp 15 113) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14))
(check-sat)


-- iteration 901 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float6) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 5 11) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float7 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RTZ ?float9) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ((_ to_fp 5 11) RTZ ?float10))))
; FINAL ASSERT
(assert (and (or ?bool12)))
(check-sat)


-- iteration 902 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTZ ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 5 11) RTN ?float10) ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or ?bool15 ?bool14 (and (or ?bool11) ?bool15)))
(check-sat)


-- iteration 903 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float4 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float4 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float3 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RNE ?float10) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 904 --
(declare-fun f0 (Float32 Float16 Float32) Float64)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11011111011 #b1011011000110011110001111111100001001101011000101001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float2 ?float5 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float2 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 11 53) RTP ?float10) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTN ?float5) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 8 24) RTP ?float9))))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool14)))
(check-sat)


-- iteration 905 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ?float5 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTP ?float8) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 906 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01011000 #b10010011111101001011100)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float7 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTN ?float8) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTZ ?float4) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (or (or (or ?bool12) ?bool11 ?bool13) (or (or ?bool13) (and ?bool12) ?bool11) (and ?bool15 ?bool14 ?bool15)) (and ?bool14 (and (or ?bool14 ?bool11)) (or ?bool14 ?bool15))))
(check-sat)


-- iteration 907 --
(declare-fun f0 (Float64 Float128 Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ?float6 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ?float8 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTN ?float2) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float9))))
; FINAL ASSERT
(assert (and ?bool14 (and (or (and ?bool12 ?bool11 ?bool13) (or ?bool11 ?bool14) ?bool15) (and (or ?bool14 ?bool14 ?bool15) ?bool15 (or ?bool11 ?bool11)) (and ?bool12 (and ?bool13) ?bool13)) (or ?bool15 ?bool12)))
(check-sat)


-- iteration 908 --
(declare-fun f0 (Float16 Float64 Float16) Float32)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001011001100011 #b1100000101100111011110110111010111110000110100001001111100110010010011010111100000110001000000111110100111111000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ?float6 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float6 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RTN ?float3) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ((_ to_fp 15 113) RNE ?float8))))
; FINAL ASSERT
(assert (or (and (and (or ?bool15 ?bool14 ?bool13)) (and (or ?bool15 ?bool12 ?bool14) (or ?bool11 ?bool15)) (or (and ?bool11 ?bool12 ?bool12) ?bool12 ?bool11)) ?bool11 ?bool15))
(check-sat)


-- iteration 909 --
(declare-fun f0 (Float128 Float64) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00011 #b1001011011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTN ?float2 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float9)))
; FINAL ASSERT
(assert (or ?bool12 (or (and (or ?bool15 ?bool11))) (and (and ?bool12) (or (and ?bool13 ?bool11)))))
(check-sat)


-- iteration 910 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTN ?float3 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTZ ?float7) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ((_ to_fp 8 24) RTN ?float2))))
; FINAL ASSERT
(assert (and (or (and ?bool15 (or ?bool13 ?bool15 ?bool12)) (and (and ?bool15 ?bool15 ?bool15) (or ?bool11 ?bool14))) (and (and (and ?bool15) ?bool11 (and ?bool11 ?bool14)))))
(check-sat)


-- iteration 911 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11110110 #b00000001000010010001101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ((_ to_fp 8 24) RTP ?float4) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float5 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ?float8)))
; FINAL ASSERT
(assert (or (or ?bool12)))
(check-sat)


-- iteration 912 --
(declare-fun f0 (Float16 Float32 Float16) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01101 #b0100111101)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ?float2 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float5) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 15 113) RTN ?float4) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (and ?bool12 (and (or ?bool15 ?bool13 ?bool15) (and ?bool13 ?bool13 ?bool14) (and ?bool13 ?bool12)) ?bool14) (and ?bool13 ?bool12 ?bool14)))
(check-sat)


-- iteration 913 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ((_ to_fp 15 113) RTN ?float3) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float8 ((_ to_fp 15 113) RTN ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTZ ?float4) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10)))
; FINAL ASSERT
(assert (or (or (or ?bool11)) (and ?bool12)))
(check-sat)


-- iteration 914 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b110011000110001 #b0011011011000100110011111011010110100011100100100110100010010110001110111001100010010000111110111111100000111101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTP ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ?float5)))
; FINAL ASSERT
(assert (and ?bool14 (and ?bool14)))
(check-sat)


-- iteration 915 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ((_ to_fp 15 113) RTZ ?float8) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float5 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float8)))
; FINAL ASSERT
(assert (and (or (or (and ?bool15 ?bool11) (and ?bool13 ?bool13))) (or (and ?bool14 ?bool14 (or ?bool12 ?bool15 ?bool14))) (or ?bool11 (or (or ?bool12 ?bool14) ?bool13) ?bool15)))
(check-sat)


-- iteration 916 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float32 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11010 #b0111001000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTP ((_ to_fp 11 53) RTP ?float5) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 11 53) RTP ?float4) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float8) ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 15 113) RTZ ?float7))))
; FINAL ASSERT
(assert (and ?bool14 (and (or (and ?bool11) ?bool11 (and ?bool12)) (or ?bool13 (and ?bool12 ?bool15))) ?bool15))
(check-sat)


-- iteration 917 --
(declare-fun f0 (Float64 Float128 Float64) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RNE ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ?float5 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float5 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float8) ((_ to_fp 11 53) RTN ?float9) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ((_ to_fp 8 24) RTN ?float4) ?float9)))
; FINAL ASSERT
(assert (or (or ?bool12) (and ?bool15)))
(check-sat)


-- iteration 918 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float5 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (and ?bool13 (or (or ?bool12) ?bool14) (or (or ?bool12 (and ?bool12 ?bool15 ?bool11)) ?bool13 (or (and ?bool14 ?bool12 ?bool15) (and ?bool13 ?bool11 ?bool12) (or ?bool11 ?bool13 ?bool11)))))
(check-sat)


-- iteration 919 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 8 24) RTN ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float6 ((_ to_fp 15 113) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RTZ ?float7) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float8 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (or ?bool14 ?bool15))
(check-sat)


-- iteration 920 --
(declare-fun f0 (Float128 Float16 Float32) Float64)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RNE ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTP ((_ to_fp 15 113) RTP ?float7) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float6 ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and ?bool13 ?bool13))
(check-sat)


-- iteration 921 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11110 #b0010100101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTN ?float5 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float7 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float8 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 8 24) RTN ?float6) ?float3)))
; FINAL ASSERT
(assert (and (and (or ?bool13 (and ?bool14 ?bool13) (or ?bool12)) ?bool11 (and (and ?bool11 ?bool14) (or ?bool12 ?bool15 ?bool15) (or ?bool15))) ?bool14))
(check-sat)


-- iteration 922 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTP ?float4 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float7 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 11 53) RTP ?float8) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (or ?bool12 (and (or (or ?bool11) (or ?bool11) ?bool13) (and ?bool13) ?bool12) (and (or ?bool14 ?bool12) ?bool14)))
(check-sat)


-- iteration 923 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float8 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTP ?float6) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (and (or (and ?bool12) ?bool12 (or ?bool14 ?bool12)) ?bool14)))
(check-sat)


-- iteration 924 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 8 24) RNE ?float3) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float6 ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float4 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTZ ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 5 11) RTN ?float10) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ?float7)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 925 --
(declare-fun f0 (Float128 Float32 Float128) Float64)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float4 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 5 11) RTZ ?float5) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float9)))
; FINAL ASSERT
(assert (or (and (and ?bool12 ?bool12)) (or (and (or ?bool13) ?bool13) (and (and ?bool14 ?bool11 ?bool11) ?bool14 (or ?bool12 ?bool14)) (and ?bool13 (and ?bool15 ?bool12 ?bool11))) ?bool12))
(check-sat)


-- iteration 926 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10010 #b0100001100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float3 ?float3)))
; FINAL ASSERT
(assert (and ?bool12 ?bool11))
(check-sat)


-- iteration 927 --
(declare-fun f0 (Float64 Float64 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float4) ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float4 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float4 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (or (and ?bool13 ?bool13 ?bool12)))
(check-sat)


-- iteration 928 --
(declare-fun f0 (Float32 Float64 Float64) Float64)
(declare-fun p0 (Float16 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00001111 #b11010001111011101001010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 15 113) RNE ?float3) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RTP ?float2 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float6 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float8 ((_ to_fp 8 24) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTP ?float6) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ?float10)))
; FINAL ASSERT
(assert (and (or (and (and ?bool12)) ?bool12 ?bool14) ?bool15))
(check-sat)


-- iteration 929 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01001 #b1111101011)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float4 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ?float6 ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ?float2 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (or ?bool15 ?bool12))
(check-sat)


-- iteration 930 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b100110111011001 #b0001010011001101111001001011011000110100110001111100011011101001100110010111100100011111100001100011011100001001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTZ ?float4 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ((_ to_fp 11 53) RNE ?float5) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 11 53) RNE ?float10) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float4)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool15 (or (and ?bool15) (or ?bool14) (or ?bool13 ?bool12))) ?bool11 ?bool11))
(check-sat)


-- iteration 931 --
(declare-fun f0 (Float64 Float128 Float16) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 932 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ?float6 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTZ ?float8) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float2 ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ((_ to_fp 8 24) RTZ ?float8))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 933 --
(declare-fun f0 (Float16 Float128 Float128) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ((_ to_fp 8 24) RTZ ?float6) ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float7 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RNE ?float10) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float2 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float10) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool15 ?bool14 (or ?bool14 ?bool11 (or ?bool12 ?bool13))) ?bool11))
(check-sat)


-- iteration 934 --
(declare-fun f0 (Float64 Float128 Float128) Float32)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00010011 #b11101000100110001111101)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ((_ to_fp 5 11) RTP ?float5) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float10) ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RTZ ?float9) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (or ?bool11 (or ?bool12 (and (and ?bool11) ?bool14) (and ?bool13))))
(check-sat)


-- iteration 935 --
(declare-fun f0 (Float64 Float32) Float32)
(declare-fun p0 (Float32 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 5 11) RTP ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float3 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (and (and (or ?bool14 ?bool13 ?bool12) ?bool13 (and ?bool12)) (and ?bool13 ?bool12))))
(check-sat)


-- iteration 936 --
(declare-fun f0 (Float64 Float64 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (or ?bool15 ?bool13))
(check-sat)


-- iteration 937 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTZ ?float7 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTN ?float8) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (or ?bool11 ?bool11 ?bool12))
(check-sat)


-- iteration 938 --
(declare-fun f0 (Float64 Float32 Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000010000011100 #b1011101000110101110000100001010100110100010000011101100100011100100101100101110011110101010111100111100111101010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float4 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float5 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ?float2 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 11 53) RTZ ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ((_ to_fp 15 113) RNE ?float10))))
; FINAL ASSERT
(assert (or (and (and ?bool12 ?bool12 ?bool15)) ?bool14 ?bool11))
(check-sat)


-- iteration 939 --
(declare-fun f0 (Float16 Float128) Float128)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float7 ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTP ?float5) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (or (and ?bool13 (or ?bool13 ?bool14) (and ?bool11 ?bool13 ?bool12))) ?bool15 (or ?bool14 (or (and ?bool13)))))
(check-sat)


-- iteration 940 --
(declare-fun f0 (Float128 Float16 Float32) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float3 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float3 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float3 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RTP ?float5) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 941 --
(declare-fun f0 (Float32 Float32 Float128) Float32)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00111001111 #b1011110010101010111110101001101011101110101001111100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTZ ?float2 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ?float4 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float5 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RNE ?float7) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 11 53) RTN ?float6) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or (or (and (and ?bool14 ?bool13) (or ?bool15 ?bool14 ?bool11))) (or ?bool14 ?bool15)))
(check-sat)


-- iteration 942 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b01011011 #b00011100100011100011100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float5 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool11))
(check-sat)


-- iteration 943 --
(declare-fun f0 (Float16 Float32 Float32) Float64)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float5 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float3 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 944 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00101010101 #b0000010101001110000000001000101001111100000000000010)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float2) ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float4 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float4 ((_ to_fp 11 53) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float9 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float3)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 945 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTN ?float4 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ((_ to_fp 5 11) RTN ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float3)))
; FINAL ASSERT
(assert (and ?bool13 ?bool11))
(check-sat)


-- iteration 946 --
(declare-fun f0 (Float32 Float16 Float128) Float128)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b111110110110101 #b0111111110101110110111110010100110010000110011100101011000101001011000000001001101011001101000000001011000111001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float5 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float3 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float5 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RNE ?float10) ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 11 53) RNE ?float2))))
; FINAL ASSERT
(assert (and (and ?bool13 (and ?bool12)) ?bool13))
(check-sat)


-- iteration 947 --
(declare-fun f0 (Float32 Float128 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float5 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTZ ?float4 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float8 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float4 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float2)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 948 --
(declare-fun f0 (Float64 Float64) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00111 #b0011001100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RNE ?float3 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RTN ?float3) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 15 113) RTZ ?float7) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 5 11) RTN ?float5) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (or (or (or (or ?bool12) ?bool12 (and ?bool14 ?bool12)) (or (or ?bool13 ?bool13 ?bool14)))))
(check-sat)


-- iteration 949 --
(declare-fun f0 (Float64 Float16 Float128) Float32)
(declare-fun p0 (Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ?float4 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float2 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ?float3 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTP ?float2 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTN ?float2) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float3)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool14 (and ?bool13 (and ?bool15 ?bool14)))))
(check-sat)


-- iteration 950 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float3 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ((_ to_fp 5 11) RTP ?float2) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (or (or (and ?bool14) ?bool15) ?bool14))
(check-sat)


-- iteration 951 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10111011010 #b0100100011101000010010011100101111111100111000001011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float4 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float6 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float6 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float5) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float8 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RNE ?float7) ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float8))))
; FINAL ASSERT
(assert (or (and (or ?bool13 (and ?bool11 ?bool13)))))
(check-sat)


-- iteration 952 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01010101011 #b0110111010010000000101111001100001111001001011000110)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float4 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float4 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10 ?float4)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 953 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b110011001111001 #b1100010000011111011011010010110011101001100000110010100010101100110001110100101000001001110000111110010110100001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ((_ to_fp 8 24) RTP ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float7 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RNE ?float3) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float6 ((_ to_fp 8 24) RTN ?float9))))
; FINAL ASSERT
(assert (and (or (and (or ?bool13 ?bool14 ?bool11) (and ?bool13)) (and ?bool11 (or ?bool13 ?bool14)) (or ?bool12 ?bool12)) (and (or ?bool14) (and ?bool12))))
(check-sat)


-- iteration 954 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01110 #b0001010110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTP ?float4) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float8 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ((_ to_fp 5 11) RTZ ?float4) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (and (and (or (or ?bool14) ?bool11) ?bool15 ?bool11)))
(check-sat)


-- iteration 955 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float3 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RNE ?float7) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 15 113) RTP ?float9) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float7) ((_ to_fp 15 113) RTN ?float7) ?float6)))
; FINAL ASSERT
(assert (or ?bool12 ?bool11 (and ?bool15 (and ?bool14))))
(check-sat)


-- iteration 956 --
(declare-fun f0 (Float32 Float32 Float128) Float64)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b01010000 #b11010100000000010101011)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00101100 #b10001010101111101011000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 8 24) RNE ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 15 113) RTN ?float6) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ?float5 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float5 ?float8 ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float10)))
; FINAL ASSERT
(assert (or ?bool13 ?bool14))
(check-sat)


-- iteration 957 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float3 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTZ ?float7 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float4 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float5 ((_ to_fp 8 24) RTP ?float10))))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 958 --
(declare-fun f0 (Float64 Float16 Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00010011100 #b1100001001101100101011100110100101100010111001101010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ?float3 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 5 11) RNE ?float3) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 959 --
(declare-fun f0 (Float64 Float32) Float16)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTZ ?float2) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float4 ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ?float5 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 8 24) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 15 113) RTP ?float8) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float3) ?float2 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (and (and (and ?bool15 ?bool15) (and ?bool12) (and ?bool13 ?bool14 ?bool14))) (and (or (or ?bool13)) (and ?bool15))))
(check-sat)


-- iteration 960 --
(declare-fun f0 (Float64 Float16) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTP ?float3 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ?float7 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15))
(check-sat)


-- iteration 961 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00111 #b1110101110)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ((_ to_fp 5 11) RNE ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float4) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float3 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float8 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float4)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15))
(check-sat)


-- iteration 962 --
(declare-fun f0 (Float16 Float64 Float128) Float16)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float4 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float6 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTN ?float3))))
; FINAL ASSERT
(assert (and (or (or (or ?bool12)) (or (and ?bool14) (or ?bool15))) (and ?bool15)))
(check-sat)


-- iteration 963 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float32 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 11 53) RNE ?float7) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float4) ?float8 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 8 24) RTP ?float8) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ((_ to_fp 11 53) RNE ?float4))))
; FINAL ASSERT
(assert (or ?bool14 ?bool14 ?bool15))
(check-sat)


-- iteration 964 --
(declare-fun f0 (Float32 Float16 Float32) Float64)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01010 #b0100100010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float3 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float3 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float9) ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float9) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ?float9)))
; FINAL ASSERT
(assert (or (and (and ?bool13 ?bool13))))
(check-sat)


-- iteration 965 --
(declare-fun f0 (Float32 Float32 Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ((_ to_fp 15 113) RNE ?float5) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 15 113) RTN ?float5))))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 966 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float128 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float4 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float6 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float6 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float3)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool14 (or (or ?bool14 ?bool14 ?bool11))) ?bool14))
(check-sat)


-- iteration 967 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11010 #b0010001000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01101 #b0001001101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RNE ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float9 ?float8)))
; FINAL ASSERT
(assert (or (or (and ?bool12))))
(check-sat)


-- iteration 968 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ((_ to_fp 11 53) RNE ?float7) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RTP ?float7) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or (or ?bool14 (or ?bool12 (and ?bool11 ?bool15))) (and ?bool15) ?bool13))
(check-sat)


-- iteration 969 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float64 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float5 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTP ((_ to_fp 15 113) RTP ?float6) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float8 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RTZ ?float4) ?float4)))
; FINAL ASSERT
(assert (and (and (and (or ?bool14 ?bool15)) (and (and ?bool13 ?bool15 ?bool12))) (or (or (and ?bool13 ?bool15) ?bool11))))
(check-sat)


-- iteration 970 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ((_ to_fp 11 53) RTZ ?float5) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (or (and (and ?bool11 (or ?bool12))) ?bool14))
(check-sat)


-- iteration 971 --
(declare-fun f0 (Float64 Float128 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 15 113) RTN ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float4 ((_ to_fp 15 113) RTZ ?float4) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTP ?float3) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTP ?float4) ?float6)))
; FINAL ASSERT
(assert (and ?bool12 ?bool11 (or (or ?bool13 ?bool15) (and (and ?bool12 ?bool15 ?bool13)) ?bool15)))
(check-sat)


-- iteration 972 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b010010011010000 #b0110101000110001001111110110001111101100111000010000111100111101011100000010000010101000011000100100001100010000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float5) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTN ?float6) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTP ?float4) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 15 113) RTZ ?float5))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 973 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float6 ((_ to_fp 5 11) RTZ ?float3))))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 974 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float3 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTP ((_ to_fp 11 53) RTP ?float3) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RTZ ?float7) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or (and ?bool15) (or ?bool13)))
(check-sat)


-- iteration 975 --
(declare-fun f0 (Float16 Float64 Float16) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float6 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float2 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTP ?float8) ?float3)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool11 ?bool13 ?bool11) ?bool14))
(check-sat)


-- iteration 976 --
(declare-fun f0 (Float128 Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10001 #b1010001111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 11 53) RTP ?float3) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float2 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTP ?float8) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTP ?float3) ?float6)))
; FINAL ASSERT
(assert (and (or ?bool15) ?bool14))
(check-sat)


-- iteration 977 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01110100 #b10110001011111001000010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float4 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float3 ((_ to_fp 11 53) RTZ ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RNE ?float4) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float9)))
; FINAL ASSERT
(assert (and (and (and ?bool13 ?bool11)) (or ?bool13 ?bool12 (or (or ?bool14) ?bool14 ?bool11)) (or ?bool11 ?bool13)))
(check-sat)


-- iteration 978 --
(declare-fun f0 (Float128 Float64 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b01111 #b0011101101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 11 53) RTP ?float2) ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 11 53) RTZ ?float3) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ?float5 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ((_ to_fp 11 53) RTN ?float9))))
; FINAL ASSERT
(assert (or ?bool11 ?bool13 ?bool11))
(check-sat)


-- iteration 979 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ?float4 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15 (and (and (or ?bool14) ?bool11 (and ?bool13 ?bool11)) (and (and ?bool12 ?bool15) ?bool15) ?bool13)))
(check-sat)


-- iteration 980 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float128 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11101 #b1010100010)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float4) ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or (or ?bool15)))
(check-sat)


-- iteration 981 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001011001011011 #b1000101111001001000101001101000011010110101011100001001110110000010100111001101101100001100000010100011110001010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float7 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or (or (and (or ?bool12 ?bool12 ?bool11)) (and (or ?bool15 ?bool13) ?bool15)) (and (and ?bool13 ?bool14 (or ?bool11 ?bool12)) ?bool11) (and ?bool11)))
(check-sat)


-- iteration 982 --
(declare-fun f0 (Float32 Float128 Float64) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10101001 #b01110001111100100101001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float6 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTN ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 8 24) RTZ ?float10) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 8 24) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (or (and (and ?bool15) ?bool13) ?bool15))
(check-sat)


-- iteration 983 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTP ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTN ?float6 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 15 113) RTP ?float4) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTP ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 5 11) RTZ ?float9) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool14 ?bool12))
(check-sat)


-- iteration 984 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00111101100 #b1111101010000111000110001001110000101110001100101101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float4 ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RNE ?float6) ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 985 --
(declare-fun f0 (Float64 Float64 Float64) Float128)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 5 11) RTZ ?float5) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ((_ to_fp 5 11) RTN ?float5) ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float4 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float10 ((_ to_fp 15 113) RTZ ?float9))))
; FINAL ASSERT
(assert (or ?bool14 (and (or ?bool14 (or ?bool14 ?bool14 ?bool13) ?bool14) (or (and ?bool13 ?bool13)))))
(check-sat)


-- iteration 986 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 15 113) RTN ?float5) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ((_ to_fp 11 53) RNE ?float2) ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RNE ((_ to_fp 15 113) RNE ?float8) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float9)))
; FINAL ASSERT
(assert (and ?bool12 (and ?bool14 ?bool12)))
(check-sat)


-- iteration 987 --
(declare-fun f0 (Float32 Float16) Float64)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b001001101100000 #b1111100001111011110001010001100010110000110011010100001011000010000001111001010100100010011000101110000011111001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101101010101101 #b0101001100000100000001000000100011001101111101000111001100001011100000011110110100001111011110001110010111100101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float5 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float5 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ?float3 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 8 24) RTZ ?float9) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 5 11) RTZ ?float7) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ?float10)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 988 --
(declare-fun f0 (Float128 Float128 Float64) Float16)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b110000001011101 #b1100001000110001011001111101011011011100101000100000100101000101011111110010011010101001100001111010001010011100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float8) ((_ to_fp 15 113) RTP ?float9) ((_ to_fp 11 53) RTZ ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float4) ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float5 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (or ?bool14 (or (or (or ?bool13 ?bool13 ?bool12) (or ?bool12) (or ?bool15 ?bool11))) ?bool13))
(check-sat)


-- iteration 989 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float2 ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ?float2 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float9 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (or (and ?bool13) (and ?bool15 ?bool11)))
(check-sat)


-- iteration 990 --
(declare-fun f0 (Float32 Float64 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float7 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float6) ?float6 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float6 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float2)))
; FINAL ASSERT
(assert (or (and (or (and ?bool11 ?bool12 ?bool13) ?bool14))))
(check-sat)


-- iteration 991 --
(declare-fun f0 (Float64) Float128)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b111101011000101 #b0111111110001000111010100110100001010001010000000101010001101101000101111111000110010011110010111111010110011100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 8 24) RTP ?float3) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTZ ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RTP ?float7) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float5 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTP ?float4) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and ?bool15 ?bool15))
(check-sat)


-- iteration 992 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b010010000011001 #b0111011011000010111000101001000111100111100011010100001001010111100111001000100011011011110001111000111010110000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTP ?float3 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTN ?float5 ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float7 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float10 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float3)))
; FINAL ASSERT
(assert (or (and (or ?bool15 (and ?bool14)) ?bool13 ?bool13) (and (or ?bool14 (or ?bool13)))))
(check-sat)


-- iteration 993 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01001100000 #b0011010011100010010110100010111110110100010011001111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTZ ?float10) ?float6 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ?float9 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float2) ?float6 ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (and ?bool14 (and ?bool14 (or (and ?bool13) (or ?bool12) (or ?bool14 ?bool15))) ?bool11))
(check-sat)


-- iteration 994 --
(declare-fun f0 (Float64 Float128 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10001110 #b11000101110110110111101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float3 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RNE ?float7 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float4 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float3 ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool14 (or ?bool13 (and ?bool15 ?bool14) ?bool15) (or ?bool14))))
(check-sat)


-- iteration 995 --
(declare-fun f0 (Float128 Float16 Float16) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ?float2 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RNE ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float5 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 5 11) RTP ?float8) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 11 53) RNE ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (and (or ?bool15 ?bool12 (or ?bool11)) (or (and ?bool12) ?bool12 ?bool14) (or ?bool13 ?bool13)))
(check-sat)


-- iteration 996 --
(declare-fun f0 (Float32) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 15 113) RTN ?float5) ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTN ?float3) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 15 113) RTP ?float5) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float2)))
; FINAL ASSERT
(assert (and ?bool11 (and ?bool15 (or ?bool14 ?bool13))))
(check-sat)


-- iteration 997 --
(declare-fun f0 (Float128 Float16 Float64) Float16)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ?float8 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 11 53) RTN ?float10) ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ((_ to_fp 5 11) RTN ?float2))))
; FINAL ASSERT
(assert (or (or (or (or ?bool15)))))
(check-sat)


-- iteration 998 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float5 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float7) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float4) ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ((_ to_fp 8 24) RTZ ?float8) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 8 24) RTN ?float8) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (and ?bool12 ?bool15) ?bool15))
(check-sat)


-- iteration 999 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ?float3 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RNE ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float8 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and ?bool14 (or ?bool14 (or (and ?bool14 ?bool14 ?bool14) ?bool13) (and ?bool15 (and ?bool15 ?bool15 ?bool13))) ?bool13))
(check-sat)


-- iteration 1000 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b011110100110000 #b1011001100011000111110100001001000001000110001110100101110100000011001111010011000011010101100110110010101010000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTP ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float3 ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (or (and ?bool14) (or ?bool12)))
(check-sat)


-- iteration 1001 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11100 #b1010000110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00010010101 #b0011110110001100110110000111111110000010111111100000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTZ ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float2 ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RNE ?float7 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float6 ((_ to_fp 11 53) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 8 24) RTN ?float5) ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or ?bool13 (or (and (or ?bool12 ?bool13) (or ?bool12 ?bool11 ?bool13))) (or ?bool11 (or (or ?bool14) (and ?bool13) (or ?bool11)))))
(check-sat)


-- iteration 1002 --
(declare-fun f0 (Float16 Float64) Float32)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float5 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float5) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ((_ to_fp 15 113) RTP ?float2) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RTN ?float8) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float8 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float5 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (and (and (or ?bool14 ?bool15) (and ?bool12) (and (and ?bool11 ?bool11 ?bool13) ?bool11 ?bool14)) ?bool11))
(check-sat)


-- iteration 1003 --
(declare-fun f0 (Float64 Float16) Float32)
(declare-fun p0 (Float64 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ((_ to_fp 8 24) RTZ ?float2) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float6) ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float4 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float9) ?float2 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float8 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float9)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1004 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTN ?float4 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ?float6 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float4 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTN ?float7 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float4 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float7) ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 11 53) RNE ?float4))))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 1005 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float64 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTZ ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RNE ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float7)))
; FINAL ASSERT
(assert (and ?bool14 (and (or ?bool13) (or ?bool13) (or (and ?bool15 ?bool13 ?bool12)))))
(check-sat)


-- iteration 1006 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 5 11) RTP ?float6) ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RNE ?float7 ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 5 11) RTP ?float3) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 11 53) RNE ?float4) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float7 ?float7)))
; FINAL ASSERT
(assert (or ?bool14 (or ?bool14)))
(check-sat)


-- iteration 1007 --
(declare-fun f0 (Float16 Float64 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000011100010110 #b1100100111101001110000101110011101001110101110111010111101111111010011100000011100000001011100100101011000110001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ?float8 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ?float4 ((_ to_fp 15 113) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float7 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and (and ?bool15 (and ?bool11 (and ?bool15 ?bool13 ?bool12) ?bool13) (or ?bool14)) (and ?bool11 ?bool12 (or (and ?bool15) ?bool11)) ?bool11))
(check-sat)


-- iteration 1008 --
(declare-fun f0 (Float16 Float64) Float64)
(declare-fun p0 (Float64 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01000000101 #b1000111000000110100001001101001111100010110001111101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float6 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float10 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (or ?bool12 (and ?bool12 ?bool12) ?bool13))
(check-sat)


-- iteration 1009 --
(declare-fun f0 (Float32 Float16 Float16) Float128)
(declare-fun p0 (Float16 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b101010001100110 #b1010011000110010110110010010110111000111000001101100110010111111010101100010101100010011100101011001101001111001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 8 24) RTZ ?float4) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ?float7 ((_ to_fp 5 11) RTN ?float2) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 5 11) RNE ?float8) ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float7 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 5 11) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (and (or (and (and ?bool11 ?bool13)) (and ?bool11 ?bool15) (and (and ?bool12) ?bool12 (and ?bool13 ?bool12 ?bool13))) ?bool12))
(check-sat)


-- iteration 1010 --
(declare-fun f0 (Float64 Float16 Float32) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RTZ ?float2 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 5 11) RTP ?float4) ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTP ?float3) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float8) ?float9 ((_ to_fp 8 24) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTP ?float6) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (or ?bool12 ?bool15 (or ?bool13 ?bool12 ?bool14)))
(check-sat)


-- iteration 1011 --
(declare-fun f0 (Float16 Float32 Float16) Float128)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 8 24) RTP ?float2) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTZ ?float3 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float3 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RTZ ?float3) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTN ?float3) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 15 113) RTZ ?float3) ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float8) ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (and (or (and ?bool12 ?bool11) (and ?bool11) ?bool14) (and (or ?bool13 ?bool13 ?bool13) (or (and ?bool12)) (or (or ?bool12 ?bool15)))))
(check-sat)


-- iteration 1012 --
(declare-fun f0 (Float64 Float32 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float4 ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ((_ to_fp 5 11) RTP ?float6) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 5 11) RNE ?float2) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 15 113) RTP ?float4) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool15 (and ?bool11 ?bool14 ?bool14) (and ?bool15 (or (or ?bool13 ?bool11 ?bool11) ?bool13 ?bool12))))
(check-sat)


-- iteration 1013 --
(declare-fun f0 (Float128 Float32 Float64) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RNE ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 8 24) RTP ?float7) ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float5 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float7)))
; FINAL ASSERT
(assert (or ?bool14 (and (or (or ?bool12 ?bool12 ?bool15) (and ?bool13 ?bool11 ?bool11)) ?bool15 ?bool13)))
(check-sat)


-- iteration 1014 --
(declare-fun f0 (Float32 Float32 Float128) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTZ ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float9))))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool15)))
(check-sat)


-- iteration 1015 --
(declare-fun f0 (Float16 Float16 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00100010011 #b1010101110111101111011111111011010101110110011110001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RNE ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTN ?float4) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float9 ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (or ?bool11 (and (and ?bool14 ?bool11) (or (or ?bool15) ?bool13 (or ?bool13))) ?bool14))
(check-sat)


-- iteration 1016 --
(declare-fun f0 (Float128 Float64 Float64) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11110010010 #b0011100101100000001111111010001010110110001111110111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ?float6 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ((_ to_fp 5 11) RNE ?float8) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTZ ?float3) ?float5)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14 ?bool12))
(check-sat)


-- iteration 1017 --
(declare-fun f0 (Float128 Float32 Float64) Float64)
(declare-fun p0 (Float64 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ((_ to_fp 5 11) RNE ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 5 11) RTP ?float7) ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float7 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 5 11) RTN ?float9) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float5 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4 ?float10 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RTZ ?float7) ?float3)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11))
(check-sat)


-- iteration 1018 --
(declare-fun f0 (Float32 Float16 Float64) Float64)
(declare-fun p0 (Float128 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RNE ?float4 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RNE ?float3) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 8 24) RTP ?float8) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float6 ((_ to_fp 15 113) RNE ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float3)))
; FINAL ASSERT
(assert (or (and ?bool12 (or ?bool14)) (or (and ?bool14))))
(check-sat)


-- iteration 1019 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float5 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.min ?float2 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float7 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float8 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 1020 --
(declare-fun f0 (Float16 Float32 Float64) Float32)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b11010010 #b11111011011001000001001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float4 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 8 24) RTP ?float7) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float7) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float8) ?float9 ((_ to_fp 11 53) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 8 24) RTZ ?float5) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float7 ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 11 53) RTN ?float6))))
; FINAL ASSERT
(assert (or (or ?bool14 ?bool12)))
(check-sat)


-- iteration 1021 --
(declare-fun f0 (Float64 Float64) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00100110 #b11000000010110111111010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTZ ?float2 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTP ?float4) ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 11 53) RNE ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or ?bool12 (or (or (and ?bool12 ?bool14) (or ?bool14 ?bool11 ?bool11) ?bool12) ?bool15 ?bool14) (and (and ?bool11 ?bool15) (or ?bool12) ?bool11)))
(check-sat)


-- iteration 1022 --
(declare-fun f0 (Float64 Float128 Float64) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b01110000 #b01011000001001111000101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTZ ?float2 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float6 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float7 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (or (or (and ?bool12 ?bool12 ?bool15) ?bool11 ?bool14)))
(check-sat)


-- iteration 1023 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RNE ((_ to_fp 5 11) RTZ ?float4) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8 ((_ to_fp 11 53) RTP ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4 ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (and (or ?bool11) (and ?bool13)))
(check-sat)


-- iteration 1024 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ((_ to_fp 15 113) RTZ ?float5) ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ?float2 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTZ ?float10) ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float6 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (or ?bool11) (or ?bool11 (or ?bool15)) (and (or ?bool12 ?bool13) (and ?bool12 (or ?bool11 ?bool15 ?bool11) (or ?bool12)))))
(check-sat)


-- iteration 1025 --
(declare-fun f0 (Float16 Float64 Float64) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01010010100 #b1000010101010011000110010010011010001110101000001010)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RNE ((_ to_fp 15 113) RTN ?float4) ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTP ?float7) ?float5 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RNE ?float8) ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float7) ((_ to_fp 5 11) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float10) ((_ to_fp 5 11) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float8 ((_ to_fp 8 24) RTN ?float3))))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1026 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTZ ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RNE ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTN ((_ to_fp 11 53) RTN ?float7) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 5 11) RTZ ?float4) ?float7)))
; FINAL ASSERT
(assert (or (or (or ?bool11) (and ?bool11 ?bool13))))
(check-sat)


-- iteration 1027 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RTN ?float3 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTZ ?float4 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float8) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float6 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 11 53) RTP ?float6) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float5)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool15 (and ?bool15 (and ?bool14 ?bool13))) ?bool12))
(check-sat)


-- iteration 1028 --
(declare-fun f0 (Float32 Float128 Float64) Float16)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ?float5 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float8 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float8) ((_ to_fp 15 113) RNE ?float5) ((_ to_fp 15 113) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float3)))
; FINAL ASSERT
(assert (and ?bool11 ?bool12))
(check-sat)


-- iteration 1029 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.add RTN ?float4 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.add RTN ((_ to_fp 8 24) RNE ?float7) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float6 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTP ?float7) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1030 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTZ ?float7 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 5 11) RTN ?float7) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool15 (or ?bool14))))
(check-sat)


-- iteration 1031 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RTZ ((_ to_fp 11 53) RTZ ?float2) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTZ ?float6) ((_ to_fp 5 11) RNE ?float4))))
; FINAL ASSERT
(assert (or ?bool13 ?bool12))
(check-sat)


-- iteration 1032 --
(declare-fun f0 (Float128 Float16) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11001100 #b00111100110000001100110)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 8 24) RTZ ?float3) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTN ?float6 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 8 24) RNE ?float3) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ((_ to_fp 5 11) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float6 ?float5)))
; FINAL ASSERT
(assert (or (and ?bool11)))
(check-sat)


-- iteration 1033 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float6 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTN ?float8) ?float5)))
; FINAL ASSERT
(assert (and ?bool12 ?bool14 ?bool11))
(check-sat)


-- iteration 1034 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTN ?float2 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RNE ?float6 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTN ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (or (or ?bool13) (and ?bool12 ?bool13 ?bool11) (and ?bool12)))
(check-sat)


-- iteration 1035 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ((_ to_fp 11 53) RTP ?float4) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 15 113) RTZ ?float3) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTP ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTN ?float7) ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float6)))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 1036 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTN ?float5) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTN ?float7 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float7 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float8)))
; FINAL ASSERT
(assert (and (and (and ?bool12 (and ?bool15 ?bool14 ?bool11))) (or (or ?bool14 ?bool15) ?bool11)))
(check-sat)


-- iteration 1037 --
(declare-fun f0 (Float128 Float64) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float3) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTZ ?float3) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float5) ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTN ?float4) ?float3)))
; FINAL ASSERT
(assert (or (and (and ?bool14 ?bool11 ?bool13) ?bool12 ?bool14) (or (or ?bool14 ?bool14) ?bool14 (and ?bool11 ?bool15 (and ?bool15)))))
(check-sat)


-- iteration 1038 --
(declare-fun f0 (Float16 Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float5 ((_ to_fp 8 24) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTP ((_ to_fp 15 113) RTP ?float3) ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RNE ((_ to_fp 5 11) RTP ?float8) ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTN ?float6 ((_ to_fp 15 113) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTZ ?float4) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 5 11) RTP ?float6) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float3 ?float9)))
; FINAL ASSERT
(assert (or (and ?bool11 (or ?bool11 ?bool12) (or (and ?bool11 ?bool13) (and ?bool15))) (or ?bool13 ?bool12) ?bool15))
(check-sat)


-- iteration 1039 --
(declare-fun f0 (Float16 Float128 Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 5 11) RTZ ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTP ?float6) ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 15 113) RTP ?float7) ?float4)))
; FINAL ASSERT
(assert (and ?bool11 ?bool11))
(check-sat)


-- iteration 1040 --
(declare-fun f0 (Float128 Float32 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 11 53) RTN ?float2) ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 11 53) RTN ?float5) ?float8)))
; FINAL ASSERT
(assert (and (and (or (or ?bool12)))))
(check-sat)


-- iteration 1041 --
(declare-fun f0 (Float32 Float32 Float16) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11011111011 #b1101101011110010011101100000010111010001000001101111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTP ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RTZ ?float5) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 15 113) RTN ?float8) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RTN ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTN ?float3) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float8))))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1042 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTN ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTP ?float3 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ((_ to_fp 15 113) RTN ?float7) ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float8) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 11 53) RTP ?float4) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RNE ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and (or (or (and ?bool15 ?bool12) (or ?bool13) ?bool11)) ?bool14 ?bool14))
(check-sat)


-- iteration 1043 --
(declare-fun f0 (Float32 Float128 Float128) Float64)
(declare-fun p0 (Float32 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b100100010000111 #b0110110001011010101100100011010011101100100111110010011001010010101101011111100110001000011001010001111101100111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float4) ?float4 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float2 ?float4 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ?float4 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float8 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 15 113) RNE ?float10) ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ((_ to_fp 15 113) RNE ?float2) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or (and (or ?bool14)) ?bool15))
(check-sat)


-- iteration 1044 --
(declare-fun f0 (Float32 Float128 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ((_ to_fp 5 11) RTZ ?float2) ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 15 113) RTZ ?float6) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ((_ to_fp 5 11) RTP ?float4) ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (and (or ?bool13 (or (or ?bool15 ?bool12) ?bool14))))
(check-sat)


-- iteration 1045 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.div RNE ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float7 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ?float3 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float6 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 1046 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float64 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01000 #b0001111000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float5 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTZ ?float7 ?float8)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float3 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool11 ?bool14)))
(check-sat)


-- iteration 1047 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RTP ?float2 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float6 ((_ to_fp 5 11) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float2 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float4 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float5 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTP ?float4) ?float9)))
; FINAL ASSERT
(assert (and ?bool13))
(check-sat)


-- iteration 1048 --
(declare-fun f0 (Float64 Float16 Float16) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.div RTP ((_ to_fp 15 113) RTP ?float5) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 5 11) RNE ?float6) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RNE ((_ to_fp 8 24) RTZ ?float2) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 8 24) RTN ?float8) ?float7)))
; FINAL ASSERT
(assert (or ?bool15 ?bool12))
(check-sat)


-- iteration 1049 --
(declare-fun f0 (Float64 Float128 Float16) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ((_ to_fp 5 11) RNE ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ((_ to_fp 5 11) RTN ?float3) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 15 113) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool15 ?bool12)))
(check-sat)


-- iteration 1050 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b11000001000 #b0111100111010001111101110000001101101100011111101000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 15 113) RTP ?float4) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float5 ?float2)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTP ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float4 ?float4)))
; FINAL ASSERT
(assert (or ?bool12 (or (and ?bool13 (or ?bool14) ?bool15) (and (and ?bool14 ?bool14 ?bool15) ?bool13 (and ?bool11)) ?bool15)))
(check-sat)


-- iteration 1051 --
(declare-fun f0 (Float32 Float64) Float16)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTN ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ?float7)))
; FINAL ASSERT
(assert (and (and (and (and ?bool13) (and ?bool12 ?bool14) ?bool11) ?bool12) (and (and (or ?bool11 ?bool14 ?bool15) (and ?bool12 ?bool14 ?bool12) ?bool13))))
(check-sat)


-- iteration 1052 --
(declare-fun f0 (Float32 Float32 Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RNE ?float2 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RNE ?float5) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTZ ?float8) ?float3)))
; FINAL ASSERT
(assert (or ?bool13 ?bool13))
(check-sat)


-- iteration 1053 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10100 #b1100100111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float4 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 11 53) RNE ?float5) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ((_ to_fp 11 53) RTZ ?float7) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RNE ?float8))))
; FINAL ASSERT
(assert (and ?bool14 ?bool11))
(check-sat)


-- iteration 1054 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01100010011 #b0111100001110100100010001011011100000101101110111111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RNE ((_ to_fp 5 11) RTN ?float5) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ((_ to_fp 5 11) RNE ?float6) ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float7 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float3 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and ?bool12 ?bool12))
(check-sat)


-- iteration 1055 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float4 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTP ?float6 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float3))))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1056 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float64 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b001110011111010 #b0110111101001010100100110000000101010100110111001010000000101000010010100110011011110101100011101100011111101101)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTZ ?float2 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RTN ?float8) ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float6 ((_ to_fp 8 24) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 15 113) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (and ?bool12 (and (or ?bool15 ?bool11 ?bool12) (or ?bool15 ?bool12) (and ?bool13)) (or ?bool14)) (or (or (or ?bool13 ?bool13)) ?bool13) (and ?bool15 (and (and ?bool12) (and ?bool13 ?bool14)))))
(check-sat)


-- iteration 1057 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b11010 #b1100101101)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ?float6 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float7 ?float4)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 15 113) RNE ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ?float4 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float10 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (and (and (or ?bool14 (or ?bool15 ?bool14 ?bool11)) ?bool15) ?bool13 ?bool12))
(check-sat)


-- iteration 1058 --
(declare-fun f0 (Float32 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RTN ((_ to_fp 8 24) RTZ ?float4) ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float9)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1059 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float5 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RTZ ?float6 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float10 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RNE ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and (and ?bool14)))
(check-sat)


-- iteration 1060 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RNE ?float2 ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTZ ?float7 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float5) ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float2 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float9 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RNE ?float5) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (or (and (or (and ?bool13)) ?bool13 ?bool13) (and (or ?bool14) (or (or ?bool12 ?bool11) ?bool11) (or ?bool12 ?bool13))))
(check-sat)


-- iteration 1061 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTZ ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RNE ?float8 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 15 113) RNE ?float5) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and (or (and ?bool13 (and ?bool15) (and ?bool11 ?bool13))) (or ?bool13 (and (or ?bool14 ?bool11 ?bool13)) (and (or ?bool12 ?bool14) (and ?bool15 ?bool15 ?bool12)))))
(check-sat)


-- iteration 1062 --
(declare-fun f0 (Float16 Float64 Float64) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00011001001 #b1110010011011001100011001101100011010011010000000111)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 11 53) RTZ ?float3) ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float3 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 11 53) RTP ?float3) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float7 ((_ to_fp 15 113) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTP ?float9) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (and ?bool14 ?bool14))
(check-sat)


-- iteration 1063 --
(declare-fun f0 (Float16 Float64 Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float6) ?float3 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 15 113) RTP ?float2) ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float2 ((_ to_fp 11 53) RTN ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ?float5 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float9 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTN ?float2) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float4 ((_ to_fp 15 113) RNE ?float10))))
; FINAL ASSERT
(assert (or ?bool13 (and ?bool11)))
(check-sat)


-- iteration 1064 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10011111101 #b1000100110010101001001000010001000110111100110100100)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float2 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float2 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float6 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 11 53) RTZ ?float3) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ?float5 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float5 ?float7)))
; FINAL ASSERT
(assert (or (or ?bool15)))
(check-sat)


-- iteration 1065 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float9 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float7)))
; FINAL ASSERT
(assert (and (and ?bool11 ?bool13 (and (or ?bool13 ?bool13 ?bool12))) ?bool15))
(check-sat)


-- iteration 1066 --
(declare-fun f0 (Float64 Float32 Float128) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b010010111110111 #b0010011101010100110011110101000010100110011111101111010001000001111010110001111011101110110100111001111000110010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RTN ?float6) ((_ to_fp 8 24) RTN ?float5) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ((_ to_fp 11 53) RTP ?float9))))
; FINAL ASSERT
(assert (and ?bool13 ?bool11))
(check-sat)


-- iteration 1067 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b101000111100110 #b1001101000100110000001100000010000001001111000100010011000111100111011110110110001010011110001110100000100111001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float2 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTN ?float9))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RNE ?float10) ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float2 ?float2)))
; FINAL ASSERT
(assert (and (or ?bool15 (and (or ?bool12 ?bool14 ?bool13) (and ?bool12 ?bool11 ?bool11)))))
(check-sat)


-- iteration 1068 --
(declare-fun f0 (Float128 Float64) Float32)
(declare-fun p0 (Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11010 #b1010111000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 11 53) RTN ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float5 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RNE ?float6) ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.max ((_ to_fp 5 11) RNE ?float6) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float6) ((_ to_fp 11 53) RTN ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float6 ((_ to_fp 11 53) RTP ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float5 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTN ?float9) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ((_ to_fp 5 11) RTP ?float3))))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 1069 --
(declare-fun f0 (Float64 Float16 Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float6 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RNE ?float2 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float7 ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float6) ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 8 24) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 15 113) RTN ?float7) ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float8)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1070 --
(declare-fun f0 (Float16 Float32) Float64)
(declare-fun p0 (Float128 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RNE ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RNE ?float5 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RNE ?float9 ((_ to_fp 5 11) RTN ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float5 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ((_ to_fp 8 24) RTZ ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool12 ?bool12) ?bool13 (and (and (and ?bool12 ?bool12 ?bool12) ?bool14 (and ?bool14 ?bool12 ?bool14)))))
(check-sat)


-- iteration 1071 --
(declare-fun f0 (Float64 Float64 Float64) Float64)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RNE ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTN ((_ to_fp 11 53) RTP ?float6) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float4 ?float7 ((_ to_fp 11 53) RTN ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float5 ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float4 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float6 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool12) ?bool12))
(check-sat)


-- iteration 1072 --
(declare-fun f0 (Float16 Float128 Float64) Float32)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ((_ to_fp 5 11) RTP ?float5) ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float2) ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float9 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and (or ?bool12) ?bool12 ?bool13))
(check-sat)


-- iteration 1073 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float4 ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1074 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b110011111111001 #b0001001100100010010101010111111001000100111101011101101110101110111011110010111101111011000101110011011110101001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b01101001000 #b1011110010110011000100110100101100100010001011011100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ((_ to_fp 15 113) RTZ ?float5) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RNE ?float2 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ?float8 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float9 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float10 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float2 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTZ ?float7) ?float7)))
; FINAL ASSERT
(assert (and ?bool14 ?bool12))
(check-sat)


-- iteration 1075 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.min ?float9 ((_ to_fp 15 113) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTP ?float8))))
; FINAL ASSERT
(assert (and (and (and ?bool12 ?bool12 ?bool15)) ?bool12 (and ?bool13)))
(check-sat)


-- iteration 1076 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTP ?float5 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float3) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTN ?float9 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ((_ to_fp 15 113) RNE ?float3) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 15 113) RNE ?float2) ?float5)))
; FINAL ASSERT
(assert (and (and ?bool15) ?bool12))
(check-sat)


-- iteration 1077 --
(declare-fun f0 (Float32 Float16 Float64) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float3) ((_ to_fp 5 11) RTN ?float4) ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 5 11) RNE ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ?float7 ?float3 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float6 ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 11 53) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RNE ?float6) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float9)))
; FINAL ASSERT
(assert (or (and (or (or ?bool15 ?bool12 ?bool13) (and ?bool11 ?bool13) (or ?bool13 ?bool13 ?bool11)) (or (or ?bool11 ?bool15) (or ?bool11) (and ?bool11 ?bool15)) ?bool12) (or ?bool11 ?bool15)))
(check-sat)


-- iteration 1078 --
(declare-fun f0 (Float64 Float64 Float64) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b01101 #b0101001001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sqrt RTP ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.add RTZ ?float8 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ((_ to_fp 15 113) RTZ ?float6) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float7))))
; FINAL ASSERT
(assert (and (and ?bool12) ?bool15 (and (or (or ?bool11 ?bool15) ?bool15))))
(check-sat)


-- iteration 1079 --
(declare-fun f0 (Float128 Float16 Float128) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b01001 #b0011111011)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 11 53) RTN ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTP ((_ to_fp 11 53) RTP ?float4) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTN ((_ to_fp 15 113) RTZ ?float7) ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 15 113) RTP ?float8) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 15 113) RTZ ?float5) ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ((_ to_fp 11 53) RTN ?float8))))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool15 (or (or ?bool13 ?bool15) (or ?bool13 ?bool11 ?bool12) ?bool13))))
(check-sat)


-- iteration 1080 --
(declare-fun f0 (Float64 Float64) Float32)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float6 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 15 113) RTN ?float5) ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTZ ?float2) ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 5 11) RTN ?float10) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float9) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float10 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (or (or ?bool13 (or ?bool12 ?bool12) ?bool13) ?bool12))
(check-sat)


-- iteration 1081 --
(declare-fun f0 (Float128 Float32 Float64) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 8 24) RNE ?float2) ((_ to_fp 11 53) RNE ?float4))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ((_ to_fp 8 24) RNE ?float7) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float2)))
; FINAL ASSERT
(assert (or (or (or ?bool14 (or ?bool14)) (or (or ?bool11 ?bool14 ?bool14) ?bool15) (or (or ?bool15 ?bool11 ?bool15))) ?bool13 (and ?bool13 (and ?bool13) ?bool14)))
(check-sat)


-- iteration 1082 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000100110001110 #b1000101110001011001101011101011011101101101101110101100111011010111110000001010100010111001001011000000100001000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTZ ?float2 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTZ ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float2 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RNE ?float3) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float9))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1083 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sub RNE ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTZ ?float6 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ?float8 ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float2 ((_ to_fp 15 113) RTP ?float8) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2 ((_ to_fp 15 113) RTN ?float10) ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float2 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (and ?bool13 ?bool15 ?bool12))
(check-sat)


-- iteration 1084 --
(declare-fun f0 (Float128 Float64 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float6 ?float2 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float5 ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTZ ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sub RNE ?float8 ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or (or (or (or ?bool12) ?bool14) (or (or ?bool15 ?bool15)) ?bool12)))
(check-sat)


-- iteration 1085 --
(declare-fun f0 (Float64 Float128) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTP ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float2 ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float9 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float10) ((_ to_fp 5 11) RTN ?float9))))
; FINAL ASSERT
(assert (and (or (and ?bool12 ?bool15))))
(check-sat)


-- iteration 1086 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float7 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float8 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float5 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float2)))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool12 ?bool12)))
(check-sat)


-- iteration 1087 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float3) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTZ ?float4 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float2 ((_ to_fp 15 113) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTZ ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 11 53) RTP ?float5) ?float3)))
; FINAL ASSERT
(assert (and ?bool15 ?bool14))
(check-sat)


-- iteration 1088 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTZ ((_ to_fp 8 24) RNE ?float3) ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.min ?float2 ((_ to_fp 8 24) RTP ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float3)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 1089 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b01011011 #b11001000110110101100101)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RTP ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float8 ?float3)))
; FINAL ASSERT
(assert (or (or ?bool12 ?bool12 ?bool13) (and ?bool12)))
(check-sat)


-- iteration 1090 --
(declare-fun f0 (Float64 Float16) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RTZ ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RNE ?float6 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTZ ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float3 ((_ to_fp 8 24) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and (or (or ?bool12)) ?bool13))
(check-sat)


-- iteration 1091 --
(declare-fun f0 (Float128 Float16) Float128)
(declare-fun p0 (Float32 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float4 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.mul RTN ?float5 ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float7) ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTP ?float4) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float9 ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 15 113) RTN ?float5))))
; FINAL ASSERT
(assert (or (or ?bool15) ?bool15 ?bool12))
(check-sat)


-- iteration 1092 --
(declare-fun f0 (Float32) Float128)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01101001000 #b1111000010000100011001010110001000101111100010010001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float3 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float7 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 8 24) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (or ?bool13) (and ?bool13 ?bool12 ?bool14) (or ?bool13)))
(check-sat)


-- iteration 1093 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RTZ ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float7 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float4 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float2 ((_ to_fp 5 11) RTZ ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTZ ?float9) ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 8 24) RTZ ?float2) ?float10)))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool14 (and ?bool12))))
(check-sat)


-- iteration 1094 --
(declare-fun f0 (Float16 Float16) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float5 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float3 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 5 11) RTZ ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float6 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (and (and (and ?bool15) ?bool13) (or ?bool13 (or ?bool11 ?bool11 ?bool11))))
(check-sat)


-- iteration 1095 --
(declare-fun f0 (Float64 Float128 Float32) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTZ ?float6) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float3 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 15 113) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float4 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float7) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RTP ?float7) ?float8)))
; FINAL ASSERT
(assert (or (or (and (and ?bool15 ?bool15) ?bool15 ?bool14) ?bool14) ?bool15))
(check-sat)


-- iteration 1096 --
(declare-fun f0 (Float16 Float32) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10001101 #b10001000100111101000111)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.abs ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float3 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ((_ to_fp 11 53) RNE ?float6) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ?float9 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float5) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float5 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13))
(check-sat)


-- iteration 1097 --
(declare-fun f0 (Float16 Float32 Float32) Float16)
(declare-fun p0 (Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b10100011 #b00000111010101010101111)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ?float5 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RTP ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float6) ?float8 ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 5 11) RTP ?float8) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float6)))
; FINAL ASSERT
(assert (or ?bool13 ?bool15 ?bool15))
(check-sat)


-- iteration 1098 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11000001 #b01101110111101101111011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RNE ?float6 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.mul RTN ?float7 ((_ to_fp 5 11) RTZ ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RNE ?float8) ((_ to_fp 8 24) RTP ?float8))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 15 113) RTP ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ((_ to_fp 15 113) RTN ?float2))))
; FINAL ASSERT
(assert (and ?bool12 ?bool11))
(check-sat)


-- iteration 1099 --
(declare-fun f0 (Float32 Float32) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001000000100111 #b0111010000000110111010101101101011000111001101010100110100111110011101110110001100111101101101101100001000100010)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ((_ to_fp 11 53) RTP ?float4) ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float8 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float7 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 5 11) RTN ?float2) ?float3)))
; FINAL ASSERT
(assert (and (and ?bool12)))
(check-sat)


-- iteration 1100 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11111111 #b11001111100110011110001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTN ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTP ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RTN ?float9 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float8)))
; FINAL ASSERT
(assert (and ?bool15 ?bool12 (or ?bool13)))
(check-sat)


-- iteration 1101 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float128 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTP ((_ to_fp 5 11) RTZ ?float3) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ((_ to_fp 5 11) RNE ?float3) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float3 ((_ to_fp 15 113) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float7 ?float6)))
; FINAL ASSERT
(assert (and ?bool13 ?bool13))
(check-sat)


-- iteration 1102 --
(declare-fun f0 (Float128) Float64)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b01011011111 #b0111111011110101010010110000101101010010000100001111)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ((_ to_fp 11 53) RNE ?float3) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ((_ to_fp 5 11) RTZ ?float2) ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float5 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ((_ to_fp 11 53) RTP ?float8))))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool12 ?bool12)))
(check-sat)


-- iteration 1103 --
(declare-fun f0 (Float16 Float128 Float128) Float64)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTP ?float5 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 15 113) RNE ?float7) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 5 11) RTP ?float9) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float5)))
; FINAL ASSERT
(assert (and (or (or ?bool14) (or ?bool11 (or ?bool13)) ?bool11) (or (or (or ?bool12) (and ?bool15 ?bool15 ?bool13) (and ?bool11)) (or (and ?bool14 ?bool15 ?bool13) (and ?bool14 ?bool15 ?bool15)))))
(check-sat)


-- iteration 1104 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RNE ?float3) ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.add RTP ?float4 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.max ?float5 ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float9 ((_ to_fp 8 24) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3 ?float7 ?float8)))
; FINAL ASSERT
(assert (and (and ?bool13) ?bool15))
(check-sat)


-- iteration 1105 --
(declare-fun f0 (Float64 Float16) Float128)
(declare-fun p0 (Float128 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b11100 #b0100100010)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b10001111001 #b0110111000101010000001000101101011101100111101110000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float3 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ?float4 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float4 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 5 11) RTP ?float5) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 8 24) RNE ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 15 113) RTP ?float8) ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (and ?bool14 ?bool12 (or ?bool12)))
(check-sat)


-- iteration 1106 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float3 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTP ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float6 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float10))))
; FINAL ASSERT
(assert (or ?bool15 ?bool12))
(check-sat)


-- iteration 1107 --
(declare-fun f0 (Float128 Float16) Float32)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RTP ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.max ((_ to_fp 8 24) RTP ?float7) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 5 11) RTN ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float3)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1108 --
(declare-fun f0 (Float16 Float128 Float32) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b001011110101110 #b1011000011100011100110000101110010111001110011000100001101000101001111110011011000100100010011100110101001111110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RTZ ?float2) ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 8 24) RNE ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTN ((_ to_fp 8 24) RNE ?float3) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.min ?float6 ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.max ((_ to_fp 15 113) RNE ?float3) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float6 ((_ to_fp 15 113) RTN ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float8 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (or (or (or ?bool14) (or ?bool12))))
(check-sat)


-- iteration 1109 --
(declare-fun f0 (Float16 Float32) Float32)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTP ((_ to_fp 11 53) RTZ ?float4) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float5 ((_ to_fp 11 53) RTP ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float8) ?float8 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RNE ?float10) ?float8 ((_ to_fp 5 11) RNE ?float9))))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1110 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.add RNE ((_ to_fp 8 24) RTZ ?float3) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 15 113) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ((_ to_fp 15 113) RTN ?float4) ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RTN ?float7 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.div RTN ?float3 ((_ to_fp 15 113) RNE ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (or (and ?bool15 ?bool11) ?bool15 ?bool12))
(check-sat)


-- iteration 1111 --
(declare-fun f0 (Float32 Float16 Float64) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000110010 #b0001110000010101101010011110001000101010010011111001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTP ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RNE ?float5 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTP ?float8 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float6 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float8 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ((_ to_fp 11 53) RNE ?float6))))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1112 --
(declare-fun f0 (Float16 Float128 Float32) Float64)
(declare-fun p0 (Float32 Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTN ?float8 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 15 113) RNE ?float8) ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ((_ to_fp 8 24) RTN ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float5 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RNE ?float9) ((_ to_fp 11 53) RTP ?float7) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float4)))
; FINAL ASSERT
(assert (and ?bool12 ?bool12))
(check-sat)


-- iteration 1113 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float64 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 15 113) RTZ ?float2) ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RNE ?float6) ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RTP ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float8 ((_ to_fp 5 11) RTP ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and ?bool12 ?bool13 ?bool12))
(check-sat)


-- iteration 1114 --
(declare-fun f0 (Float32 Float128 Float128) Float64)
(declare-fun p0 (Float16 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b10110 #b1111101101)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float5) ((_ to_fp 15 113) RTP ?float2) ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.mul RNE ?float5 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ((_ to_fp 5 11) RTP ?float4) ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.div RTN ?float4 ((_ to_fp 8 24) RTN ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float9 ((_ to_fp 8 24) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTZ ?float10) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float6) ((_ to_fp 8 24) RTN ?float5))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float9 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8 ((_ to_fp 8 24) RTZ ?float6))))
; FINAL ASSERT
(assert (and (and ?bool15) (and ?bool14 ?bool14) ?bool11))
(check-sat)


-- iteration 1115 --
(declare-fun f0 (Float16 Float16) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RNE ?float2) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTP ?float6) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 5 11) RNE ?float6) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ?float3 ((_ to_fp 8 24) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float4 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float10)))
; FINAL ASSERT
(assert (and ?bool11 (or (and ?bool13) (or ?bool13) ?bool12) (and (and ?bool11))))
(check-sat)


-- iteration 1116 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b010111011010010 #b0011100101100001110101110001111001111110100000110011100111010011101101011010110100011011010101011100000101010100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float6 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTP ?float6 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTZ ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float4 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float2 ?float9)))
; FINAL ASSERT
(assert (and (or (or ?bool15 ?bool13)) ?bool14))
(check-sat)


-- iteration 1117 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.div RNE ?float3 ((_ to_fp 8 24) RTP ?float2))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTN ((_ to_fp 15 113) RNE ?float7) ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RTP ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 5 11) RTZ ?float8) ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 5 11) RNE ?float2))))
; FINAL ASSERT
(assert (or ?bool15 (or ?bool13) ?bool15))
(check-sat)


-- iteration 1118 --
(declare-fun f0 (Float16 Float32 Float128) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ((_ to_fp 5 11) RTN ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTZ ?float5 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTP ?float8 ?float6)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ((_ to_fp 5 11) RTP ?float5) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float3 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ((_ to_fp 8 24) RNE ?float9) ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float4 ?float8)))
; FINAL ASSERT
(assert (or ?bool14 ?bool13 ?bool12))
(check-sat)


-- iteration 1119 --
(declare-fun f0 (Float128 Float32 Float64) Float16)
(declare-fun p0 (Float128 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTN ?float5) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ((_ to_fp 15 113) RNE ?float5) ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RTZ ?float2 ?float2)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float2 ?float10)))
; FINAL ASSERT
(assert (and (and ?bool12 (and ?bool11 (or ?bool14 ?bool15)) (and ?bool15))))
(check-sat)


-- iteration 1120 --
(declare-fun f0 (Float64 Float32 Float32) Float128)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.mul RTP ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ?float3 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTZ ((_ to_fp 11 53) RTP ?float6) ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.neg ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.min ((_ to_fp 8 24) RTP ?float8) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float9 ?float7)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool12 ?bool11) ?bool15))
(check-sat)


-- iteration 1121 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b001000000010011 #b0100000111100011110010000010000100001010111000001001011001001111000110110011111111011101000011100110001011101100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float5 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float2 ?float2)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sqrt RNE ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ((_ to_fp 11 53) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ((_ to_fp 15 113) RTZ ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float10)))
; FINAL ASSERT
(assert (and ?bool12 ?bool13))
(check-sat)


-- iteration 1122 --
(declare-fun f0 (Float64 Float64) Float16)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 11 53) RTN ?float4) ((_ to_fp 11 53) RNE ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ((_ to_fp 5 11) RTZ ?float2) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sub RTZ ?float4 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 5 11) RTZ ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTZ ?float2) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTZ ?float3) ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float2 ((_ to_fp 8 24) RTZ ?float5))))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1123 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float32 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float2 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float8 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ((_ to_fp 15 113) RNE ?float9) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 11 53) RNE ?float6) ?float5)))
; FINAL ASSERT
(assert (or ?bool15 ?bool13 ?bool14))
(check-sat)


-- iteration 1124 --
(declare-fun f0 (Float32 Float16 Float16) Float64)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00100011 #b10011111101000100011101)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RNE ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float4 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ((_ to_fp 5 11) RNE ?float3) ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 5 11) RTZ ?float5) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float2 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTZ ?float6) ?float8)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1125 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10001 #b0011001001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTN ?float4 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTP ?float3 ((_ to_fp 11 53) RNE ?float2))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTN ((_ to_fp 11 53) RNE ?float2) ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float6) ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float7 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (or ?bool14 ?bool11 (and ?bool12 ?bool11)))
(check-sat)


-- iteration 1126 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.min ?float7 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sqrt RTZ ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTN ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float4 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ((_ to_fp 15 113) RTZ ?float2) ?float9)))
; FINAL ASSERT
(assert (or ?bool11 (and (or (and ?bool15 ?bool15 ?bool13)))))
(check-sat)


-- iteration 1127 --
(declare-fun f0 (Float128 Float32) Float32)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float5 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTP ?float6) ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTZ ?float4) ((_ to_fp 8 24) RTP ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 15 113) RTP ?float6) ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTZ ?float5) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTN ?float6) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float3)))
; FINAL ASSERT
(assert (and ?bool12))
(check-sat)


-- iteration 1128 --
(declare-fun f0 (Float32 Float128) Float16)
(declare-fun p0 (Float64 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00011001101 #b0110011000111010100101100000010101010010010110010110)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RTN ?float4 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ?float2 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sqrt RTZ ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.min ?float8 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float3 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float2 ?float8 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float10 ?float10)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 1129 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11110100011 #b0001010110010101000011010100011110101111111111110101)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ((_ to_fp 15 113) RNE ?float4) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTN ?float3) ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float6 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.abs ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ?float8 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float2 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 15 113) RTP ?float2) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float8)))
; FINAL ASSERT
(assert (and ?bool13 (or ?bool15 (and (or ?bool13 ?bool15 ?bool13) (and ?bool13 ?bool14))) (or ?bool15 ?bool12 ?bool15)))
(check-sat)


-- iteration 1130 --
(declare-fun f0 (Float32 Float64) Float64)
(declare-fun p0 (Float64 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b01000011011 #b0000100100110100111100010010101010100100111011011011)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTN ((_ to_fp 11 53) RTN ?float6) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.max ?float6 ((_ to_fp 8 24) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ((_ to_fp 11 53) RNE ?float3))))
; FINAL ASSERT
(assert (and ?bool11 ?bool12 (and (or (or ?bool11 ?bool12) (and ?bool12 ?bool12 ?bool14) (and ?bool12 ?bool11 ?bool12)))))
(check-sat)


-- iteration 1131 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTP ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float9 ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9 ((_ to_fp 8 24) RTZ ?float3))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 11 53) RTP ?float5) ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float5 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTP ?float8) ?float2)))
; FINAL ASSERT
(assert (or ?bool14))
(check-sat)


-- iteration 1132 --
(declare-fun f0 (Float32 Float32 Float64) Float128)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RNE ?float3) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTN ?float2 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float4) ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float6) ((_ to_fp 8 24) RTN ?float2) ((_ to_fp 11 53) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ((_ to_fp 11 53) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float6 ((_ to_fp 15 113) RTP ?float3))))
; FINAL ASSERT
(assert (and ?bool12 (or ?bool11 ?bool12)))
(check-sat)


-- iteration 1133 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.min ?float5 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float6) ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RNE ?float9 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float6 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float2 ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float2 ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float2)))
; FINAL ASSERT
(assert (or ?bool15 ?bool15 ?bool14))
(check-sat)


-- iteration 1134 --
(declare-fun f0 (Float64 Float16 Float128) Float128)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float4 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.sub RNE ?float5 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float2 ((_ to_fp 5 11) RTN ?float9) ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float9 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float7 ((_ to_fp 5 11) RTZ ?float3) ((_ to_fp 5 11) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ((_ to_fp 11 53) RTZ ?float9) ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float8 ((_ to_fp 5 11) RTP ?float2) ((_ to_fp 5 11) RTZ ?float2))))
; FINAL ASSERT
(assert (or (and ?bool14 (or ?bool15 ?bool11) (and ?bool14 (or ?bool13 ?bool13) ?bool13)) ?bool14 ?bool11))
(check-sat)


-- iteration 1135 --
(declare-fun f0 (Float16) Float32)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b010001110000100 #b1110010011001000111110110011100011101001111011011001111100110001111110110111011110011100001100000000111000101100)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float5 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RTN ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTN ((_ to_fp 15 113) RNE ?float4) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.max ((_ to_fp 15 113) RNE ?float2) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 8 24) RNE ?float6) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RNE ?float3) ((_ to_fp 11 53) RTP ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float5 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTP ?float6) ((_ to_fp 11 53) RTZ ?float10))))
; FINAL ASSERT
(assert (or ?bool12 (or ?bool13 ?bool12)))
(check-sat)


-- iteration 1136 --
(declare-fun f0 (Float64 Float64 Float16) Float16)
(declare-fun p0 (Float128 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 11 53) RNE ?float5) ?float3 ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float5 ?float5)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 11 53) RNE ?float5) ((_ to_fp 5 11) RNE ?float3))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ((_ to_fp 15 113) RTZ ?float9) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float6 ?float7 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float5)))
; FINAL ASSERT
(assert (and (or (or (or ?bool13) ?bool13) ?bool14)))
(check-sat)


-- iteration 1137 --
(declare-fun f0 (Float128 Float32 Float64) Float32)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b11001000000 #b0011110111111001100011111101110001110100011111111111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.div RTN ?float3 ((_ to_fp 8 24) RNE ?float6))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sqrt RTN ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 11 53) RNE ?float7) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.add RTZ ?float7 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ((_ to_fp 11 53) RTN ?float3) ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ?float7)))
; FINAL ASSERT
(assert (and (or ?bool13 ?bool13)))
(check-sat)


-- iteration 1138 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11011011110 #b1110000010010010001000111110011110100101011010011100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b10011111100 #b0011111111000001100100000010001110110010110100000010)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RNE ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTP ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RNE ?float9 ((_ to_fp 5 11) RNE ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float10 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float2 ((_ to_fp 11 53) RTP ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float8)))
; FINAL ASSERT
(assert (or (and (or (and ?bool11 ?bool15 ?bool13) (or ?bool11))) ?bool15 ?bool14))
(check-sat)


-- iteration 1139 --
(declare-fun f0 (Float32 Float16 Float16) Float16)
(declare-fun p0 (Float16 Float128 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.max ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.abs ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.add RTN ?float5 ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RNE ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float2 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTN ?float8) ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float10 ?float4 ((_ to_fp 11 53) RTP ?float6))))
; FINAL ASSERT
(assert (or (or (or ?bool11 (or ?bool13 ?bool11 ?bool12) (or ?bool11 ?bool13)) ?bool12 (and (and ?bool11) ?bool11))))
(check-sat)


-- iteration 1140 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTN ?float4 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTP ?float4 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 5 11) RTP ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 5 11) RTZ ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ?float5 ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (and (or ?bool12) (or ?bool14 (and (or ?bool15 ?bool13 ?bool13)))))
(check-sat)


-- iteration 1141 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.div RTP ?float5 ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float7 ((_ to_fp 5 11) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ?float3)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTN ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float5 ((_ to_fp 5 11) RTP ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float5 ?float5)))
; FINAL ASSERT
(assert (or (or (or (or ?bool13 ?bool15 ?bool13)))))
(check-sat)


-- iteration 1142 --
(declare-fun f0 (Float128 Float64 Float16) Float16)
(declare-fun p0 (Float16 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00110 #b1110101110)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ?float4 ((_ to_fp 11 53) RTZ ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ?float3 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTP ?float4) ?float3 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RNE ?float8) ?float3 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.gt ?float8 ((_ to_fp 11 53) RTZ ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 15 113) RTP ?float3) ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ((_ to_fp 11 53) RTZ ?float2) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float4 ?float6)))
; FINAL ASSERT
(assert (or (or ?bool13 ?bool14) ?bool14))
(check-sat)


-- iteration 1143 --
(declare-fun f0 (Float64 Float32) Float128)
(declare-fun p0 (Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10001111 #b10001001100000111000100)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b11110 #b0010000100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RTP ?float2 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RNE ?float3) ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.div RTZ ?float2 ?float3)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RNE ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 8 24) RTZ ?float7) ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float9 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float4 ?float4)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1144 --
(declare-fun f0 (Float16) Float16)
(declare-fun p0 (Float32 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTP ?float8 ?float7)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float4 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 5 11) RTP ?float3) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float4)))
; FINAL ASSERT
(assert (and (or (or (and ?bool15) (or ?bool15 ?bool13)) (or ?bool11) ?bool14) ?bool13 ?bool11))
(check-sat)


-- iteration 1145 --
(declare-fun f0 (Float16 Float16) Float64)
(declare-fun p0 (Float128 Float64 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ((_ to_fp 11 53) RNE ?float6) ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.add RNE ?float4 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RNE ((_ to_fp 8 24) RTN ?float5) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTN ?float9 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 11 53) RTZ ?float4) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float8 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 11 53) RTP ?float4) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float3 ?float2)))
; FINAL ASSERT
(assert (or ?bool11 (and ?bool13 (or ?bool13 ?bool14) ?bool15)))
(check-sat)


-- iteration 1146 --
(declare-fun f0 (Float32 Float32 Float64) Float64)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b11100100010 #b1001011110111000001101100110100000011011011100101100)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RNE ?float2) ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float6) ((_ to_fp 8 24) RTZ ?float6) ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RNE ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float6 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float3 ?float5)))
; FINAL ASSERT
(assert (or (and ?bool14)))
(check-sat)


-- iteration 1147 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b10001 #b1100001010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.roundToIntegral RTN ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.max ((_ to_fp 5 11) RNE ?float3) ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ((_ to_fp 15 113) RTN ?float8) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float9 ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float10 ?float10)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or ?bool12 ?bool15))
(check-sat)


-- iteration 1148 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.roundToIntegral RNE ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float7 ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isSubnormal ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8 ((_ to_fp 15 113) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float5 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float4) ((_ to_fp 15 113) RNE ?float2))))
; FINAL ASSERT
(assert (and (or (and (and ?bool15 ?bool13)))))
(check-sat)


-- iteration 1149 --
(declare-fun f0 (Float128) Float128)
(declare-fun p0 (Float16 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.abs ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.min ?float3 ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTP ((_ to_fp 15 113) RNE ?float6) ?float4)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTP ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float5 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RTP ?float6) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float9)))
; FINAL ASSERT
(assert (or ?bool12))
(check-sat)


-- iteration 1150 --
(declare-fun f0 (Float16 Float16 Float16) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 5 11) RNE ?float2) ?float5 ((_ to_fp 5 11) RTP ?float2))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.add RTP ?float5 ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTN ?float5 ((_ to_fp 5 11) RTP ?float4))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTN ((_ to_fp 11 53) RTN ?float5) ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.sqrt RTP ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RNE ?float10))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RTZ ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float10))))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 1151 --
(declare-fun f0 (Float128 Float32) Float16)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTN ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.mul RNE ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.max ?float3 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.mul RTZ ?float7 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float6 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 5 11) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float9)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float10 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (and (or (or ?bool13)) (or ?bool14) (or ?bool15 (and (and ?bool14 ?bool12 ?bool12) (or ?bool13 ?bool11)) (and (or ?bool13 ?bool15 ?bool15) ?bool13 (and ?bool15 ?bool14)))))
(check-sat)


-- iteration 1152 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float64 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.max ?float4 ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.abs ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.div RTZ ?float3 ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ?float3 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (or (or ?bool11 (and ?bool12)) (and (and ?bool14) ?bool13 (or ?bool14 ?bool11)) (and (and ?bool13 (or ?bool15) (or ?bool12 ?bool12)) (or ?bool15) ?bool13)))
(check-sat)


-- iteration 1153 --
(declare-fun f0 (Float32 Float64) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000110 #b1100011100000011101011100010111101010001010101010100)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b11110000 #b01000110011100100011111)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTZ ?float2 ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTN ?float2 ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTN ?float4) ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ?float5 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.eq ((_ to_fp 11 53) RTN ?float8) ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float10 ((_ to_fp 8 24) RTP ?float4))))
; FINAL ASSERT
(assert (or ?bool15 ?bool12 (or ?bool12)))
(check-sat)


-- iteration 1154 --
(declare-fun f0 (Float16 Float64 Float64) Float32)
(declare-fun p0 (Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.roundToIntegral RTP ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 5 11) RNE ?float5) ((_ to_fp 11 53) RTZ ?float7) ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float3 ((_ to_fp 11 53) RNE ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTP ?float6 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 15 113) RTP ?float8) ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float2)))
; FINAL ASSERT
(assert (or (or (or (and ?bool12)) ?bool13 ?bool14) (and ?bool13) (or ?bool14 ?bool15 ?bool15)))
(check-sat)


-- iteration 1155 --
(declare-fun f0 (Float32 Float64) Float128)
(declare-fun p0 (Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b11101000100 #b1110010000001011110101010110011111010000000010010011)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 11 53) RTZ ?float4))))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.roundToIntegral RTN ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RNE ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.roundToIntegral RNE ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float10 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float3 ((_ to_fp 5 11) RNE ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.lt ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float9 ((_ to_fp 8 24) RTN ?float8))))
; FINAL ASSERT
(assert (and (and ?bool15 ?bool13)))
(check-sat)


-- iteration 1156 --
(declare-fun f0 (Float32 Float64 Float16) Float32)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float2)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTZ ?float7) ((_ to_fp 11 53) RTZ ?float6) ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTZ ?float2) ((_ to_fp 11 53) RNE ?float7) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float2 ((_ to_fp 5 11) RTP ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 15 113) RTN ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float3 ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float5 ((_ to_fp 11 53) RTZ ?float3))))
; FINAL ASSERT
(assert (and ?bool14 ?bool14))
(check-sat)


-- iteration 1157 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01000000001 #b1101000010010010110110001101001011011100101110111011)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RTN ?float4 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float7 ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ((_ to_fp 5 11) RTN ?float6) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTN ?float9) ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float4 ?float9)))
; FINAL ASSERT
(assert (or (and ?bool11 ?bool14 (or ?bool13 ?bool14 (or ?bool14))) (or (and ?bool12 (and ?bool12 ?bool11)))))
(check-sat)


-- iteration 1158 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float5 ((_ to_fp 15 113) RTN ?float4))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.roundToIntegral RTZ ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float2 ((_ to_fp 11 53) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sqrt RTP ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTN ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float2 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float9 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float4))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 1159 --
(declare-fun f0 (Float16 Float64) Float16)
(declare-fun p0 (Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00100 #b1011101100)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RTP ((_ to_fp 15 113) RTP ?float6) ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.add RTZ ((_ to_fp 11 53) RTN ?float7) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTZ ?float6 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 5 11) RTP ?float4) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 5 11) RTZ ?float4) ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float9) ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float4)))
; FINAL ASSERT
(assert (or (and (or ?bool14) ?bool13 (and ?bool15 ?bool12)) (and ?bool11) (and ?bool14 ?bool15 ?bool12)))
(check-sat)


-- iteration 1160 --
(declare-fun f0 (Float32 Float32) Float32)
(declare-fun p0 (Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.sqrt RTN ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RTZ ((_ to_fp 8 24) RTN ?float5) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float5)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ?float9 ((_ to_fp 8 24) RNE ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float5 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float5 ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 5 11) RNE ?float10) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float7 ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1161 --
(declare-fun f0 (Float128) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ((_ to_fp 11 53) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ((_ to_fp 5 11) RTN ?float4))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float5 ((_ to_fp 11 53) RNE ?float2))))
; FINAL ASSERT
(assert (and (and (and (and ?bool14 ?bool12)) (or ?bool12)) (and (and (and ?bool13 ?bool15 ?bool11) ?bool13 (or ?bool11)) (or (and ?bool14 ?bool14 ?bool15) (or ?bool11) (and ?bool12 ?bool13 ?bool12)))))
(check-sat)


-- iteration 1162 --
(declare-fun f0 (Float32) Float32)
(declare-fun p0 (Float16 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00001 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b101110010001111 #b1010101100111110110000010100101110011011000000100000110000111001010010110100001110111100111111101011001001000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.add RNE ?float3 ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float4 ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ((_ to_fp 15 113) RTZ ?float2) ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTN ?float7 ((_ to_fp 5 11) RNE ?float2))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ((_ to_fp 11 53) RTN ?float8) ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float8 ((_ to_fp 8 24) RTP ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNaN ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float6)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1163 --
(declare-fun f0 (Float16 Float64 Float16) Float32)
(declare-fun p0 (Float128 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.min ?float3 ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.min ((_ to_fp 8 24) RNE ?float5) ?float4)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.neg ?float4)))
(declare-const ?float9 Float32)
(assert (= ?float9 (f0 ((_ to_fp 5 11) RNE ?float8) ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.neg ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 15 113) RTN ?float4) ((_ to_fp 15 113) RTP ?float3) ((_ to_fp 5 11) RTN ?float4))))
; FINAL ASSERT
(assert (and (or ?bool12 ?bool15 (or ?bool15 (and ?bool11)))))
(check-sat)


-- iteration 1164 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b01111000010 #b0001111011101101100100011011001101101001011010000111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float3 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RTZ ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTP ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.div RNE ?float6 ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ?float9 ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float9 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float4 ?float7)))
; FINAL ASSERT
(assert (and (or (or (and ?bool11 ?bool11) (and ?bool14 ?bool12))) ?bool11 (or ?bool13)))
(check-sat)


-- iteration 1165 --
(declare-fun f0 (Float128 Float64) Float64)
(declare-fun p0 (Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b10100000011 #b1001110100010101000010101111010101110100111100010000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float2 ((_ to_fp 11 53) RTP ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.add RTZ ?float4 ?float4)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.abs ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float4 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTN ?float7) ((_ to_fp 11 53) RNE ?float3))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float6 ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float10 ?float9)))
; FINAL ASSERT
(assert (or (or (and ?bool12) (and (or ?bool14 ?bool13 ?bool14) (and ?bool15 ?bool13)))))
(check-sat)


-- iteration 1166 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ((_ to_fp 15 113) RTN ?float3) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTP ?float2 ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.max ?float4 ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ?float2 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float3)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15))
(check-sat)


-- iteration 1167 --
(declare-fun f0 (Float128) Float32)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.min ?float3 ((_ to_fp 5 11) RTZ ?float5))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.neg ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float10 ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTZ ?float6) ((_ to_fp 15 113) RTP ?float7) ((_ to_fp 8 24) RTZ ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float2 ?float8)))
; FINAL ASSERT
(assert (and (and ?bool12)))
(check-sat)


-- iteration 1168 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.mul RTZ ?float3 ((_ to_fp 15 113) RTN ?float5))))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ((_ to_fp 8 24) RTN ?float2) ?float5)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sqrt RNE ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.roundToIntegral RNE ?float6)))
(declare-const ?float10 Float128)
(assert (= ?float10 (f0 ?float5 ((_ to_fp 5 11) RTN ?float4))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float4 ((_ to_fp 11 53) RTN ?float3))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 8 24) RTN ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RNE ?float4) ?float3)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool14 ?bool14) (or (and ?bool11) (or (or ?bool14 ?bool11 ?bool12) (and ?bool12 ?bool12)) (or (or ?bool11)))))
(check-sat)


-- iteration 1169 --
(declare-fun f0 (Float32 Float16) Float128)
(declare-fun p0 (Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0011011111)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.sub RNE ?float3 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.add RTN ?float5 ?float6)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float5) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.roundToIntegral RTP ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 15 113) RTP ?float4))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.gt ?float4 ((_ to_fp 5 11) RNE ?float8))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float10)))
; FINAL ASSERT
(assert (and ?bool12 ?bool15 (or (and (and ?bool11 ?bool14)))))
(check-sat)


-- iteration 1170 --
(declare-fun f0 (Float128 Float32 Float64) Float64)
(declare-fun p0 (Float32 Float128 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 15 113) RTP ?float5) ((_ to_fp 8 24) RTP ?float2) ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTP ?float2 ?float6)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.div RNE ?float8 ?float2)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.mul RTN ((_ to_fp 15 113) RNE ?float5) ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 11 53) RNE ?float3) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool15 (or ?bool12 (and ?bool13 (or ?bool13 ?bool11 ?bool14)) (and ?bool13))))
(check-sat)


-- iteration 1171 --
(declare-fun f0 (Float128 Float128) Float64)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ?float4 ((_ to_fp 15 113) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sub RTN ((_ to_fp 11 53) RTZ ?float4) ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.max ?float6 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.min ?float2 ?float7)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 15 113) RNE ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float10)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float3) ((_ to_fp 5 11) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 5 11) RTZ ?float6) ((_ to_fp 5 11) RTZ ?float10))))
; FINAL ASSERT
(assert (and ?bool11))
(check-sat)


-- iteration 1172 --
(declare-fun f0 (Float16 Float128 Float128) Float128)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 11 53) RTN ?float3) ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sub RTZ ((_ to_fp 5 11) RTZ ?float2) ?float3)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float7 ?float3)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ?float8 ((_ to_fp 15 113) RNE ?float6) ((_ to_fp 15 113) RNE ?float2))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.div RNE ((_ to_fp 8 24) RTN ?float9) ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isZero ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float9 ((_ to_fp 15 113) RTZ ?float2))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float4))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float8 ((_ to_fp 5 11) RTP ?float6))))
; FINAL ASSERT
(assert (or (and (or (or ?bool15 ?bool12))) ?bool15 (or (or ?bool14 ?bool15 ?bool15) ?bool13)))
(check-sat)


-- iteration 1173 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.max ?float3 ((_ to_fp 11 53) RTN ?float2))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.mul RTZ ?float6 ?float3)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.mul RNE ((_ to_fp 11 53) RTZ ?float4) ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.sub RTP ?float6 ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sqrt RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float5 ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNaN ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float4))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float8)))
; FINAL ASSERT
(assert (or (and ?bool14) ?bool12))
(check-sat)


-- iteration 1174 --
(declare-fun f0 (Float128 Float16) Float64)
(declare-fun p0 (Float64 Float16 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sqrt RNE ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.add RNE ?float4 ?float5)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isPositive ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RTP ?float7) ((_ to_fp 5 11) RTZ ?float7) ((_ to_fp 11 53) RNE ?float10))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float8)))
; FINAL ASSERT
(assert (and (or ?bool15)))
(check-sat)


-- iteration 1175 --
(declare-fun f0 (Float64 Float32) Float64)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.abs ?float3)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float6 ?float6)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.div RTN ?float4 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float6)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ?float5 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float9 ?float3)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isSubnormal ?float7)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1176 --
(declare-fun f0 (Float32 Float32 Float32) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000001 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 8 24) RTN ?float3) ?float4)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ((_ to_fp 15 113) RTZ ?float2) ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTN ?float7 ?float7)))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RTZ ?float5) ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.mul RTZ ?float4 ((_ to_fp 8 24) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RTP ?float5))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 11 53) RTP ?float7))))
; FINAL ASSERT
(assert (or (or (or (or ?bool12)) (and ?bool15 (or ?bool12))) ?bool14))
(check-sat)


-- iteration 1177 --
(declare-fun f0 (Float128 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ?float3 ((_ to_fp 15 113) RNE ?float5))))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ?float3 ((_ to_fp 8 24) RTZ ?float2))))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 8 24) RTN ?float7))))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ?float6 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.add RTZ ((_ to_fp 11 53) RNE ?float5) ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.leq ((_ to_fp 11 53) RTP ?float6) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float3 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.geq ?float9 ?float8)))
; FINAL ASSERT
(assert (and ?bool11 (or ?bool15 (or (and ?bool15) (and ?bool15) (or ?bool12 ?bool14 ?bool11)) (and (and ?bool12 ?bool15))) ?bool15))
(check-sat)


-- iteration 1178 --
(declare-fun f0 (Float16 Float128 Float128) Float16)
(declare-fun p0 (Float128 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b10000000 #b00101101010101111001010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ?float3 ((_ to_fp 15 113) RTN ?float5) ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.roundToIntegral RTP ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float3 ((_ to_fp 15 113) RNE ?float7) ((_ to_fp 15 113) RTZ ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sub RTN ?float4 ?float4)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTN ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 15 113) RTP ?float4) ((_ to_fp 11 53) RNE ?float10) ((_ to_fp 15 113) RNE ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float3 ?float5)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float3)))
; FINAL ASSERT
(assert (and ?bool15))
(check-sat)


-- iteration 1179 --
(declare-fun f0 (Float16 Float16 Float16) Float16)
(declare-fun p0 (Float64 Float128 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.add RTP ?float4 ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.div RTP ?float7 ?float7)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.sqrt RTN ?float5)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ?float7 ((_ to_fp 15 113) RTN ?float2) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isPositive ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNaN ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ((_ to_fp 5 11) RTZ ?float10) ?float5)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1180 --
(declare-fun f0 (Float128 Float128) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ?float4 ((_ to_fp 8 24) RNE ?float2))))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RNE ?float2) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.div RNE ?float5 ?float4)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RTN ?float2)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.mul RTZ ?float2 ((_ to_fp 5 11) RNE ?float5))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isSubnormal ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isZero ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float4)))
; FINAL ASSERT
(assert (and (or ?bool11 ?bool12 ?bool15) (or ?bool11 ?bool11)))
(check-sat)


-- iteration 1181 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RNE ?float5)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RTN ?float6 ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.roundToIntegral RNE ?float5)))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RNE ?float7 ?float8)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.sub RNE ?float6 ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 11 53) RTN ?float3) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNormal ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.gt ?float4 ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ?float8 ?float6)))
; FINAL ASSERT
(assert (or (or ?bool15 ?bool11) (or ?bool11 ?bool13 ?bool14)))
(check-sat)


-- iteration 1182 --
(declare-fun f0 (Float64 Float64 Float16) Float16)
(declare-fun p0 (Float64 Float32 Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float2)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.max ?float5 ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float5 ?float7)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RTZ ?float8 ((_ to_fp 11 53) RTZ ?float6))))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.roundToIntegral RTZ ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.leq ?float10 ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (p0 ((_ to_fp 11 53) RTP ?float6) ((_ to_fp 8 24) RTN ?float10) ((_ to_fp 11 53) RTZ ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ((_ to_fp 11 53) RNE ?float2) ((_ to_fp 8 24) RTP ?float9) ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.gt ((_ to_fp 15 113) RTP ?float5) ?float4)))
; FINAL ASSERT
(assert (or ?bool14 (or (and (or ?bool13))) ?bool11))
(check-sat)


-- iteration 1183 --
(declare-fun f0 (Float64) Float16)
(declare-fun p0 (Float32 Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11110010 #b00001101000100011100011)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.min ((_ to_fp 11 53) RTZ ?float3) ?float2)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float6)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.abs ?float7)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTZ ?float5 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ?float10 ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float10 ?float9)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.leq ((_ to_fp 8 24) RTZ ?float2) ?float7)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (p0 ((_ to_fp 8 24) RTN ?float2) ?float5 ?float8)))
; FINAL ASSERT
(assert (or ?bool15 (and (and (and ?bool14 ?bool11 ?bool11) (or ?bool13 ?bool14 ?bool11) (or ?bool11))) ?bool13))
(check-sat)


-- iteration 1184 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float2 ?float4)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.sqrt RTN ?float3)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.sub RTZ ?float4 ((_ to_fp 15 113) RTP ?float3))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.roundToIntegral RNE ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sub RTP ?float7 ?float9)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.geq ?float7 ((_ to_fp 5 11) RTN ?float6))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float2)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.leq ?float7 ?float7)))
; FINAL ASSERT
(assert (and ?bool13 (and (and (and ?bool14 ?bool15 ?bool13) ?bool11 ?bool13)) (and ?bool12 (and ?bool15))))
(check-sat)


-- iteration 1185 --
(declare-fun f0 (Float32 Float16 Float32) Float64)
(declare-fun p0 (Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b10110111 #b11011010111100001110011)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (fp.mul RNE ((_ to_fp 5 11) RTZ ?float2) ?float4)))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.max ?float6 ?float4)))
(declare-const ?float9 Float64)
(assert (= ?float9 (f0 ((_ to_fp 8 24) RNE ?float6) ((_ to_fp 5 11) RTP ?float7) ((_ to_fp 8 24) RTN ?float3))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.min ((_ to_fp 5 11) RTP ?float9) ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float10)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ?float6 ((_ to_fp 5 11) RTZ ?float2))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 5 11) RTP ?float7))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float8 ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isInfinite ?float4)))
; FINAL ASSERT
(assert (and ?bool13 ?bool14))
(check-sat)


-- iteration 1186 --
(declare-fun f0 (Float128 Float32 Float16) Float64)
(declare-fun p0 (Float128 Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00110 #b1011010000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.roundToIntegral RTZ ?float5)))
(declare-const ?float7 Float64)
(assert (= ?float7 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RTN ?float5) ((_ to_fp 5 11) RTN ?float3))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.neg ?float3)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.max ?float2 ((_ to_fp 11 53) RNE ?float5))))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.max ?float3 ?float2)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.eq ?float6 ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNormal ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6 ((_ to_fp 11 53) RTP ?float5) ((_ to_fp 5 11) RTZ ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isPositive ?float6)))
; FINAL ASSERT
(assert (and ?bool14))
(check-sat)


-- iteration 1187 --
(declare-fun f0 (Float64 Float64 Float16) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b1 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00000 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sqrt RNE ?float3)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.mul RTP ?float7 ?float7)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.mul RTZ ?float6 ?float4)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RTP ?float9 ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float7 ?float3)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isInfinite ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float4 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ?float6)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float9)))
; FINAL ASSERT
(assert (and ?bool14 (and (or ?bool14 ?bool12) ?bool15)))
(check-sat)


-- iteration 1188 --
(declare-fun f0 (Float128 Float32 Float64) Float16)
(declare-fun p0 (Float32 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b00000000 #b00000000000000000000000)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float4 ?float6)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.sub RNE ?float5 ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.roundToIntegral RTN ?float8)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float5)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.geq ?float8 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 8 24) RTP ?float2) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float4 ?float3)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float6)))
; FINAL ASSERT
(assert (or ?bool11))
(check-sat)


-- iteration 1189 --
(declare-fun f0 (Float16 Float16 Float16) Float128)
(declare-fun p0 (Float16 Float32 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b10000101101 #b1111111010010010101111000011000100110100110010010010)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b0 #b00001 #b0000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.sub RTZ ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.div RNE ?float2 ((_ to_fp 15 113) RTN ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sqrt RTP ?float5)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.mul RNE ?float6 ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.mul RTN ?float3 ((_ to_fp 11 53) RTZ ?float7))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float6)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTZ ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ?float4)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 5 11) RTP ?float9) ((_ to_fp 8 24) RTP ?float3) ((_ to_fp 15 113) RTN ?float9))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float10)))
; FINAL ASSERT
(assert (and (or (or ?bool14 (and ?bool11 ?bool15) (and ?bool11 ?bool12 ?bool12)) (and ?bool11 ?bool13 ?bool12) ?bool15)))
(check-sat)


-- iteration 1190 --
(declare-fun f0 (Float32 Float64 Float128) Float32)
(declare-fun p0 (Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b0 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.div RNE ?float3 ?float3)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTP ?float2 ?float2)))
(declare-const ?float8 Float16)
(assert (= ?float8 (fp.sub RTZ ?float5 ((_ to_fp 5 11) RTN ?float2))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float4 ((_ to_fp 15 113) RTN ?float7))))
(declare-const ?float10 Float32)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTZ ?float9) ((_ to_fp 11 53) RNE ?float4) ((_ to_fp 15 113) RTP ?float8))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNegative ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isInfinite ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isSubnormal ?float2)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float8 ((_ to_fp 5 11) RTN ?float6))))
; FINAL ASSERT
(assert (and (or ?bool11)))
(check-sat)


-- iteration 1191 --
(declare-fun f0 (Float32) Float16)
(declare-fun p0 (Float64 Float32 Float32) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b00001 #b0000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float16)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.abs ?float4)))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTN ?float7) ?float8)))
(declare-const ?float10 Float16)
(assert (= ?float10 (f0 ((_ to_fp 8 24) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isPositive ?float5)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.lt ((_ to_fp 5 11) RNE ?float2) ?float5)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isSubnormal ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ((_ to_fp 5 11) RTN ?float2) ?float5)))
; FINAL ASSERT
(assert (or ?bool13 ?bool11 (or ?bool13)))
(check-sat)


-- iteration 1192 --
(declare-fun f0 (Float16) Float64)
(declare-fun p0 (Float64 Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00000 #b0000000000)))
(declare-const ?float5 Float16)
(assert (= ?float5 (fp #b1 #b10111 #b1110011000)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.min ?float3 ?float3)))
(declare-const ?float7 Float128)
(assert (= ?float7 (fp.max ?float3 ((_ to_fp 15 113) RTZ ?float5))))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.div RTZ ?float7 ?float3)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.neg ?float5)))
(declare-const ?float10 Float128)
(assert (= ?float10 (fp.add RTZ ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float9 ?float4)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.eq ((_ to_fp 5 11) RTN ?float6) ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ?float7 ?float8)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.eq ?float7 ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float2)))
; FINAL ASSERT
(assert (and ?bool15 (and ?bool14 ?bool11 (or (or ?bool13 ?bool15) ?bool13 ?bool11)) ?bool11))
(check-sat)


-- iteration 1193 --
(declare-fun f0 (Float32 Float32) Float64)
(declare-fun p0 (Float32 Float16 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float16)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b11010100 #b11110010011100110111010)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 8 24) RTP ?float4))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.min ((_ to_fp 11 53) RTN ?float2) ?float6)))
(declare-const ?float8 Float32)
(assert (= ?float8 (fp.sub RTP ((_ to_fp 8 24) RTN ?float7) ?float3)))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTZ ?float3)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.sub RNE ?float8 ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 8 24) RTP ?float2) ((_ to_fp 5 11) RTP ?float4) ((_ to_fp 15 113) RNE ?float7))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.isNegative ?float4)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.geq ?float6 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isPositive ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.eq ?float5 ((_ to_fp 8 24) RNE ?float4))))
; FINAL ASSERT
(assert (and (or (or ?bool12 ?bool11) (or (and ?bool12) (and ?bool13 ?bool12 ?bool11) (or ?bool13 ?bool13 ?bool13))) ?bool11))
(check-sat)


-- iteration 1194 --
(declare-fun f0 (Float128 Float32) Float128)
(declare-fun p0 (Float16 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float128)
(assert (= ?float4 (fp #b1 #b000000000000001 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sub RTN ((_ to_fp 8 24) RTP ?float4) ?float2)))
(declare-const ?float7 Float128)
(assert (= ?float7 (f0 ?float4 ?float2)))
(declare-const ?float8 Float128)
(assert (= ?float8 (f0 ((_ to_fp 15 113) RTZ ?float2) ((_ to_fp 8 24) RTZ ?float5))))
(declare-const ?float9 Float128)
(assert (= ?float9 (f0 ((_ to_fp 15 113) RTN ?float3) ?float6)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float6)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.lt ?float8 ?float9)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isZero ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.geq ?float10 ((_ to_fp 8 24) RNE ?float8))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (or ?bool15))
(check-sat)


-- iteration 1195 --
(declare-fun f0 (Float64) Float32)
(declare-fun p0 (Float16 Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b0 #b00000000 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float64)
(assert (= ?float6 (fp.mul RTN ?float4 ?float4)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.max ?float5 ((_ to_fp 8 24) RTZ ?float6))))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RTN ?float4 ((_ to_fp 11 53) RTZ ?float3))))
(declare-const ?float9 Float128)
(assert (= ?float9 (fp.div RTZ ?float2 ?float2)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.neg ?float3)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isInfinite ?float2)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float9 ((_ to_fp 15 113) RTN ?float10))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.isNegative ?float7)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isInfinite ?float8)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNegative ?float7)))
; FINAL ASSERT
(assert (or ?bool13 ?bool12))
(check-sat)


-- iteration 1196 --
(declare-fun f0 (Float16 Float32 Float64) Float128)
(declare-fun p0 (Float64) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b0 #b00000 #b0000000000)))
(declare-const ?float5 Float128)
(assert (= ?float5 (fp #b1 #b010000001010101 #b1010001110101111110101100111111011101000101011110000101011100101111100010110101011000001101100101001011111101110)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.sqrt RTZ ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (fp.neg ?float4)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.neg ?float6)))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ?float4 ((_ to_fp 5 11) RNE ?float2))))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.add RTP ?float7 ((_ to_fp 5 11) RTN ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (p0 ((_ to_fp 11 53) RNE ?float8))))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 5 11) RTN ?float3) ?float7)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float7 ?float10)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 11 53) RTP ?float2))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNormal ?float9)))
; FINAL ASSERT
(assert (and (and (and (and ?bool14 ?bool13 ?bool13) (or ?bool15 ?bool11) (or ?bool14)) ?bool13) ?bool14))
(check-sat)


-- iteration 1197 --


-- iteration 1198 --


-- iteration 1199 --


-- iteration 1200 --


-- iteration 1201 --


-- iteration 1202 --


-- iteration 1203 --


-- iteration 1204 --


-- iteration 1205 --


-- iteration 1206 --


-- iteration 1207 --


-- iteration 1208 --


-- iteration 1209 --


-- iteration 1210 --


-- iteration 1211 --


-- iteration 1212 --


-- iteration 1213 --


-- iteration 1214 --


-- iteration 1215 --


-- iteration 1216 --


-- iteration 1217 --


-- iteration 1218 --


-- iteration 1219 --


-- iteration 1220 --


-- iteration 1221 --


-- iteration 1222 --


-- iteration 1223 --


-- iteration 1224 --


-- iteration 1225 --


-- iteration 1226 --


-- iteration 1227 --


-- iteration 1228 --


-- iteration 1229 --


-- iteration 1230 --


-- iteration 1231 --


-- iteration 1232 --


-- iteration 1233 --


-- iteration 1234 --


-- iteration 1235 --


-- iteration 1236 --


-- iteration 1237 --


-- iteration 1238 --


-- iteration 1239 --


-- iteration 1240 --


-- iteration 1241 --


-- iteration 1242 --


-- iteration 1243 --


-- iteration 1244 --


-- iteration 1245 --


-- iteration 1246 --


-- iteration 1247 --


-- iteration 1248 --


-- iteration 1249 --


-- iteration 1250 --


-- iteration 1251 --


-- iteration 1252 --


-- iteration 1253 --


-- iteration 1254 --


-- iteration 1255 --


-- iteration 1256 --


-- iteration 1257 --


-- iteration 1258 --


-- iteration 1259 --


-- iteration 1260 --


-- iteration 1261 --


-- iteration 1262 --


-- iteration 1263 --


-- iteration 1264 --


-- iteration 1265 --


-- iteration 1266 --


-- iteration 1267 --


-- iteration 1268 --


-- iteration 1269 --


-- iteration 1270 --


-- iteration 1271 --


-- iteration 1272 --


-- iteration 1273 --


-- iteration 1274 --


-- iteration 1275 --


-- iteration 1276 --


-- iteration 1277 --


-- iteration 1278 --


-- iteration 1279 --


-- iteration 1280 --


-- iteration 1281 --


-- iteration 1282 --


-- iteration 1283 --


-- iteration 1284 --


-- iteration 1285 --


-- iteration 1286 --


-- iteration 1287 --


-- iteration 1288 --


-- iteration 1289 --


-- iteration 1290 --


-- iteration 1291 --


-- iteration 1292 --


-- iteration 1293 --


-- iteration 1294 --


-- iteration 1295 --


-- iteration 1296 --


-- iteration 1297 --


-- iteration 1298 --


-- iteration 1299 --


-- iteration 1300 --


-- iteration 1301 --


-- iteration 1302 --


-- iteration 1303 --


-- iteration 1304 --


-- iteration 1305 --


-- iteration 1306 --


-- iteration 1307 --


-- iteration 1308 --


-- iteration 1309 --


-- iteration 1310 --


-- iteration 1311 --


-- iteration 1312 --


-- iteration 1313 --


-- iteration 1314 --


-- iteration 1315 --


-- iteration 1316 --


-- iteration 1317 --


-- iteration 1318 --


-- iteration 1319 --


-- iteration 1320 --


-- iteration 1321 --


-- iteration 1322 --


-- iteration 1323 --


-- iteration 1324 --


-- iteration 1325 --


-- iteration 1326 --


-- iteration 1327 --


-- iteration 1328 --


-- iteration 1329 --


-- iteration 1330 --


-- iteration 1331 --


-- iteration 1332 --


-- iteration 1333 --


-- iteration 1334 --


-- iteration 1335 --


-- iteration 1336 --


-- iteration 1337 --


-- iteration 1338 --


-- iteration 1339 --


-- iteration 1340 --


-- iteration 1341 --


-- iteration 1342 --


-- iteration 1343 --


-- iteration 1344 --


-- iteration 1345 --


-- iteration 1346 --


-- iteration 1347 --


-- iteration 1348 --


-- iteration 1349 --


-- iteration 1350 --


-- iteration 1351 --


-- iteration 1352 --


-- iteration 1353 --


-- iteration 1354 --


-- iteration 1355 --


-- iteration 1356 --


-- iteration 1357 --


-- iteration 1358 --


-- iteration 1359 --


-- iteration 1360 --


-- iteration 1361 --


-- iteration 1362 --


-- iteration 1363 --


-- iteration 1364 --


-- iteration 1365 --


-- iteration 1366 --


-- iteration 1367 --


-- iteration 1368 --


-- iteration 1369 --


-- iteration 1370 --


-- iteration 1371 --


-- iteration 1372 --


-- iteration 1373 --


-- iteration 1374 --


-- iteration 1375 --


-- iteration 1376 --


-- iteration 1377 --


-- iteration 1378 --


-- iteration 1379 --


-- iteration 1380 --


-- iteration 1381 --


-- iteration 1382 --


-- iteration 1383 --


-- iteration 1384 --


-- iteration 1385 --


-- iteration 1386 --


-- iteration 1387 --


-- iteration 1388 --


-- iteration 1389 --


-- iteration 1390 --


-- iteration 1391 --


-- iteration 1392 --


-- iteration 1393 --


-- iteration 1394 --


-- iteration 1395 --


-- iteration 1396 --


-- iteration 1397 --


-- iteration 1398 --


-- iteration 1399 --


-- iteration 1400 --


-- iteration 1401 --


-- iteration 1402 --


-- iteration 1403 --


-- iteration 1404 --


-- iteration 1405 --


-- iteration 1406 --


-- iteration 1407 --


-- iteration 1408 --


-- iteration 1409 --


-- iteration 1410 --


-- iteration 1411 --


-- iteration 1412 --


-- iteration 1413 --


-- iteration 1414 --


-- iteration 1415 --


-- iteration 1416 --


-- iteration 1417 --


-- iteration 1418 --


-- iteration 1419 --


-- iteration 1420 --


-- iteration 1421 --


-- iteration 1422 --


-- iteration 1423 --


-- iteration 1424 --


-- iteration 1425 --


-- iteration 1426 --


-- iteration 1427 --


-- iteration 1428 --


-- iteration 1429 --


-- iteration 1430 --


-- iteration 1431 --


-- iteration 1432 --


-- iteration 1433 --


-- iteration 1434 --


-- iteration 1435 --


-- iteration 1436 --


-- iteration 1437 --


-- iteration 1438 --


-- iteration 1439 --


-- iteration 1440 --


-- iteration 1441 --


-- iteration 1442 --


-- iteration 1443 --


-- iteration 1444 --


-- iteration 1445 --


-- iteration 1446 --


-- iteration 1447 --


-- iteration 1448 --


-- iteration 1449 --


-- iteration 1450 --


-- iteration 1451 --


-- iteration 1452 --


-- iteration 1453 --


-- iteration 1454 --


-- iteration 1455 --


-- iteration 1456 --


-- iteration 1457 --


-- iteration 1458 --


-- iteration 1459 --


-- iteration 1460 --


-- iteration 1461 --


-- iteration 1462 --


-- iteration 1463 --


-- iteration 1464 --


-- iteration 1465 --


-- iteration 1466 --


-- iteration 1467 --


-- iteration 1468 --


-- iteration 1469 --


-- iteration 1470 --


-- iteration 1471 --


-- iteration 1472 --


-- iteration 1473 --


-- iteration 1474 --


-- iteration 1475 --


-- iteration 1476 --


-- iteration 1477 --


-- iteration 1478 --


-- iteration 1479 --


-- iteration 1480 --


-- iteration 1481 --


-- iteration 1482 --


-- iteration 1483 --


-- iteration 1484 --


-- iteration 1485 --


-- iteration 1486 --


-- iteration 1487 --


-- iteration 1488 --


-- iteration 1489 --


-- iteration 1490 --


-- iteration 1491 --


-- iteration 1492 --


-- iteration 1493 --


-- iteration 1494 --


-- iteration 1495 --


-- iteration 1496 --


-- iteration 1497 --


-- iteration 1498 --


-- iteration 1499 --


-- iteration 1500 --


-- iteration 1501 --


-- iteration 1502 --


-- iteration 1503 --


-- iteration 1504 --


-- iteration 1505 --


-- iteration 1506 --


-- iteration 1507 --


-- iteration 1508 --


-- iteration 1509 --


-- iteration 1510 --


-- iteration 1511 --


-- iteration 1512 --


-- iteration 1513 --


-- iteration 1514 --


-- iteration 1515 --


-- iteration 1516 --


-- iteration 1517 --


-- iteration 1518 --


-- iteration 1519 --


-- iteration 1520 --


-- iteration 1521 --


-- iteration 1522 --


-- iteration 1523 --


-- iteration 1524 --


-- iteration 1525 --


-- iteration 1526 --


-- iteration 1527 --


-- iteration 1528 --


-- iteration 1529 --


-- iteration 1530 --


-- iteration 1531 --


-- iteration 1532 --


-- iteration 1533 --


-- iteration 1534 --


-- iteration 1535 --


-- iteration 1536 --


-- iteration 1537 --


-- iteration 1538 --


-- iteration 1539 --


-- iteration 1540 --


-- iteration 1541 --


-- iteration 1542 --


-- iteration 1543 --


-- iteration 1544 --


-- iteration 1545 --


-- iteration 1546 --


-- iteration 1547 --


-- iteration 1548 --


-- iteration 1549 --


-- iteration 1550 --


-- iteration 1551 --


-- iteration 1552 --


-- iteration 1553 --


-- iteration 1554 --


-- iteration 1555 --


-- iteration 1556 --


-- iteration 1557 --


-- iteration 1558 --


-- iteration 1559 --


-- iteration 1560 --


-- iteration 1561 --


-- iteration 1562 --


-- iteration 1563 --


-- iteration 1564 --


-- iteration 1565 --


-- iteration 1566 --


-- iteration 1567 --


-- iteration 1568 --


-- iteration 1569 --


-- iteration 1570 --


-- iteration 1571 --


-- iteration 1572 --


-- iteration 1573 --


-- iteration 1574 --


-- iteration 1575 --


-- iteration 1576 --


-- iteration 1577 --


-- iteration 1578 --


-- iteration 1579 --


-- iteration 1580 --


-- iteration 1581 --


-- iteration 1582 --


-- iteration 1583 --


-- iteration 1584 --


-- iteration 1585 --


-- iteration 1586 --


-- iteration 1587 --


-- iteration 1588 --


-- iteration 1589 --


-- iteration 1590 --


-- iteration 1591 --


-- iteration 1592 --


-- iteration 1593 --


-- iteration 1594 --


-- iteration 1595 --


-- iteration 1596 --


-- iteration 1597 --


-- iteration 1598 --


-- iteration 1599 --


-- iteration 1600 --


-- iteration 1601 --


-- iteration 1602 --


-- iteration 1603 --


-- iteration 1604 --


-- iteration 1605 --


-- iteration 1606 --


-- iteration 1607 --


-- iteration 1608 --


-- iteration 1609 --


-- iteration 1610 --


-- iteration 1611 --


-- iteration 1612 --


-- iteration 1613 --


-- iteration 1614 --


-- iteration 1615 --


-- iteration 1616 --


-- iteration 1617 --


-- iteration 1618 --


-- iteration 1619 --


-- iteration 1620 --


-- iteration 1621 --


-- iteration 1622 --


-- iteration 1623 --


-- iteration 1624 --


-- iteration 1625 --


-- iteration 1626 --


-- iteration 1627 --


-- iteration 1628 --


-- iteration 1629 --


-- iteration 1630 --


-- iteration 1631 --


-- iteration 1632 --


-- iteration 1633 --


-- iteration 1634 --


-- iteration 1635 --


-- iteration 1636 --


-- iteration 1637 --


-- iteration 1638 --


-- iteration 1639 --


-- iteration 1640 --


-- iteration 1641 --


-- iteration 1642 --


-- iteration 1643 --


-- iteration 1644 --


-- iteration 1645 --


-- iteration 1646 --


-- iteration 1647 --


-- iteration 1648 --


-- iteration 1649 --


-- iteration 1650 --


-- iteration 1651 --


-- iteration 1652 --


-- iteration 1653 --


-- iteration 1654 --


-- iteration 1655 --


-- iteration 1656 --


-- iteration 1657 --


-- iteration 1658 --


-- iteration 1659 --


-- iteration 1660 --


-- iteration 1661 --


-- iteration 1662 --


-- iteration 1663 --


-- iteration 1664 --


-- iteration 1665 --


-- iteration 1666 --


-- iteration 1667 --


-- iteration 1668 --


-- iteration 1669 --


-- iteration 1670 --


-- iteration 1671 --


-- iteration 1672 --


-- iteration 1673 --


-- iteration 1674 --


-- iteration 1675 --


-- iteration 1676 --


-- iteration 1677 --


-- iteration 1678 --


-- iteration 1679 --


-- iteration 1680 --


-- iteration 1681 --


-- iteration 1682 --


-- iteration 1683 --


-- iteration 1684 --


-- iteration 1685 --


-- iteration 1686 --


-- iteration 1687 --


-- iteration 1688 --


-- iteration 1689 --


-- iteration 1690 --


-- iteration 1691 --


-- iteration 1692 --


-- iteration 1693 --


-- iteration 1694 --


-- iteration 1695 --


-- iteration 1696 --


-- iteration 1697 --


-- iteration 1698 --


-- iteration 1699 --


-- iteration 1700 --


-- iteration 1701 --


-- iteration 1702 --


-- iteration 1703 --


-- iteration 1704 --


-- iteration 1705 --


-- iteration 1706 --


-- iteration 1707 --


-- iteration 1708 --


-- iteration 1709 --


-- iteration 1710 --


-- iteration 1711 --


-- iteration 1712 --


-- iteration 1713 --


-- iteration 1714 --


-- iteration 1715 --


-- iteration 1716 --


-- iteration 1717 --


-- iteration 1718 --


-- iteration 1719 --


-- iteration 1720 --


-- iteration 1721 --


-- iteration 1722 --


-- iteration 1723 --


-- iteration 1724 --


-- iteration 1725 --


-- iteration 1726 --


-- iteration 1727 --


-- iteration 1728 --


-- iteration 1729 --


-- iteration 1730 --


-- iteration 1731 --


-- iteration 1732 --


-- iteration 1733 --


-- iteration 1734 --


-- iteration 1735 --


-- iteration 1736 --


-- iteration 1737 --


-- iteration 1738 --


-- iteration 1739 --


-- iteration 1740 --


-- iteration 1741 --


-- iteration 1742 --


-- iteration 1743 --


-- iteration 1744 --


-- iteration 1745 --


-- iteration 1746 --


-- iteration 1747 --


-- iteration 1748 --


-- iteration 1749 --


-- iteration 1750 --


-- iteration 1751 --


-- iteration 1752 --


-- iteration 1753 --


-- iteration 1754 --


-- iteration 1755 --


-- iteration 1756 --


-- iteration 1757 --


-- iteration 1758 --


-- iteration 1759 --


-- iteration 1760 --


-- iteration 1761 --


-- iteration 1762 --


-- iteration 1763 --


-- iteration 1764 --


-- iteration 1765 --


-- iteration 1766 --


-- iteration 1767 --


-- iteration 1768 --


-- iteration 1769 --


-- iteration 1770 --


-- iteration 1771 --


-- iteration 1772 --


-- iteration 1773 --


-- iteration 1774 --


-- iteration 1775 --


-- iteration 1776 --


-- iteration 1777 --


-- iteration 1778 --


-- iteration 1779 --


-- iteration 1780 --


-- iteration 1781 --


-- iteration 1782 --


-- iteration 1783 --


-- iteration 1784 --


-- iteration 1785 --


-- iteration 1786 --


-- iteration 1787 --


-- iteration 1788 --


-- iteration 1789 --


-- iteration 1790 --


-- iteration 1791 --


-- iteration 1792 --


-- iteration 1793 --


-- iteration 1794 --


-- iteration 1795 --


-- iteration 1796 --


-- iteration 1797 --


-- iteration 1798 --


-- iteration 1799 --


-- iteration 1800 --


-- iteration 1801 --


-- iteration 1802 --


-- iteration 1803 --


-- iteration 1804 --


-- iteration 1805 --


-- iteration 1806 --


-- iteration 1807 --


-- iteration 1808 --


-- iteration 1809 --


-- iteration 1810 --


-- iteration 1811 --


-- iteration 1812 --


-- iteration 1813 --


-- iteration 1814 --


-- iteration 1815 --


-- iteration 1816 --


-- iteration 1817 --


-- iteration 1818 --


-- iteration 1819 --


-- iteration 1820 --


-- iteration 1821 --


-- iteration 1822 --


-- iteration 1823 --


-- iteration 1824 --


-- iteration 1825 --


-- iteration 1826 --


-- iteration 1827 --


-- iteration 1828 --


-- iteration 1829 --


-- iteration 1830 --


-- iteration 1831 --


-- iteration 1832 --


-- iteration 1833 --


-- iteration 1834 --


-- iteration 1835 --


-- iteration 1836 --


-- iteration 1837 --


-- iteration 1838 --


-- iteration 1839 --


-- iteration 1840 --


-- iteration 1841 --


-- iteration 1842 --


-- iteration 1843 --


-- iteration 1844 --


-- iteration 1845 --


-- iteration 1846 --


-- iteration 1847 --


-- iteration 1848 --


-- iteration 1849 --


-- iteration 1850 --


-- iteration 1851 --


-- iteration 1852 --


-- iteration 1853 --


-- iteration 1854 --


-- iteration 1855 --


-- iteration 1856 --


-- iteration 1857 --


-- iteration 1858 --


-- iteration 1859 --


-- iteration 1860 --


-- iteration 1861 --


-- iteration 1862 --


-- iteration 1863 --


-- iteration 1864 --


-- iteration 1865 --


-- iteration 1866 --


-- iteration 1867 --


-- iteration 1868 --


-- iteration 1869 --


-- iteration 1870 --


-- iteration 1871 --


-- iteration 1872 --


-- iteration 1873 --


-- iteration 1874 --


-- iteration 1875 --


-- iteration 1876 --


-- iteration 1877 --


-- iteration 1878 --


-- iteration 1879 --


-- iteration 1880 --


-- iteration 1881 --


-- iteration 1882 --


-- iteration 1883 --


-- iteration 1884 --


-- iteration 1885 --


-- iteration 1886 --


-- iteration 1887 --


-- iteration 1888 --


-- iteration 1889 --


-- iteration 1890 --


-- iteration 1891 --


-- iteration 1892 --


-- iteration 1893 --


-- iteration 1894 --


-- iteration 1895 --


-- iteration 1896 --


-- iteration 1897 --


-- iteration 1898 --


-- iteration 1899 --


-- iteration 1900 --


-- iteration 1901 --


-- iteration 1902 --


-- iteration 1903 --


-- iteration 1904 --


-- iteration 1905 --


-- iteration 1906 --


-- iteration 1907 --


-- iteration 1908 --


-- iteration 1909 --


-- iteration 1910 --


-- iteration 1911 --


-- iteration 1912 --


-- iteration 1913 --


-- iteration 1914 --


-- iteration 1915 --


-- iteration 1916 --


-- iteration 1917 --


-- iteration 1918 --


-- iteration 1919 --


-- iteration 1920 --


-- iteration 1921 --


-- iteration 1922 --


-- iteration 1923 --


-- iteration 1924 --


-- iteration 1925 --


-- iteration 1926 --


-- iteration 1927 --


-- iteration 1928 --


-- iteration 1929 --


-- iteration 1930 --


-- iteration 1931 --


-- iteration 1932 --


-- iteration 1933 --


-- iteration 1934 --


-- iteration 1935 --


-- iteration 1936 --


-- iteration 1937 --


-- iteration 1938 --


-- iteration 1939 --


-- iteration 1940 --


-- iteration 1941 --


-- iteration 1942 --


-- iteration 1943 --


-- iteration 1944 --


-- iteration 1945 --


-- iteration 1946 --


-- iteration 1947 --


-- iteration 1948 --


-- iteration 1949 --


-- iteration 1950 --


-- iteration 1951 --


-- iteration 1952 --


-- iteration 1953 --


-- iteration 1954 --


-- iteration 1955 --


-- iteration 1956 --


-- iteration 1957 --


-- iteration 1958 --


-- iteration 1959 --


-- iteration 1960 --


-- iteration 1961 --


-- iteration 1962 --


-- iteration 1963 --


-- iteration 1964 --


-- iteration 1965 --


-- iteration 1966 --


-- iteration 1967 --


-- iteration 1968 --


-- iteration 1969 --


-- iteration 1970 --


-- iteration 1971 --


-- iteration 1972 --


-- iteration 1973 --


-- iteration 1974 --


-- iteration 1975 --


-- iteration 1976 --


-- iteration 1977 --


-- iteration 1978 --


-- iteration 1979 --


-- iteration 1980 --


-- iteration 1981 --


-- iteration 1982 --


-- iteration 1983 --


-- iteration 1984 --


-- iteration 1985 --


-- iteration 1986 --


-- iteration 1987 --


-- iteration 1988 --


-- iteration 1989 --


-- iteration 1990 --


-- iteration 1991 --


-- iteration 1992 --


-- iteration 1993 --


-- iteration 1994 --


-- iteration 1995 --


-- iteration 1996 --


-- iteration 1997 --


-- iteration 1998 --


-- iteration 1999 --


-- iteration 2000 --


-- iteration 2001 --


-- iteration 2002 --


-- iteration 2003 --


-- iteration 2004 --


-- iteration 2005 --


-- iteration 2006 --


-- iteration 2007 --


-- iteration 2008 --


-- iteration 2009 --


-- iteration 2010 --


-- iteration 2011 --


-- iteration 2012 --


-- iteration 2013 --


-- iteration 2014 --


-- iteration 2015 --


-- iteration 2016 --


-- iteration 2017 --


-- iteration 2018 --


-- iteration 2019 --


-- iteration 2020 --


-- iteration 2021 --


-- iteration 2022 --


-- iteration 2023 --


-- iteration 2024 --


-- iteration 2025 --


-- iteration 2026 --


-- iteration 2027 --


-- iteration 2028 --


-- iteration 2029 --


-- iteration 2030 --


-- iteration 2031 --


-- iteration 2032 --


-- iteration 2033 --


-- iteration 2034 --


-- iteration 2035 --


-- iteration 2036 --


-- iteration 2037 --


-- iteration 2038 --


-- iteration 2039 --


-- iteration 2040 --


-- iteration 2041 --


-- iteration 2042 --


-- iteration 2043 --


-- iteration 2044 --


-- iteration 2045 --


-- iteration 2046 --


-- iteration 2047 --


-- iteration 2048 --


-- iteration 2049 --


-- iteration 2050 --


-- iteration 2051 --


-- iteration 2052 --


-- iteration 2053 --


-- iteration 2054 --


-- iteration 2055 --


-- iteration 2056 --


-- iteration 2057 --


-- iteration 2058 --


-- iteration 2059 --


-- iteration 2060 --


-- iteration 2061 --


-- iteration 2062 --


-- iteration 2063 --


-- iteration 2064 --


-- iteration 2065 --


-- iteration 2066 --


-- iteration 2067 --


-- iteration 2068 --


-- iteration 2069 --


-- iteration 2070 --


-- iteration 2071 --


-- iteration 2072 --


-- iteration 2073 --


-- iteration 2074 --


-- iteration 2075 --


-- iteration 2076 --


-- iteration 2077 --


-- iteration 2078 --


-- iteration 2079 --


-- iteration 2080 --


-- iteration 2081 --


-- iteration 2082 --


-- iteration 2083 --


-- iteration 2084 --


-- iteration 2085 --


-- iteration 2086 --


-- iteration 2087 --


-- iteration 2088 --


-- iteration 2089 --


-- iteration 2090 --


-- iteration 2091 --


-- iteration 2092 --


-- iteration 2093 --


-- iteration 2094 --


-- iteration 2095 --


-- iteration 2096 --


-- iteration 2097 --


-- iteration 2098 --


-- iteration 2099 --


-- iteration 2100 --


-- iteration 2101 --


-- iteration 2102 --


-- iteration 2103 --


-- iteration 2104 --


-- iteration 2105 --


-- iteration 2106 --


-- iteration 2107 --


-- iteration 2108 --


-- iteration 2109 --


-- iteration 2110 --


-- iteration 2111 --


-- iteration 2112 --


-- iteration 2113 --


-- iteration 2114 --


-- iteration 2115 --


-- iteration 2116 --


-- iteration 2117 --


-- iteration 2118 --


-- iteration 2119 --


-- iteration 2120 --


-- iteration 2121 --


-- iteration 2122 --


-- iteration 2123 --


-- iteration 2124 --


-- iteration 2125 --


-- iteration 2126 --


-- iteration 2127 --


-- iteration 2128 --


-- iteration 2129 --


-- iteration 2130 --


-- iteration 2131 --


-- iteration 2132 --


-- iteration 2133 --


-- iteration 2134 --


-- iteration 2135 --


-- iteration 2136 --


-- iteration 2137 --


-- iteration 2138 --


-- iteration 2139 --


-- iteration 2140 --


-- iteration 2141 --


-- iteration 2142 --


-- iteration 2143 --


-- iteration 2144 --


-- iteration 2145 --


-- iteration 2146 --


-- iteration 2147 --


-- iteration 2148 --


-- iteration 2149 --


-- iteration 2150 --


-- iteration 2151 --


-- iteration 2152 --


-- iteration 2153 --


-- iteration 2154 --


-- iteration 2155 --


-- iteration 2156 --


-- iteration 2157 --


-- iteration 2158 --


-- iteration 2159 --


-- iteration 2160 --


-- iteration 2161 --


-- iteration 2162 --


-- iteration 2163 --


-- iteration 2164 --


-- iteration 2165 --


-- iteration 2166 --


-- iteration 2167 --


-- iteration 2168 --


-- iteration 2169 --


-- iteration 2170 --


-- iteration 2171 --


-- iteration 2172 --


-- iteration 2173 --


-- iteration 2174 --


-- iteration 2175 --


-- iteration 2176 --


-- iteration 2177 --


-- iteration 2178 --


-- iteration 2179 --


-- iteration 2180 --


-- iteration 2181 --


-- iteration 2182 --


-- iteration 2183 --


-- iteration 2184 --


-- iteration 2185 --


-- iteration 2186 --


-- iteration 2187 --


-- iteration 2188 --


-- iteration 2189 --


-- iteration 2190 --


-- iteration 2191 --


-- iteration 2192 --


-- iteration 2193 --


-- iteration 2194 --


-- iteration 2195 --


-- iteration 2196 --


-- iteration 2197 --


-- iteration 2198 --


-- iteration 2199 --


-- iteration 2200 --


-- iteration 2201 --


-- iteration 2202 --


-- iteration 2203 --


-- iteration 2204 --


-- iteration 2205 --


-- iteration 2206 --


-- iteration 2207 --


-- iteration 2208 --


-- iteration 2209 --


-- iteration 2210 --


-- iteration 2211 --


-- iteration 2212 --


-- iteration 2213 --


-- iteration 2214 --


-- iteration 2215 --


-- iteration 2216 --


-- iteration 2217 --


-- iteration 2218 --


-- iteration 2219 --


-- iteration 2220 --


-- iteration 2221 --


-- iteration 2222 --


-- iteration 2223 --


-- iteration 2224 --


-- iteration 2225 --


-- iteration 2226 --


-- iteration 2227 --


-- iteration 2228 --


-- iteration 2229 --


-- iteration 2230 --


-- iteration 2231 --


-- iteration 2232 --


-- iteration 2233 --


-- iteration 2234 --


-- iteration 2235 --


-- iteration 2236 --


-- iteration 2237 --


-- iteration 2238 --


-- iteration 2239 --


-- iteration 2240 --


-- iteration 2241 --


-- iteration 2242 --


-- iteration 2243 --


-- iteration 2244 --


-- iteration 2245 --


-- iteration 2246 --


-- iteration 2247 --


-- iteration 2248 --


-- iteration 2249 --


-- iteration 2250 --


-- iteration 2251 --


-- iteration 2252 --


-- iteration 2253 --


-- iteration 2254 --


-- iteration 2255 --


-- iteration 2256 --


-- iteration 2257 --


-- iteration 2258 --


-- iteration 2259 --


-- iteration 2260 --


-- iteration 2261 --


-- iteration 2262 --


-- iteration 2263 --


-- iteration 2264 --


-- iteration 2265 --


-- iteration 2266 --


-- iteration 2267 --


-- iteration 2268 --


-- iteration 2269 --


-- iteration 2270 --


-- iteration 2271 --


-- iteration 2272 --


-- iteration 2273 --


-- iteration 2274 --


-- iteration 2275 --


-- iteration 2276 --


-- iteration 2277 --


-- iteration 2278 --


-- iteration 2279 --


-- iteration 2280 --


-- iteration 2281 --


-- iteration 2282 --


-- iteration 2283 --


-- iteration 2284 --


-- iteration 2285 --


-- iteration 2286 --


-- iteration 2287 --


-- iteration 2288 --


-- iteration 2289 --


-- iteration 2290 --


-- iteration 2291 --


-- iteration 2292 --


-- iteration 2293 --


-- iteration 2294 --


-- iteration 2295 --


-- iteration 2296 --


-- iteration 2297 --


-- iteration 2298 --


-- iteration 2299 --


-- iteration 2300 --


-- iteration 2301 --


-- iteration 2302 --


-- iteration 2303 --


-- iteration 2304 --


-- iteration 2305 --


-- iteration 2306 --


-- iteration 2307 --


-- iteration 2308 --


-- iteration 2309 --


-- iteration 2310 --


-- iteration 2311 --


-- iteration 2312 --


-- iteration 2313 --


-- iteration 2314 --


-- iteration 2315 --


-- iteration 2316 --


-- iteration 2317 --


-- iteration 2318 --


-- iteration 2319 --


-- iteration 2320 --


-- iteration 2321 --


-- iteration 2322 --


-- iteration 2323 --


-- iteration 2324 --


-- iteration 2325 --


-- iteration 2326 --


-- iteration 2327 --


-- iteration 2328 --


-- iteration 2329 --


-- iteration 2330 --


-- iteration 2331 --


-- iteration 2332 --


-- iteration 2333 --


-- iteration 2334 --


-- iteration 2335 --


-- iteration 2336 --


-- iteration 2337 --


-- iteration 2338 --


-- iteration 2339 --


-- iteration 2340 --


-- iteration 2341 --


-- iteration 2342 --


-- iteration 2343 --


-- iteration 2344 --


-- iteration 2345 --


-- iteration 2346 --


-- iteration 2347 --


-- iteration 2348 --


-- iteration 2349 --


-- iteration 2350 --


-- iteration 2351 --


-- iteration 2352 --


-- iteration 2353 --


-- iteration 2354 --


-- iteration 2355 --


-- iteration 2356 --


-- iteration 2357 --


-- iteration 2358 --


-- iteration 2359 --


-- iteration 2360 --


-- iteration 2361 --


-- iteration 2362 --


-- iteration 2363 --


-- iteration 2364 --


-- iteration 2365 --


-- iteration 2366 --


-- iteration 2367 --


-- iteration 2368 --


-- iteration 2369 --


-- iteration 2370 --


-- iteration 2371 --


-- iteration 2372 --


-- iteration 2373 --


-- iteration 2374 --


-- iteration 2375 --


-- iteration 2376 --


-- iteration 2377 --


-- iteration 2378 --


-- iteration 2379 --


-- iteration 2380 --


-- iteration 2381 --


-- iteration 2382 --


-- iteration 2383 --


-- iteration 2384 --


-- iteration 2385 --


-- iteration 2386 --


-- iteration 2387 --


-- iteration 2388 --


-- iteration 2389 --


-- iteration 2390 --


-- iteration 2391 --


-- iteration 2392 --


-- iteration 2393 --


-- iteration 2394 --


-- iteration 2395 --


-- iteration 2396 --


-- iteration 2397 --


-- iteration 2398 --


-- iteration 2399 --


-- iteration 2400 --


-- iteration 2401 --


-- iteration 2402 --


-- iteration 2403 --


-- iteration 2404 --


-- iteration 2405 --


-- iteration 2406 --


-- iteration 2407 --


-- iteration 2408 --


-- iteration 2409 --


-- iteration 2410 --


-- iteration 2411 --


-- iteration 2412 --


-- iteration 2413 --


-- iteration 2414 --


-- iteration 2415 --


-- iteration 2416 --


-- iteration 2417 --


-- iteration 2418 --


-- iteration 2419 --


-- iteration 2420 --


-- iteration 2421 --


-- iteration 2422 --


-- iteration 2423 --


-- iteration 2424 --


-- iteration 2425 --


-- iteration 2426 --


-- iteration 2427 --


-- iteration 2428 --


-- iteration 2429 --


-- iteration 2430 --


-- iteration 2431 --


-- iteration 2432 --


-- iteration 2433 --


-- iteration 2434 --


-- iteration 2435 --


-- iteration 2436 --


-- iteration 2437 --


-- iteration 2438 --


-- iteration 2439 --


-- iteration 2440 --


-- iteration 2441 --


-- iteration 2442 --


-- iteration 2443 --


-- iteration 2444 --


-- iteration 2445 --


-- iteration 2446 --


-- iteration 2447 --


-- iteration 2448 --


-- iteration 2449 --


-- iteration 2450 --


-- iteration 2451 --


-- iteration 2452 --


-- iteration 2453 --


-- iteration 2454 --


-- iteration 2455 --


-- iteration 2456 --


-- iteration 2457 --


-- iteration 2458 --


-- iteration 2459 --


-- iteration 2460 --


-- iteration 2461 --


-- iteration 2462 --


-- iteration 2463 --


-- iteration 2464 --


-- iteration 2465 --


-- iteration 2466 --


-- iteration 2467 --


-- iteration 2468 --


-- iteration 2469 --


-- iteration 2470 --


-- iteration 2471 --


-- iteration 2472 --


-- iteration 2473 --


-- iteration 2474 --


-- iteration 2475 --


-- iteration 2476 --


-- iteration 2477 --


-- iteration 2478 --


-- iteration 2479 --


-- iteration 2480 --


-- iteration 2481 --


-- iteration 2482 --


-- iteration 2483 --


-- iteration 2484 --


-- iteration 2485 --


-- iteration 2486 --


-- iteration 2487 --


-- iteration 2488 --


-- iteration 2489 --


-- iteration 2490 --


-- iteration 2491 --


-- iteration 2492 --


-- iteration 2493 --


-- iteration 2494 --


-- iteration 2495 --


-- iteration 2496 --


-- iteration 2497 --


-- iteration 2498 --


-- iteration 2499 --


-- iteration 2500 --


-- iteration 2501 --


-- iteration 2502 --


-- iteration 2503 --


-- iteration 2504 --


-- iteration 2505 --


-- iteration 2506 --


-- iteration 2507 --


-- iteration 2508 --


-- iteration 2509 --


-- iteration 2510 --


-- iteration 2511 --


-- iteration 2512 --


-- iteration 2513 --


-- iteration 2514 --


-- iteration 2515 --


-- iteration 2516 --


-- iteration 2517 --


-- iteration 2518 --


-- iteration 2519 --


-- iteration 2520 --


-- iteration 2521 --


-- iteration 2522 --


-- iteration 2523 --


-- iteration 2524 --


-- iteration 2525 --


-- iteration 2526 --


-- iteration 2527 --


-- iteration 2528 --


-- iteration 2529 --


-- iteration 2530 --


-- iteration 2531 --


-- iteration 2532 --


-- iteration 2533 --


-- iteration 2534 --


-- iteration 2535 --


-- iteration 2536 --


-- iteration 2537 --


-- iteration 2538 --


-- iteration 2539 --


-- iteration 2540 --


-- iteration 2541 --


-- iteration 2542 --


-- iteration 2543 --


-- iteration 2544 --


-- iteration 2545 --


-- iteration 2546 --


-- iteration 2547 --


-- iteration 2548 --


-- iteration 2549 --


-- iteration 2550 --


-- iteration 2551 --


-- iteration 2552 --


-- iteration 2553 --


-- iteration 2554 --


-- iteration 2555 --


-- iteration 2556 --


-- iteration 2557 --


-- iteration 2558 --


-- iteration 2559 --


-- iteration 2560 --


-- iteration 2561 --


-- iteration 2562 --


-- iteration 2563 --


-- iteration 2564 --


-- iteration 2565 --


-- iteration 2566 --


-- iteration 2567 --


-- iteration 2568 --


-- iteration 2569 --


-- iteration 2570 --


-- iteration 2571 --


-- iteration 2572 --


-- iteration 2573 --


-- iteration 2574 --


-- iteration 2575 --


-- iteration 2576 --


-- iteration 2577 --


-- iteration 2578 --


-- iteration 2579 --


-- iteration 2580 --


-- iteration 2581 --


-- iteration 2582 --


-- iteration 2583 --


-- iteration 2584 --


-- iteration 2585 --


-- iteration 2586 --


-- iteration 2587 --


-- iteration 2588 --


-- iteration 2589 --


-- iteration 2590 --


-- iteration 2591 --


-- iteration 2592 --


-- iteration 2593 --


-- iteration 2594 --


-- iteration 2595 --


-- iteration 2596 --


-- iteration 2597 --


-- iteration 2598 --


-- iteration 2599 --


-- iteration 2600 --


-- iteration 2601 --


-- iteration 2602 --


-- iteration 2603 --


-- iteration 2604 --


-- iteration 2605 --


-- iteration 2606 --


-- iteration 2607 --


-- iteration 2608 --


-- iteration 2609 --


-- iteration 2610 --


-- iteration 2611 --


-- iteration 2612 --


-- iteration 2613 --


-- iteration 2614 --


-- iteration 2615 --


-- iteration 2616 --


-- iteration 2617 --


-- iteration 2618 --


-- iteration 2619 --


-- iteration 2620 --


-- iteration 2621 --


-- iteration 2622 --


-- iteration 2623 --


-- iteration 2624 --


-- iteration 2625 --


-- iteration 2626 --


-- iteration 2627 --


-- iteration 2628 --


-- iteration 2629 --


-- iteration 2630 --


-- iteration 2631 --


-- iteration 2632 --


-- iteration 2633 --


-- iteration 2634 --


-- iteration 2635 --


-- iteration 2636 --


-- iteration 2637 --


-- iteration 2638 --


-- iteration 2639 --


-- iteration 2640 --


-- iteration 2641 --


-- iteration 2642 --


-- iteration 2643 --


-- iteration 2644 --


-- iteration 2645 --


-- iteration 2646 --


-- iteration 2647 --


-- iteration 2648 --


-- iteration 2649 --


-- iteration 2650 --


-- iteration 2651 --


-- iteration 2652 --


-- iteration 2653 --


-- iteration 2654 --


-- iteration 2655 --


-- iteration 2656 --


-- iteration 2657 --


-- iteration 2658 --


-- iteration 2659 --


-- iteration 2660 --


-- iteration 2661 --


-- iteration 2662 --


-- iteration 2663 --


-- iteration 2664 --


-- iteration 2665 --


-- iteration 2666 --


-- iteration 2667 --


-- iteration 2668 --


-- iteration 2669 --


-- iteration 2670 --


-- iteration 2671 --


-- iteration 2672 --


-- iteration 2673 --


-- iteration 2674 --


-- iteration 2675 --


-- iteration 2676 --


-- iteration 2677 --


-- iteration 2678 --


-- iteration 2679 --


-- iteration 2680 --


-- iteration 2681 --


-- iteration 2682 --


-- iteration 2683 --


-- iteration 2684 --


-- iteration 2685 --


-- iteration 2686 --


-- iteration 2687 --


-- iteration 2688 --


-- iteration 2689 --


-- iteration 2690 --


-- iteration 2691 --


-- iteration 2692 --


-- iteration 2693 --


-- iteration 2694 --


-- iteration 2695 --


-- iteration 2696 --


-- iteration 2697 --


-- iteration 2698 --


-- iteration 2699 --


-- iteration 2700 --


-- iteration 2701 --


-- iteration 2702 --


-- iteration 2703 --


-- iteration 2704 --


-- iteration 2705 --


-- iteration 2706 --


-- iteration 2707 --


-- iteration 2708 --


-- iteration 2709 --


-- iteration 2710 --


-- iteration 2711 --


-- iteration 2712 --


-- iteration 2713 --


-- iteration 2714 --


-- iteration 2715 --


-- iteration 2716 --


-- iteration 2717 --


-- iteration 2718 --


-- iteration 2719 --


-- iteration 2720 --


-- iteration 2721 --


-- iteration 2722 --


-- iteration 2723 --


-- iteration 2724 --


-- iteration 2725 --


-- iteration 2726 --


-- iteration 2727 --


-- iteration 2728 --


-- iteration 2729 --


-- iteration 2730 --


-- iteration 2731 --


-- iteration 2732 --


-- iteration 2733 --


-- iteration 2734 --


-- iteration 2735 --


-- iteration 2736 --


-- iteration 2737 --


-- iteration 2738 --


-- iteration 2739 --


-- iteration 2740 --


-- iteration 2741 --


-- iteration 2742 --


-- iteration 2743 --


-- iteration 2744 --


-- iteration 2745 --


-- iteration 2746 --


-- iteration 2747 --


-- iteration 2748 --


-- iteration 2749 --


-- iteration 2750 --


-- iteration 2751 --


-- iteration 2752 --


-- iteration 2753 --


-- iteration 2754 --


-- iteration 2755 --


-- iteration 2756 --


-- iteration 2757 --


-- iteration 2758 --


-- iteration 2759 --


-- iteration 2760 --


-- iteration 2761 --


-- iteration 2762 --


-- iteration 2763 --


-- iteration 2764 --


-- iteration 2765 --


-- iteration 2766 --


-- iteration 2767 --


-- iteration 2768 --


-- iteration 2769 --


-- iteration 2770 --


-- iteration 2771 --


-- iteration 2772 --


-- iteration 2773 --


-- iteration 2774 --


-- iteration 2775 --


-- iteration 2776 --


-- iteration 2777 --


-- iteration 2778 --


-- iteration 2779 --


-- iteration 2780 --


-- iteration 2781 --


-- iteration 2782 --


-- iteration 2783 --


-- iteration 2784 --


-- iteration 2785 --


-- iteration 2786 --


-- iteration 2787 --


-- iteration 2788 --


-- iteration 2789 --


-- iteration 2790 --


-- iteration 2791 --


-- iteration 2792 --


-- iteration 2793 --


-- iteration 2794 --


-- iteration 2795 --


-- iteration 2796 --


-- iteration 2797 --


-- iteration 2798 --


-- iteration 2799 --


-- iteration 2800 --


-- iteration 2801 --


-- iteration 2802 --


-- iteration 2803 --


-- iteration 2804 --


-- iteration 2805 --


-- iteration 2806 --


-- iteration 2807 --


-- iteration 2808 --


-- iteration 2809 --


-- iteration 2810 --


-- iteration 2811 --


-- iteration 2812 --


-- iteration 2813 --


-- iteration 2814 --


-- iteration 2815 --


-- iteration 2816 --


-- iteration 2817 --


-- iteration 2818 --


-- iteration 2819 --


-- iteration 2820 --


-- iteration 2821 --


-- iteration 2822 --


-- iteration 2823 --


-- iteration 2824 --


-- iteration 2825 --


-- iteration 2826 --


-- iteration 2827 --


-- iteration 2828 --


-- iteration 2829 --


-- iteration 2830 --


-- iteration 2831 --


-- iteration 2832 --


-- iteration 2833 --


-- iteration 2834 --


-- iteration 2835 --


-- iteration 2836 --


-- iteration 2837 --


-- iteration 2838 --


-- iteration 2839 --


-- iteration 2840 --


-- iteration 2841 --


-- iteration 2842 --


-- iteration 2843 --


-- iteration 2844 --


-- iteration 2845 --


-- iteration 2846 --


-- iteration 2847 --


-- iteration 2848 --


-- iteration 2849 --


-- iteration 2850 --


-- iteration 2851 --


-- iteration 2852 --


-- iteration 2853 --


-- iteration 2854 --


-- iteration 2855 --


-- iteration 2856 --


-- iteration 2857 --


-- iteration 2858 --


-- iteration 2859 --


-- iteration 2860 --


-- iteration 2861 --


-- iteration 2862 --


-- iteration 2863 --


-- iteration 2864 --


-- iteration 2865 --


-- iteration 2866 --


-- iteration 2867 --


-- iteration 2868 --


-- iteration 2869 --


-- iteration 2870 --


-- iteration 2871 --


-- iteration 2872 --


-- iteration 2873 --


-- iteration 2874 --


-- iteration 2875 --


-- iteration 2876 --


-- iteration 2877 --


-- iteration 2878 --


-- iteration 2879 --


-- iteration 2880 --


-- iteration 2881 --


-- iteration 2882 --


-- iteration 2883 --


-- iteration 2884 --


-- iteration 2885 --


-- iteration 2886 --


-- iteration 2887 --


-- iteration 2888 --


-- iteration 2889 --


-- iteration 2890 --


-- iteration 2891 --


-- iteration 2892 --


-- iteration 2893 --


-- iteration 2894 --


-- iteration 2895 --


-- iteration 2896 --


-- iteration 2897 --


-- iteration 2898 --


-- iteration 2899 --


-- iteration 2900 --


-- iteration 2901 --


-- iteration 2902 --


-- iteration 2903 --


-- iteration 2904 --


-- iteration 2905 --


-- iteration 2906 --


-- iteration 2907 --


-- iteration 2908 --


-- iteration 2909 --


-- iteration 2910 --


-- iteration 2911 --


-- iteration 2912 --


-- iteration 2913 --


-- iteration 2914 --


-- iteration 2915 --


-- iteration 2916 --


-- iteration 2917 --


-- iteration 2918 --


-- iteration 2919 --


-- iteration 2920 --


-- iteration 2921 --


-- iteration 2922 --


-- iteration 2923 --


-- iteration 2924 --


-- iteration 2925 --


-- iteration 2926 --


-- iteration 2927 --


-- iteration 2928 --


-- iteration 2929 --


-- iteration 2930 --


-- iteration 2931 --


-- iteration 2932 --


-- iteration 2933 --


-- iteration 2934 --


-- iteration 2935 --


-- iteration 2936 --


-- iteration 2937 --


-- iteration 2938 --


-- iteration 2939 --


-- iteration 2940 --


-- iteration 2941 --


-- iteration 2942 --


-- iteration 2943 --


-- iteration 2944 --


-- iteration 2945 --


-- iteration 2946 --


-- iteration 2947 --


-- iteration 2948 --


-- iteration 2949 --


-- iteration 2950 --


-- iteration 2951 --


-- iteration 2952 --


-- iteration 2953 --


-- iteration 2954 --


-- iteration 2955 --


-- iteration 2956 --


-- iteration 2957 --


-- iteration 2958 --


-- iteration 2959 --


-- iteration 2960 --


-- iteration 2961 --


-- iteration 2962 --


-- iteration 2963 --


-- iteration 2964 --


-- iteration 2965 --


-- iteration 2966 --


-- iteration 2967 --


-- iteration 2968 --


-- iteration 2969 --


-- iteration 2970 --


-- iteration 2971 --


-- iteration 2972 --


-- iteration 2973 --


-- iteration 2974 --


-- iteration 2975 --


-- iteration 2976 --


-- iteration 2977 --


-- iteration 2978 --


-- iteration 2979 --


-- iteration 2980 --


-- iteration 2981 --


-- iteration 2982 --


-- iteration 2983 --


-- iteration 2984 --


-- iteration 2985 --


-- iteration 2986 --


-- iteration 2987 --


-- iteration 2988 --


-- iteration 2989 --


-- iteration 2990 --


-- iteration 2991 --


-- iteration 2992 --


-- iteration 2993 --


-- iteration 2994 --


-- iteration 2995 --


-- iteration 2996 --


-- iteration 2997 --


-- iteration 2998 --


-- iteration 2999 --


-- iteration 3000 --


-- iteration 3001 --


-- iteration 3002 --


-- iteration 3003 --


-- iteration 3004 --


-- iteration 3005 --


-- iteration 3006 --


-- iteration 3007 --


-- iteration 3008 --


-- iteration 3009 --


-- iteration 3010 --


-- iteration 3011 --


-- iteration 3012 --


-- iteration 3013 --


-- iteration 3014 --


-- iteration 3015 --


-- iteration 3016 --


-- iteration 3017 --


-- iteration 3018 --


-- iteration 3019 --


-- iteration 3020 --


-- iteration 3021 --


-- iteration 3022 --


-- iteration 3023 --


-- iteration 3024 --


-- iteration 3025 --


-- iteration 3026 --


-- iteration 3027 --


-- iteration 3028 --


-- iteration 3029 --


-- iteration 3030 --


-- iteration 3031 --


-- iteration 3032 --


-- iteration 3033 --


-- iteration 3034 --


-- iteration 3035 --


-- iteration 3036 --


-- iteration 3037 --


-- iteration 3038 --


-- iteration 3039 --


-- iteration 3040 --


-- iteration 3041 --


-- iteration 3042 --


-- iteration 3043 --


-- iteration 3044 --


-- iteration 3045 --


-- iteration 3046 --


-- iteration 3047 --


-- iteration 3048 --


-- iteration 3049 --


-- iteration 3050 --


-- iteration 3051 --


-- iteration 3052 --


-- iteration 3053 --


-- iteration 3054 --


-- iteration 3055 --


-- iteration 3056 --


-- iteration 3057 --


-- iteration 3058 --


-- iteration 3059 --


-- iteration 3060 --


-- iteration 3061 --


-- iteration 3062 --


-- iteration 3063 --


-- iteration 3064 --


-- iteration 3065 --


-- iteration 3066 --


-- iteration 3067 --


-- iteration 3068 --


-- iteration 3069 --


-- iteration 3070 --


-- iteration 3071 --


-- iteration 3072 --


-- iteration 3073 --


-- iteration 3074 --


-- iteration 3075 --


-- iteration 3076 --


-- iteration 3077 --


-- iteration 3078 --


-- iteration 3079 --


-- iteration 3080 --


-- iteration 3081 --


-- iteration 3082 --


-- iteration 3083 --


-- iteration 3084 --


-- iteration 3085 --


-- iteration 3086 --


-- iteration 3087 --


-- iteration 3088 --


-- iteration 3089 --


-- iteration 3090 --


-- iteration 3091 --


-- iteration 3092 --


-- iteration 3093 --


-- iteration 3094 --


-- iteration 3095 --


-- iteration 3096 --


-- iteration 3097 --


-- iteration 3098 --


-- iteration 3099 --


-- iteration 3100 --


-- iteration 3101 --


-- iteration 3102 --


-- iteration 3103 --


-- iteration 3104 --


-- iteration 3105 --


-- iteration 3106 --


-- iteration 3107 --


-- iteration 3108 --


-- iteration 3109 --


-- iteration 3110 --


-- iteration 3111 --


-- iteration 3112 --


-- iteration 3113 --


-- iteration 3114 --


-- iteration 3115 --


-- iteration 3116 --


-- iteration 3117 --


-- iteration 3118 --


-- iteration 3119 --


-- iteration 3120 --


-- iteration 3121 --


-- iteration 3122 --


-- iteration 3123 --


-- iteration 3124 --


-- iteration 3125 --


-- iteration 3126 --


-- iteration 3127 --


-- iteration 3128 --


-- iteration 3129 --


-- iteration 3130 --


-- iteration 3131 --


-- iteration 3132 --


-- iteration 3133 --


-- iteration 3134 --


-- iteration 3135 --


-- iteration 3136 --


-- iteration 3137 --


-- iteration 3138 --


-- iteration 3139 --


-- iteration 3140 --


-- iteration 3141 --


-- iteration 3142 --


-- iteration 3143 --


-- iteration 3144 --


-- iteration 3145 --


-- iteration 3146 --


-- iteration 3147 --


-- iteration 3148 --


-- iteration 3149 --


-- iteration 3150 --


-- iteration 3151 --


-- iteration 3152 --


-- iteration 3153 --


-- iteration 3154 --


-- iteration 3155 --


-- iteration 3156 --


-- iteration 3157 --


-- iteration 3158 --


-- iteration 3159 --


-- iteration 3160 --


-- iteration 3161 --


-- iteration 3162 --


-- iteration 3163 --


-- iteration 3164 --


-- iteration 3165 --


-- iteration 3166 --


-- iteration 3167 --


-- iteration 3168 --


-- iteration 3169 --


-- iteration 3170 --


-- iteration 3171 --


-- iteration 3172 --


-- iteration 3173 --


-- iteration 3174 --


-- iteration 3175 --


-- iteration 3176 --


-- iteration 3177 --


-- iteration 3178 --


-- iteration 3179 --


-- iteration 3180 --


-- iteration 3181 --


-- iteration 3182 --


-- iteration 3183 --


-- iteration 3184 --


-- iteration 3185 --


-- iteration 3186 --


-- iteration 3187 --


-- iteration 3188 --


-- iteration 3189 --


-- iteration 3190 --


-- iteration 3191 --


-- iteration 3192 --


-- iteration 3193 --


-- iteration 3194 --


-- iteration 3195 --


-- iteration 3196 --


-- iteration 3197 --


-- iteration 3198 --


-- iteration 3199 --


-- iteration 3200 --


-- iteration 3201 --


-- iteration 3202 --


-- iteration 3203 --


-- iteration 3204 --


-- iteration 3205 --


-- iteration 3206 --


-- iteration 3207 --


-- iteration 3208 --


-- iteration 3209 --


-- iteration 3210 --


-- iteration 3211 --


-- iteration 3212 --


-- iteration 3213 --


-- iteration 3214 --


-- iteration 3215 --


-- iteration 3216 --


-- iteration 3217 --


-- iteration 3218 --


-- iteration 3219 --


-- iteration 3220 --


-- iteration 3221 --


-- iteration 3222 --


-- iteration 3223 --


-- iteration 3224 --


-- iteration 3225 --


-- iteration 3226 --


-- iteration 3227 --


-- iteration 3228 --


-- iteration 3229 --


-- iteration 3230 --


-- iteration 3231 --


-- iteration 3232 --


-- iteration 3233 --


-- iteration 3234 --


-- iteration 3235 --


-- iteration 3236 --


-- iteration 3237 --


-- iteration 3238 --


-- iteration 3239 --


-- iteration 3240 --


-- iteration 3241 --


-- iteration 3242 --


-- iteration 3243 --


-- iteration 3244 --


-- iteration 3245 --


-- iteration 3246 --


-- iteration 3247 --


-- iteration 3248 --


-- iteration 3249 --


-- iteration 3250 --


-- iteration 3251 --


-- iteration 3252 --


-- iteration 3253 --


-- iteration 3254 --


-- iteration 3255 --


-- iteration 3256 --


-- iteration 3257 --


-- iteration 3258 --


-- iteration 3259 --


-- iteration 3260 --


-- iteration 3261 --


-- iteration 3262 --


-- iteration 3263 --


-- iteration 3264 --


-- iteration 3265 --


-- iteration 3266 --


-- iteration 3267 --


-- iteration 3268 --


-- iteration 3269 --


-- iteration 3270 --


-- iteration 3271 --


-- iteration 3272 --


-- iteration 3273 --


-- iteration 3274 --


-- iteration 3275 --


-- iteration 3276 --


-- iteration 3277 --


-- iteration 3278 --


-- iteration 3279 --


-- iteration 3280 --


-- iteration 3281 --


-- iteration 3282 --


-- iteration 3283 --


-- iteration 3284 --


-- iteration 3285 --


-- iteration 3286 --


-- iteration 3287 --


-- iteration 3288 --


-- iteration 3289 --


-- iteration 3290 --


-- iteration 3291 --


-- iteration 3292 --


-- iteration 3293 --


-- iteration 3294 --


-- iteration 3295 --


-- iteration 3296 --


-- iteration 3297 --


-- iteration 3298 --


-- iteration 3299 --


-- iteration 3300 --


-- iteration 3301 --


-- iteration 3302 --


-- iteration 3303 --


-- iteration 3304 --


-- iteration 3305 --


-- iteration 3306 --


-- iteration 3307 --


-- iteration 3308 --


-- iteration 3309 --


-- iteration 3310 --


-- iteration 3311 --


-- iteration 3312 --


-- iteration 3313 --


-- iteration 3314 --


-- iteration 3315 --


-- iteration 3316 --


-- iteration 3317 --


-- iteration 3318 --


-- iteration 3319 --


-- iteration 3320 --


-- iteration 3321 --


-- iteration 3322 --


-- iteration 3323 --


-- iteration 3324 --


-- iteration 3325 --


-- iteration 3326 --


-- iteration 3327 --


-- iteration 3328 --


-- iteration 3329 --


-- iteration 3330 --


-- iteration 3331 --


-- iteration 3332 --


-- iteration 3333 --


-- iteration 3334 --


-- iteration 3335 --


-- iteration 3336 --


-- iteration 3337 --


-- iteration 3338 --


-- iteration 3339 --


-- iteration 3340 --


-- iteration 3341 --


-- iteration 3342 --


-- iteration 3343 --


-- iteration 3344 --


-- iteration 3345 --


-- iteration 3346 --


-- iteration 3347 --


-- iteration 3348 --


-- iteration 3349 --


-- iteration 3350 --


-- iteration 3351 --


-- iteration 3352 --


-- iteration 3353 --


-- iteration 3354 --


-- iteration 3355 --


-- iteration 3356 --


-- iteration 3357 --


-- iteration 3358 --


-- iteration 3359 --


-- iteration 3360 --


-- iteration 3361 --


-- iteration 3362 --


-- iteration 3363 --


-- iteration 3364 --


-- iteration 3365 --


-- iteration 3366 --


-- iteration 3367 --


-- iteration 3368 --


-- iteration 3369 --


-- iteration 3370 --


-- iteration 3371 --


-- iteration 3372 --


-- iteration 3373 --


-- iteration 3374 --


-- iteration 3375 --


-- iteration 3376 --


-- iteration 3377 --


-- iteration 3378 --


-- iteration 3379 --


-- iteration 3380 --


-- iteration 3381 --


-- iteration 3382 --


-- iteration 3383 --


-- iteration 3384 --


-- iteration 3385 --


-- iteration 3386 --


-- iteration 3387 --


-- iteration 3388 --


-- iteration 3389 --


-- iteration 3390 --


-- iteration 3391 --


-- iteration 3392 --


-- iteration 3393 --


-- iteration 3394 --


-- iteration 3395 --


-- iteration 3396 --


-- iteration 3397 --


-- iteration 3398 --


-- iteration 3399 --


-- iteration 3400 --


-- iteration 3401 --


-- iteration 3402 --


-- iteration 3403 --


-- iteration 3404 --


-- iteration 3405 --


-- iteration 3406 --


-- iteration 3407 --


-- iteration 3408 --


-- iteration 3409 --


-- iteration 3410 --


-- iteration 3411 --


-- iteration 3412 --


-- iteration 3413 --


-- iteration 3414 --


-- iteration 3415 --


-- iteration 3416 --


-- iteration 3417 --


-- iteration 3418 --


-- iteration 3419 --


-- iteration 3420 --


-- iteration 3421 --


-- iteration 3422 --


-- iteration 3423 --


-- iteration 3424 --


-- iteration 3425 --


-- iteration 3426 --


-- iteration 3427 --


-- iteration 3428 --


-- iteration 3429 --


-- iteration 3430 --


-- iteration 3431 --


-- iteration 3432 --


-- iteration 3433 --


-- iteration 3434 --


-- iteration 3435 --


-- iteration 3436 --


-- iteration 3437 --


-- iteration 3438 --


-- iteration 3439 --


-- iteration 3440 --


-- iteration 3441 --


-- iteration 3442 --


-- iteration 3443 --


-- iteration 3444 --


-- iteration 3445 --


-- iteration 3446 --


-- iteration 3447 --


-- iteration 3448 --


-- iteration 3449 --


-- iteration 3450 --


-- iteration 3451 --


-- iteration 3452 --


-- iteration 3453 --


-- iteration 3454 --


-- iteration 3455 --


-- iteration 3456 --


-- iteration 3457 --


-- iteration 3458 --


-- iteration 3459 --


-- iteration 3460 --


-- iteration 3461 --


-- iteration 3462 --


-- iteration 3463 --


-- iteration 3464 --


-- iteration 3465 --


-- iteration 3466 --


-- iteration 3467 --


-- iteration 3468 --


-- iteration 3469 --


-- iteration 3470 --


-- iteration 3471 --


-- iteration 3472 --


-- iteration 3473 --


-- iteration 3474 --


-- iteration 3475 --


-- iteration 3476 --


-- iteration 3477 --


-- iteration 3478 --


-- iteration 3479 --


-- iteration 3480 --


-- iteration 3481 --


-- iteration 3482 --


-- iteration 3483 --


-- iteration 3484 --


-- iteration 3485 --


-- iteration 3486 --


-- iteration 3487 --


-- iteration 3488 --


-- iteration 3489 --


-- iteration 3490 --


-- iteration 3491 --


-- iteration 3492 --


-- iteration 3493 --


-- iteration 3494 --


-- iteration 3495 --


-- iteration 3496 --


-- iteration 3497 --


-- iteration 3498 --


-- iteration 3499 --


-- iteration 3500 --


-- iteration 3501 --


-- iteration 3502 --


-- iteration 3503 --


-- iteration 3504 --


-- iteration 3505 --


-- iteration 3506 --


-- iteration 3507 --


-- iteration 3508 --


-- iteration 3509 --


-- iteration 3510 --


-- iteration 3511 --


-- iteration 3512 --


-- iteration 3513 --


-- iteration 3514 --


-- iteration 3515 --


-- iteration 3516 --


-- iteration 3517 --


-- iteration 3518 --


-- iteration 3519 --


-- iteration 3520 --


-- iteration 3521 --


-- iteration 3522 --


-- iteration 3523 --


-- iteration 3524 --


-- iteration 3525 --


-- iteration 3526 --


-- iteration 3527 --


-- iteration 3528 --


-- iteration 3529 --


-- iteration 3530 --


-- iteration 3531 --


-- iteration 3532 --


-- iteration 3533 --


-- iteration 3534 --


-- iteration 3535 --


-- iteration 3536 --


-- iteration 3537 --


-- iteration 3538 --


-- iteration 3539 --


-- iteration 3540 --


-- iteration 3541 --


-- iteration 3542 --


-- iteration 3543 --


-- iteration 3544 --


-- iteration 3545 --


-- iteration 3546 --


-- iteration 3547 --


-- iteration 3548 --


-- iteration 3549 --


-- iteration 3550 --


-- iteration 3551 --


-- iteration 3552 --


-- iteration 3553 --


-- iteration 3554 --


-- iteration 3555 --


-- iteration 3556 --


-- iteration 3557 --


-- iteration 3558 --


-- iteration 3559 --


-- iteration 3560 --


-- iteration 3561 --


-- iteration 3562 --


-- iteration 3563 --


-- iteration 3564 --


-- iteration 3565 --


-- iteration 3566 --


-- iteration 3567 --


-- iteration 3568 --


-- iteration 3569 --


-- iteration 3570 --


-- iteration 3571 --


-- iteration 3572 --


-- iteration 3573 --


-- iteration 3574 --


-- iteration 3575 --


-- iteration 3576 --


-- iteration 3577 --


-- iteration 3578 --


-- iteration 3579 --


-- iteration 3580 --


-- iteration 3581 --


-- iteration 3582 --


-- iteration 3583 --


-- iteration 3584 --


-- iteration 3585 --


-- iteration 3586 --


-- iteration 3587 --


-- iteration 3588 --


-- iteration 3589 --


-- iteration 3590 --


-- iteration 3591 --


-- iteration 3592 --


-- iteration 3593 --


-- iteration 3594 --


-- iteration 3595 --


-- iteration 3596 --


-- iteration 3597 --


-- iteration 3598 --


-- iteration 3599 --


-- iteration 3600 --


-- iteration 3601 --


-- iteration 3602 --


-- iteration 3603 --


-- iteration 3604 --


-- iteration 3605 --


-- iteration 3606 --


-- iteration 3607 --


-- iteration 3608 --


-- iteration 3609 --


-- iteration 3610 --


-- iteration 3611 --


-- iteration 3612 --


-- iteration 3613 --


-- iteration 3614 --


-- iteration 3615 --


-- iteration 3616 --


-- iteration 3617 --


-- iteration 3618 --


-- iteration 3619 --


-- iteration 3620 --


-- iteration 3621 --


-- iteration 3622 --


-- iteration 3623 --


-- iteration 3624 --


-- iteration 3625 --


-- iteration 3626 --


-- iteration 3627 --


-- iteration 3628 --


-- iteration 3629 --


-- iteration 3630 --


-- iteration 3631 --


-- iteration 3632 --


-- iteration 3633 --


-- iteration 3634 --


-- iteration 3635 --


-- iteration 3636 --


-- iteration 3637 --


-- iteration 3638 --


-- iteration 3639 --


-- iteration 3640 --


-- iteration 3641 --


-- iteration 3642 --


-- iteration 3643 --


-- iteration 3644 --


-- iteration 3645 --


-- iteration 3646 --


-- iteration 3647 --


-- iteration 3648 --


-- iteration 3649 --


-- iteration 3650 --


-- iteration 3651 --


-- iteration 3652 --


-- iteration 3653 --


-- iteration 3654 --


-- iteration 3655 --


-- iteration 3656 --


-- iteration 3657 --


-- iteration 3658 --


-- iteration 3659 --


-- iteration 3660 --


-- iteration 3661 --


-- iteration 3662 --


-- iteration 3663 --


-- iteration 3664 --


-- iteration 3665 --


-- iteration 3666 --


-- iteration 3667 --


-- iteration 3668 --


-- iteration 3669 --


-- iteration 3670 --


-- iteration 3671 --


-- iteration 3672 --


-- iteration 3673 --


-- iteration 3674 --


-- iteration 3675 --


-- iteration 3676 --


-- iteration 3677 --


-- iteration 3678 --


-- iteration 3679 --


-- iteration 3680 --


-- iteration 3681 --


-- iteration 3682 --


-- iteration 3683 --


-- iteration 3684 --


-- iteration 3685 --


-- iteration 3686 --


-- iteration 3687 --


-- iteration 3688 --


-- iteration 3689 --


-- iteration 3690 --


-- iteration 3691 --


-- iteration 3692 --


-- iteration 3693 --


-- iteration 3694 --


-- iteration 3695 --


-- iteration 3696 --


-- iteration 3697 --


-- iteration 3698 --


-- iteration 3699 --


-- iteration 3700 --


-- iteration 3701 --


-- iteration 3702 --


-- iteration 3703 --


-- iteration 3704 --


-- iteration 3705 --


-- iteration 3706 --


-- iteration 3707 --


-- iteration 3708 --


-- iteration 3709 --


-- iteration 3710 --


-- iteration 3711 --


-- iteration 3712 --


-- iteration 3713 --


-- iteration 3714 --


-- iteration 3715 --


-- iteration 3716 --


-- iteration 3717 --


-- iteration 3718 --


-- iteration 3719 --


-- iteration 3720 --


-- iteration 3721 --


-- iteration 3722 --


-- iteration 3723 --


-- iteration 3724 --


-- iteration 3725 --


-- iteration 3726 --


-- iteration 3727 --


-- iteration 3728 --


-- iteration 3729 --


-- iteration 3730 --


-- iteration 3731 --


-- iteration 3732 --


-- iteration 3733 --


-- iteration 3734 --
(declare-fun f0 (Float64) Float64)
(declare-fun p0 (Float64 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float16)
; GENERATING CONSTS
(declare-const ?float4 Float32)
(assert (= ?float4 (fp #b0 #b11011101 #b00000100111111000100001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.sqrt RTN ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.neg ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (f0 ((_ to_fp 11 53) RTZ ?float7))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.mul RTN ?float3 ?float3)))
(declare-const ?float10 Float64)
(assert (= ?float10 (f0 ((_ to_fp 11 53) RTP ?float6))))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNormal ?float7)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float8 ((_ to_fp 11 53) RTZ ?float9))))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.leq ((_ to_fp 8 24) RNE ?float8) ?float5)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNegative ?float3)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float5)))
; FINAL ASSERT
(assert (and (and ?bool15 (or ?bool14 (and ?bool13 ?bool11 ?bool12) (and ?bool15 ?bool15 ?bool13))) ?bool11 (and ?bool13 ?bool14 (and ?bool15))))
(check-sat)


-- iteration 3735 --
(declare-fun f0 (Float16) Float128)
(declare-fun p0 (Float32 Float128 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float128)
(declare-const ?float3 Float32)
; GENERATING CONSTS
(declare-const ?float4 Float16)
(assert (= ?float4 (fp #b1 #b00010 #b0011110000)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000000)))
; DERIVE FLOATS
(declare-const ?float6 Float32)
(assert (= ?float6 (fp.neg ?float5)))
(declare-const ?float7 Float32)
(assert (= ?float7 (fp.sub RTZ ?float5 ?float6)))
(declare-const ?float8 Float128)
(assert (= ?float8 (fp.mul RTZ ?float2 ((_ to_fp 15 113) RTP ?float7))))
(declare-const ?float9 Float32)
(assert (= ?float9 (fp.sqrt RTN ?float5)))
(declare-const ?float10 Float32)
(assert (= ?float10 (fp.abs ?float7)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTP ?float6) ?float8)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 5 11) RTP ?float6))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float4)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isNaN ?float10)))
; FINAL ASSERT
(assert (and (and (and ?bool14))))
(check-sat)


-- iteration 3736 --
(declare-fun f0 (Float32 Float128 Float32) Float16)
(declare-fun p0 (Float32 Float16) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float32)
(declare-const ?float3 Float128)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float32)
(assert (= ?float5 (fp #b1 #b00000001 #b00000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (fp.add RTN ((_ to_fp 15 113) RTP ?float4) ?float3)))
(declare-const ?float7 Float16)
(assert (= ?float7 (f0 ((_ to_fp 8 24) RTN ?float6) ?float6 ((_ to_fp 8 24) RNE ?float3))))
(declare-const ?float8 Float16)
(assert (= ?float8 (f0 ?float2 ((_ to_fp 15 113) RTZ ?float5) ((_ to_fp 8 24) RNE ?float4))))
(declare-const ?float9 Float16)
(assert (= ?float9 (fp.min ((_ to_fp 5 11) RTP ?float6) ?float7)))
(declare-const ?float10 Float16)
(assert (= ?float10 (fp.sqrt RTP ?float8)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isZero ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ((_ to_fp 15 113) RTP ?float2) ?float6)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (fp.lt ?float4 ((_ to_fp 11 53) RTN ?float9))))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (p0 ((_ to_fp 8 24) RTN ?float3) ((_ to_fp 5 11) RNE ?float6))))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.isZero ?float7)))
; FINAL ASSERT
(assert (and (and ?bool14 ?bool13) (or (and ?bool13 (and ?bool14)))))
(check-sat)


-- iteration 3737 --
(declare-fun f0 (Float32 Float128) Float128)
(declare-fun p0 (Float64 Float128) Bool)
; GENERATING VARIABLES
(declare-const ?float2 Float64)
(declare-const ?float3 Float64)
; GENERATING CONSTS
(declare-const ?float4 Float64)
(assert (= ?float4 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
(declare-const ?float5 Float64)
(assert (= ?float5 (fp #b1 #b00000000001 #b0000000000000000000000000000000000000000000000000001)))
; DERIVE FLOATS
(declare-const ?float6 Float128)
(assert (= ?float6 (f0 ((_ to_fp 8 24) RTZ ?float4) ((_ to_fp 15 113) RNE ?float3))))
(declare-const ?float7 Float64)
(assert (= ?float7 (fp.sqrt RTN ?float5)))
(declare-const ?float8 Float64)
(assert (= ?float8 (fp.add RNE ?float4 ?float2)))
(declare-const ?float9 Float64)
(assert (= ?float9 (fp.neg ?float4)))
(declare-const ?float10 Float64)
(assert (= ?float10 (fp.abs ?float4)))
; DERIVE BOOLS
(declare-const ?bool11 Bool)
(assert (= ?bool11 (fp.isNaN ?float8)))
(declare-const ?bool12 Bool)
(assert (= ?bool12 (fp.gt ?float2 ?float2)))
(declare-const ?bool13 Bool)
(assert (= ?bool13 (p0 ?float5 ?float6)))
(declare-const ?bool14 Bool)
(assert (= ?bool14 (fp.isNormal ?float9)))
(declare-const ?bool15 Bool)
(assert (= ?bool15 (fp.lt ?float9 ?float5)))
; FINAL ASSERT
(assert (or ?bool13))
(check-sat)


-- iteration 3738 --


-- iteration 3739 --


-- iteration 3740 --


-- iteration 3741 --


-- iteration 3742 --


-- iteration 3743 --


-- iteration 3744 --


-- iteration 3745 --


-- iteration 3746 --


-- iteration 3747 --


-- iteration 3748 --


-- iteration 3749 --


-- iteration 3750 --


-- iteration 3751 --


-- iteration 3752 --


-- iteration 3753 --


-- iteration 3754 --


-- iteration 3755 --


-- iteration 3756 --


-- iteration 3757 --


-- iteration 3758 --


-- iteration 3759 --


-- iteration 3760 --


-- iteration 3761 --


-- iteration 3762 --


-- iteration 3763 --


-- iteration 3764 --


-- iteration 3765 --


-- iteration 3766 --


-- iteration 3767 --


-- iteration 3768 --


-- iteration 3769 --


-- iteration 3770 --


-- iteration 3771 --


-- iteration 3772 --


-- iteration 3773 --


-- iteration 3774 --


-- iteration 3775 --


-- iteration 3776 --


-- iteration 3777 --


-- iteration 3778 --


-- iteration 3779 --


-- iteration 3780 --


-- iteration 3781 --


-- iteration 3782 --


-- iteration 3783 --


-- iteration 3784 --


-- iteration 3785 --


-- iteration 3786 --


-- iteration 3787 --


-- iteration 3788 --


-- iteration 3789 --


-- iteration 3790 --


-- iteration 3791 --


-- iteration 3792 --


-- iteration 3793 --


-- iteration 3794 --


-- iteration 3795 --


-- iteration 3796 --


-- iteration 3797 --


-- iteration 3798 --


-- iteration 3799 --


-- iteration 3800 --


-- iteration 3801 --


-- iteration 3802 --


-- iteration 3803 --


-- iteration 3804 --


-- iteration 3805 --


-- iteration 3806 --


-- iteration 3807 --


-- iteration 3808 --


-- iteration 3809 --


-- iteration 3810 --


-- iteration 3811 --


-- iteration 3812 --


-- iteration 3813 --


-- iteration 3814 --


-- iteration 3815 --


-- iteration 3816 --


-- iteration 3817 --


-- iteration 3818 --


-- iteration 3819 --


-- iteration 3820 --


-- iteration 3821 --


-- iteration 3822 --


-- iteration 3823 --


-- iteration 3824 --


-- iteration 3825 --


-- iteration 3826 --


-- iteration 3827 --


-- iteration 3828 --


-- iteration 3829 --


-- iteration 3830 --


-- iteration 3831 --


-- iteration 3832 --


-- iteration 3833 --


-- iteration 3834 --


-- iteration 3835 --


-- iteration 3836 --


-- iteration 3837 --


-- iteration 3838 --


-- iteration 3839 --


-- iteration 3840 --


-- iteration 3841 --


-- iteration 3842 --


-- iteration 3843 --


-- iteration 3844 --


-- iteration 3845 --


-- iteration 3846 --


-- iteration 3847 --


-- iteration 3848 --


-- iteration 3849 --


-- iteration 3850 --


-- iteration 3851 --


-- iteration 3852 --


-- iteration 3853 --


-- iteration 3854 --


-- iteration 3855 --


-- iteration 3856 --


-- iteration 3857 --


-- iteration 3858 --


-- iteration 3859 --


-- iteration 3860 --


-- iteration 3861 --


-- iteration 3862 --


-- iteration 3863 --


-- iteration 3864 --


-- iteration 3865 --


-- iteration 3866 --


-- iteration 3867 --


-- iteration 3868 --


-- iteration 3869 --


-- iteration 3870 --


-- iteration 3871 --


-- iteration 3872 --


-- iteration 3873 --


-- iteration 3874 --


-- iteration 3875 --


-- iteration 3876 --


-- iteration 3877 --


-- iteration 3878 --


-- iteration 3879 --


-- iteration 3880 --


-- iteration 3881 --


-- iteration 3882 --


-- iteration 3883 --


-- iteration 3884 --


-- iteration 3885 --


-- iteration 3886 --


-- iteration 3887 --


-- iteration 3888 --


-- iteration 3889 --


-- iteration 3890 --


-- iteration 3891 --


-- iteration 3892 --


-- iteration 3893 --


-- iteration 3894 --


-- iteration 3895 --


-- iteration 3896 --


-- iteration 3897 --


-- iteration 3898 --


-- iteration 3899 --


-- iteration 3900 --


-- iteration 3901 --


-- iteration 3902 --


-- iteration 3903 --


-- iteration 3904 --


-- iteration 3905 --


-- iteration 3906 --


-- iteration 3907 --


-- iteration 3908 --


-- iteration 3909 --


-- iteration 3910 --


-- iteration 3911 --


-- iteration 3912 --


-- iteration 3913 --


-- iteration 3914 --


-- iteration 3915 --


-- iteration 3916 --


-- iteration 3917 --


-- iteration 3918 --


-- iteration 3919 --


-- iteration 3920 --


-- iteration 3921 --


-- iteration 3922 --


-- iteration 3923 --


-- iteration 3924 --


-- iteration 3925 --


-- iteration 3926 --


-- iteration 3927 --


-- iteration 3928 --


-- iteration 3929 --


-- iteration 3930 --


-- iteration 3931 --


-- iteration 3932 --


-- iteration 3933 --


-- iteration 3934 --


-- iteration 3935 --


-- iteration 3936 --


-- iteration 3937 --


-- iteration 3938 --


-- iteration 3939 --


-- iteration 3940 --


-- iteration 3941 --


-- iteration 3942 --


-- iteration 3943 --


-- iteration 3944 --


-- iteration 3945 --


-- iteration 3946 --


-- iteration 3947 --


-- iteration 3948 --


-- iteration 3949 --


-- iteration 3950 --


-- iteration 3951 --


-- iteration 3952 --


-- iteration 3953 --


-- iteration 3954 --


-- iteration 3955 --


-- iteration 3956 --


-- iteration 3957 --


-- iteration 3958 --


-- iteration 3959 --


-- iteration 3960 --


-- iteration 3961 --


-- iteration 3962 --


-- iteration 3963 --


-- iteration 3964 --


-- iteration 3965 --


-- iteration 3966 --


-- iteration 3967 --


-- iteration 3968 --


-- iteration 3969 --


-- iteration 3970 --


-- iteration 3971 --


-- iteration 3972 --


-- iteration 3973 --


-- iteration 3974 --


-- iteration 3975 --


-- iteration 3976 --


-- iteration 3977 --


-- iteration 3978 --


-- iteration 3979 --


-- iteration 3980 --


-- iteration 3981 --


-- iteration 3982 --


-- iteration 3983 --


-- iteration 3984 --


-- iteration 3985 --


-- iteration 3986 --


-- iteration 3987 --


-- iteration 3988 --


-- iteration 3989 --


-- iteration 3990 --


-- iteration 3991 --


-- iteration 3992 --


-- iteration 3993 --


-- iteration 3994 --


-- iteration 3995 --


-- iteration 3996 --


-- iteration 3997 --


-- iteration 3998 --


-- iteration 3999 --


-- iteration 4000 --


-- iteration 4001 --


-- iteration 4002 --


-- iteration 4003 --


-- iteration 4004 --


-- iteration 4005 --


-- iteration 4006 --


-- iteration 4007 --


-- iteration 4008 --


-- iteration 4009 --


-- iteration 4010 --


-- iteration 4011 --


-- iteration 4012 --


-- iteration 4013 --


-- iteration 4014 --


-- iteration 4015 --


-- iteration 4016 --


-- iteration 4017 --


-- iteration 4018 --


-- iteration 4019 --


-- iteration 4020 --


-- iteration 4021 --


-- iteration 4022 --


-- iteration 4023 --


-- iteration 4024 --


-- iteration 4025 --


-- iteration 4026 --


-- iteration 4027 --


-- iteration 4028 --


-- iteration 4029 --


-- iteration 4030 --


-- iteration 4031 --


-- iteration 4032 --


-- iteration 4033 --


-- iteration 4034 --


-- iteration 4035 --


-- iteration 4036 --


-- iteration 4037 --


-- iteration 4038 --


-- iteration 4039 --


-- iteration 4040 --


-- iteration 4041 --


-- iteration 4042 --


-- iteration 4043 --


-- iteration 4044 --


-- iteration 4045 --


-- iteration 4046 --


-- iteration 4047 --


-- iteration 4048 --


-- iteration 4049 --


-- iteration 4050 --


-- iteration 4051 --


-- iteration 4052 --


-- iteration 4053 --


-- iteration 4054 --


-- iteration 4055 --


-- iteration 4056 --


-- iteration 4057 --


-- iteration 4058 --


-- iteration 4059 --


-- iteration 4060 --


-- iteration 4061 --


-- iteration 4062 --


-- iteration 4063 --


-- iteration 4064 --


-- iteration 4065 --


-- iteration 4066 --


-- iteration 4067 --


-- iteration 4068 --


-- iteration 4069 --


-- iteration 4070 --


-- iteration 4071 --


-- iteration 4072 --


-- iteration 4073 --


-- iteration 4074 --


-- iteration 4075 --


-- iteration 4076 --


-- iteration 4077 --


-- iteration 4078 --


-- iteration 4079 --


-- iteration 4080 --


-- iteration 4081 --


-- iteration 4082 --


-- iteration 4083 --


-- iteration 4084 --


-- iteration 4085 --


-- iteration 4086 --


-- iteration 4087 --


-- iteration 4088 --


-- iteration 4089 --


-- iteration 4090 --


-- iteration 4091 --


-- iteration 4092 --


-- iteration 4093 --


-- iteration 4094 --


-- iteration 4095 --


-- iteration 4096 --


-- iteration 4097 --


-- iteration 4098 --


-- iteration 4099 --


-- iteration 4100 --


-- iteration 4101 --


-- iteration 4102 --


-- iteration 4103 --


-- iteration 4104 --


-- iteration 4105 --


-- iteration 4106 --


-- iteration 4107 --


-- iteration 4108 --


-- iteration 4109 --


-- iteration 4110 --


-- iteration 4111 --


-- iteration 4112 --


-- iteration 4113 --


-- iteration 4114 --


-- iteration 4115 --


-- iteration 4116 --


-- iteration 4117 --


-- iteration 4118 --


-- iteration 4119 --


-- iteration 4120 --


-- iteration 4121 --


-- iteration 4122 --


-- iteration 4123 --


-- iteration 4124 --


-- iteration 4125 --


-- iteration 4126 --


-- iteration 4127 --


-- iteration 4128 --


-- iteration 4129 --


-- iteration 4130 --


-- iteration 4131 --


-- iteration 4132 --


-- iteration 4133 --


-- iteration 4134 --


-- iteration 4135 --


-- iteration 4136 --


-- iteration 4137 --


-- iteration 4138 --


-- iteration 4139 --


-- iteration 4140 --


-- iteration 4141 --


-- iteration 4142 --


-- iteration 4143 --


-- iteration 4144 --


-- iteration 4145 --


-- iteration 4146 --


-- iteration 4147 --


-- iteration 4148 --


-- iteration 4149 --


-- iteration 4150 --


-- iteration 4151 --


-- iteration 4152 --


-- iteration 4153 --


-- iteration 4154 --


-- iteration 4155 --


-- iteration 4156 --


-- iteration 4157 --


-- iteration 4158 --


-- iteration 4159 --


-- iteration 4160 --


-- iteration 4161 --


-- iteration 4162 --


-- iteration 4163 --


-- iteration 4164 --


-- iteration 4165 --


-- iteration 4166 --


-- iteration 4167 --


-- iteration 4168 --


-- iteration 4169 --


-- iteration 4170 --


-- iteration 4171 --


-- iteration 4172 --


-- iteration 4173 --


-- iteration 4174 --


-- iteration 4175 --


-- iteration 4176 --


-- iteration 4177 --


-- iteration 4178 --


-- iteration 4179 --


-- iteration 4180 --


-- iteration 4181 --


-- iteration 4182 --


-- iteration 4183 --


-- iteration 4184 --


-- iteration 4185 --


-- iteration 4186 --


-- iteration 4187 --


-- iteration 4188 --


-- iteration 4189 --


-- iteration 4190 --


-- iteration 4191 --


-- iteration 4192 --


-- iteration 4193 --


-- iteration 4194 --


-- iteration 4195 --


-- iteration 4196 --


-- iteration 4197 --


-- iteration 4198 --


-- iteration 4199 --


-- iteration 4200 --


-- iteration 4201 --


-- iteration 4202 --


-- iteration 4203 --


-- iteration 4204 --


-- iteration 4205 --


-- iteration 4206 --


-- iteration 4207 --


-- iteration 4208 --


-- iteration 4209 --


-- iteration 4210 --


-- iteration 4211 --


-- iteration 4212 --


-- iteration 4213 --


-- iteration 4214 --


-- iteration 4215 --


-- iteration 4216 --


-- iteration 4217 --


-- iteration 4218 --


-- iteration 4219 --


-- iteration 4220 --


-- iteration 4221 --


-- iteration 4222 --


-- iteration 4223 --


-- iteration 4224 --


-- iteration 4225 --


-- iteration 4226 --


-- iteration 4227 --


-- iteration 4228 --


-- iteration 4229 --


-- iteration 4230 --


-- iteration 4231 --


-- iteration 4232 --


-- iteration 4233 --


-- iteration 4234 --


-- iteration 4235 --


-- iteration 4236 --


-- iteration 4237 --


-- iteration 4238 --


-- iteration 4239 --


-- iteration 4240 --


-- iteration 4241 --


-- iteration 4242 --


-- iteration 4243 --


-- iteration 4244 --


-- iteration 4245 --


-- iteration 4246 --


-- iteration 4247 --


-- iteration 4248 --


-- iteration 4249 --


-- iteration 4250 --


-- iteration 4251 --


-- iteration 4252 --


-- iteration 4253 --


-- iteration 4254 --


-- iteration 4255 --


-- iteration 4256 --


-- iteration 4257 --


-- iteration 4258 --


-- iteration 4259 --


-- iteration 4260 --


-- iteration 4261 --


-- iteration 4262 --


-- iteration 4263 --


-- iteration 4264 --


-- iteration 4265 --


-- iteration 4266 --


-- iteration 4267 --


-- iteration 4268 --


-- iteration 4269 --


-- iteration 4270 --
